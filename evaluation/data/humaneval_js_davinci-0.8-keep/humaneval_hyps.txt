value = parseFloat(value)   return Math.round(value) }
value = +value;   if (isNaN(value)) {     return false;   }   return Math.round(value); }
return Math.round(value); }
return Math.round(value); }
let num = parseFloat(value);   let floor = Math.floor(num);   let ceil = Math.ceil(num);   let closerToFloor = num - floor;   let closerToCeil = ceil - num;   if(closerToFloor < closerToCeil){     return floor;   } else {     return ceil;   } }
return Number(value).toFixed(0); }
let num = parseFloat(value);   if (Math.round(num) - num === 0){     return num;   } else if (Math.round(num) - num > 0){     return Math.floor(num);   } else {     return Math.ceil(num);   } }
let convertedToNum = Number(value);     let rounded = Math.round(convertedToNum);     let roundedDown = Math.floor(convertedToNum);     let roundedUp = Math.ceil(convertedToNum);     let decimal = convertedToNum - roundedDown;     let decimal2 = roundedUp - convertedToNum;     if(decimal < decimal2){         return roundedDown;     }else if(decimal2 < decimal){         return roundedUp;     }else{         return rounded;     } }
let numbers = value.split('.');     let num1 = parseInt(numbers[0]);     let num2 = parseInt(numbers[1]);     return (num2 >= 5) ? num1 + 1 : num1; }
//Turn value into an array using .split()     //Turn value into an array using .map() to loop over each number     //Turn value into an array using .Math.round() to round each number     //Turn value into an array using .join('') to put each number back into one string     //Turn value into an array using .parseInt() to change each number back into a string     //Return value     return parseInt(value.split('').map(val => Math.round(val)).join('')); }
var valInt = parseInt(value);     var valFloat = parseFloat(value);     var valStr = value.toString();     var valDec = valStr.slice(valStr.indexOf('.'));     if(valFloat>valInt){         if(valDec<0.5){             return valInt;         }else{             return valInt + 1;         }     }else{         return valInt;     } }
const splitValue = value.split(".");     if(splitValue[1] !== undefined){         if(splitValue[1][0] >= 5){             return Number(splitValue[0]) + 1;         } else {             return Number(splitValue[0]);         }     } else {         return Number(splitValue[0]);     } }
value = parseFloat(value); 	var num = value.toString().indexOf('.'); 	if(num == -1){ 		return value; 	} 	else{ 		var before = value.toString().slice(0,num); 		var after = value.toString().slice(num+1,value.toString().length); 		if(after[0] >= 5){ 			return parseInt(before) + 1; 		} 		else{ 			return parseInt(before); 		} 	} }
return (value - value.toFixed(0) > 0.5) ? (Math.ceil(value)) : (Math.floor(value)); }
return value.toString().indexOf('.') < 0 ? parseInt(value) : parseInt(value) + 0.5; }
var result = Math.round(value);   return result; }
return value; } module.exports = closest_integer;
return text.replace(/\s+/g, '-').replace(/ /g, '_'); }
var index = 0; 	var space_index = 0; 	var substring = ""; 	while(index < text.length){ 		space_index = text.indexOf(" ", index); 		if(space_index == -1){ 			substring = text.substring(index, text.length); 			substring = substring.replace(/ /g, "_"); 			text = text.substring(0, index) + substring; 			break; 		} 		substring = text.substring(index, space_index); 		substring = substring.replace(/ /g, "_"); 		text = text.substring(0, index) + substring + text.substring(space_index); 		index = space_index + 1; 	} 	return text.replace(/\s+/g, "-"); }
var t = text.replace(/\s+/g,'-');     return t.replace(/\s/g, '_'); }
return text.replace(/\s/g, '_').replace(/_+/g, '-'); }
return text.replace(/[ ]{2,}/g, '-').replace(/ /g, '_'); }
let temp = text.split(" ");   let i = 0;   while(i < temp.length){     if(temp[i] == "")       temp.splice(i, 1);     else i++;   }   let j = 0;   while(j < temp.length - 1){     if(temp[j].length == 0){       temp.splice(j, 1);     }else j++;   }   let result = temp.join(" ");   while(result.indexOf("  ") != -1){     result = result.replace("  ", "-");   }   return result.replace(/ /g, "_"); }
return text.replace(/\s{2,}/g, "-").replace(/\s/g, "_"); }
return text.replace(/\s{2,}/g, "-").replace(/\s/g, "_"); }
return text.replace(/\s{2,}/g, '-').replace(/\s/g, '_'); }
if (text.length == 0){         return "";     }     else{         if (text[0] == " "){             if (text[1] == " "){                 if (text[2] == " "){                     return fix_spaces("-" + text.slice(3));                 }                 else{                     return fix_spaces("_" + text.slice(2));                 }             }             else{                 return fix_spaces("_" + text.slice(1));             }         }         else{             return text[0] + fix_spaces(text.slice(1));         }     } }
let count = 0;     let result = "";     for(let i = 0; i < text.length; i++){         if(text[i] === " "){             count++;             result += (count > 2) ? "-" : "_";         }         else{             count = 0;             result += text[i];         }     }     return result; }
return text.replace(/\s+/g,'-').replace(/ /g, '_') }
let a = text.replace(/\s{2,}/g, "-").replace(/ /g, "_");     return a; }
return text.replace(/[\s]+/g, '-').replace(/ /g, '_').replace(/^[\s]+/g, '').replace(/[\s]+$/g, ''); }
return text.replace(/\s+/g, ' ').replace(/ /g, '_').replace(/_+/g, '-'); }
var newStr = text.split("  ").join("-");     var newStr2 = newStr.split(" ").join("_");     return newStr2; }
let result = '';     let to_underscore = false;     let to_dash = false;     for(let i = 0; i < text.length; i++){         if(text[i] !== ' '){             result += text[i];             to_underscore = false;             to_dash = false;         }else{             if(to_underscore){                 result += '-';                 to_dash = true;             }else{                 result += '_';                 to_underscore = true;             }         }     }     return result; }
return text.replace(/[ ]{2,}/g, '-').replace(/ /g, '_'); }
const newText = text.replace(/\s+/g, '_');     return newText; }
let count = 0;   for(let num of nums){     if(num > 10 && num.toString().length > 1){       let numStr = num.toString();       if(numStr[0] % 2 !== 0 && numStr[numStr.length - 1] % 2 !== 0){         count++;       }     }   }   return count; }
let counter = 0;   for(let i = 0; i < nums.length; i++){     if(nums[i] > 10 && nums[i]%2 === 1 && nums[i]%10 === 1){       counter += 1;     }   }   return counter; }
let arr = nums.filter(n => n > 10);     let result = 0;     for(let i = 0; i < arr.length; i++){         let num = arr[i];         let first = num % 10;         let last = num.toString().split('')[0];         if(first % 2 != 0 && last % 2 != 0){             result++;         }     }     return result; }
let count = 0;     for(let i = 0; i < nums.length; i++){         if(nums[i] > 10 && nums[i] % 2 !== 0 && (nums[i] % 10) % 2 !== 0){             count++;         }     }     return count; }
let specialArray = [];     let counter = 0;     for(let i = 0; i < nums.length; i++){         let numAsString = nums[i].toString();         if(nums[i] > 10 && numAsString[0] % 2 !== 0 && numAsString[numAsString.length - 1] % 2 !== 0){             specialArray.push(nums[i]);             counter ++;         }     }     return counter; }
if (nums[0] % 2 == 1 && nums[nums.length - 1] % 2 == 1) { 		return nums.length; 	} }
var count = 0; 	for(var i = 0; i < nums.length; i++){ 		var elem = nums[i]; 		if(elem > 10 && elem % 2 === 1 && Math.floor(elem / 10) % 2 === 1 && elem % 10 === 1 || elem % 10 === 3 || elem % 10 === 5 || elem % 10 === 7 || elem % 10 === 9){ 			count++; 		} 	} 	return count; }
let oddFilter = nums.filter(function(num){         if(num > 10){             if(Math.abs(num % 10) % 2 !== 0 && Math.abs(num % 10) !== 0){                 return num;             }         }     });     return oddFilter.length; }
let sum = 0;     for(let i = 0; i < nums.length; i++){         let num = Math.abs(nums[i]);         let firstDigit = num.toString()[0];         let lastDigit = num.toString()[num.toString().length - 1];         if(num > 10 && ((firstDigit % 2 != 0) && (lastDigit % 2 != 0))){             sum += 1;         }     }     return sum; }
//determine the first and last digit of a number     //function to determine the first digit of a number     const firstDigit = (n) => {         while (n >= 10) {             n = n / 10;         }         return n;     }     //function to determine the last digit of a number     const lastDigit = (n) => {         return n % 10;     }     //function to check if the digit is even or odd     const isOdd = (n) => {         if (n % 2 === 0) {             return false;         }         return true;     }     //filter     return nums.filter(x => (x > 10) && (isOdd(firstDigit(x)) && isOdd(lastDigit(x)))).length; }
return nums.filter(function(num){ 		var first = num.toString()[0]; 		var last = num.toString()[num.toString().length - 1]; 		if(first % 2 !== 0 && last % 2 !== 0 && num > 10){ 			return num; 		} 	}).length; }
return nums.filter(n => {         if(n < 0){             n = n * -1;         }         if(n > 10 && n % 2 != 0 &&          Math.floor(n / 10) % 2 != 0 &&          n % 10 != 0){             return n;         }     }).length; }
// your code here     return nums.filter(function(number){         return Math.abs(number) > 10 &&                Math.abs(number % 10) % 2 == 1 &&                Math.abs(number / (Math.pow(10, String(number).length - 1))) % 2 == 1;     }).length; }
let arr = [];     for(let i = 0; i < nums.length; i++){         if(nums[i] > 10 && Math.abs(nums[i] % 10) % 2 != 0 && nums[i] % 2 != 0){             arr.push(nums[i]);         }     }     return arr.length; }
var count = 0; 	for(var i = 0; i < nums.length; i++){ 		if(nums[i] > 10 && (nums[i] % 2 === 1 || nums[i] % 2 === -1) && (nums[i] % 10 === 1 || nums[i] % 10 === 3 || nums[i] % 10 === 5 || nums[i] % 10 === 7 || nums[i] % 10 === 9)){ 			count++; 		} 	} 	return count; }
var index = 0;     for(var i = 0; i < nums.length; i++){         if(nums[i] > 10 && nums[i] % 2 == 1 && nums[i] % 10 == 1){             index++;         }     }     return index; }
}
//your code is here }
return nums.filter(x => x > 10 && x.toString().slice(0,1) % 2 != 0 && x.toString().slice(-1) % 2 != 0).length; }  module.exports = {     parseStudentRecord,     isStudentId,     getStudentName,     getStudentId,     getStudentGrade,     getStudentInfo,     getStudentList,     getStudentInfoList,     getStudentsByGrade,     getStudentsByGradeRange,     addStudent,     addStudents,     removeStudentById,     removeStudentByName,     removeStudentsByGrade,     removeStudentsByGradeRange,     updateStudent,     updateStudents,     addGradeById,     addGradeByName,     removeGradeById,     removeGradeByName,     getStudentCountByGrade,     getStudentsByLetter,     getCountByLetter,     getAverageByGrade,     getStudentAverageById,     getStudentAverageByName,     getAverageByGradeAndGender,     getStudentInfoById,     getStudentInfoByName,     getFemaleCount,     getStudentsByName,     getBestStudent,     getWorstStudent,     getStudentsByAge,     getTotalCount,     getStudentListByAge,     getOlderStudents,     getYoungerStudents,     sortStudents,     getStudentsByAverage,     specialFilter }
let aux = '';     let start = false;     let strongest = '';     let strongest_strength = 0;     let strength = 0;     let cap = 0;     let sm = 0;     let first = true;     for(let extension of extensions){         aux = '';         start = false;         cap = 0;         sm = 0;         strength = 0;         first = true;         for(let ch of extension){             if(ch.charCodeAt(0) >= 65 && ch.charCodeAt(0) <= 90){                 start = true;                 if(first){                     aux += ch;                     first = false;                 }                 cap++;             }             else if(ch.charCodeAt(0) >= 97 && ch.charCodeAt(0) <= 122){                 start = true;                 sm++;             }             else if(start){                 break;             }         }         strength = cap - sm;         if(strength > strongest_strength){             strongest_strength = strength;             strongest = aux;         }     }     return class_name + '.' + strongest; }
var strength = -99;     var result = 'my_class.AA';     for(var extension of extensions){         var cap = 0;         var sm = 0;         for(var i = 0; i < extension.length; i++){             if(extension[i] == extension[i].toUpperCase()){                 cap++;             }else{                 sm++;             }         }         var temp = cap - sm;         if(temp > strength){             strength = temp;             result = class_name + '.' + extension;         }     }     return result; }
let strongest = [0, extensions[0]];   for (let i = 0; i < extensions.length; i++) {     const extension = extensions[i];     let strength = [...extension].reduce((acc, cur) => {       cur = cur.toUpperCase() === cur ? 1 : -1;       return acc + cur;     }, 0);     if (strength >= strongest[0]) {       strongest = [strength, extension];     }   }   return `${class_name}.${strongest[1]}`; }
let strongest = {ext: '', str: -Infinity};     for(let x = 0; x < extensions.length; x++){         let cap = 0, sm = 0;         for(let y = 0; y < extensions[x].length; y++){             if(extensions[x][y] >= 'A' && extensions[x][y] <= 'Z'){                 cap++;             }             else{                 sm++;             }         }         if(cap - sm > strongest.str){             strongest.ext = extensions[x];             strongest.str = cap - sm;         }     }     return class_name + '.' + strongest.ext; }
var res = null;   var strength = 0;   extensions.forEach(function(val, index){     var temp = 0;     val.split('').forEach(function(val, index){       if (val.toUpperCase() === val) temp += 1;       else temp -= 1;     });     if (temp > strength) {       strength = temp;       res = val;     }   });   return class_name + '.' + res; }
var strength = 0;     var strongest_extension = '';     extensions.forEach(element => {         var cur_strength = element.split('').reduce((acc, cur) => {             if (/[A-Z]/.test(cur)) acc.caps++;             if (/[a-z]/.test(cur)) acc.smalls++;             return acc;         }, {caps: 0, smalls: 0});         if (strength < cur_strength.caps - cur_strength.smalls) {             strength = cur_strength.caps - cur_strength.smalls;             strongest_extension = element;         }     });     return class_name + '.' + strongest_extension; }
var ext_strength = [];     extensions.forEach(function(e){         var upper = e.replace(/[^A-Z]/g, '').length;         var lower = e.replace(/[^a-z]/g, '').length;         ext_strength.push([upper - lower, e]);     });     ext_strength.sort();     return class_name + '.' + ext_strength[ext_strength.length - 1][1]; }
var arr = [] 	for(var i = 0; i < extensions.length; i++){ 		arr.push(extensions[i].split('')) 	} 	//[["S", "E", "r", "v", "i", "N", "G", "S", "l", "i", "C", "e", "s"], ["C", "h", "e", "e", "s", "e"], ["S", "t", "u", "F", "f", "e", "d"]] 	var num = 0 	var count = 0 	var a = 0 	var b = 0 	var c = 0 	for(var i = 0; i < arr.length; i++){ 		for(var j = 0; j < arr[i].length; j++){ 			if(arr[i][j] == arr[i][j].toUpperCase()){ 				a++ 			}else{ 				b++ 			} 		} 		c = a - b 		if(c > num){ 			num = c 			count = i 		} 		a = 0 		b = 0 	} 	return class_name + '.' + extensions[count] }
let ext_index=0; 	let sum_up=0; 	let sum_low=0; 	for(let i=0;i<extensions.length;i++){ 		sum_up=0; 		sum_low=0; 		for(let j=0;j<extensions[i].length;j++){ 			if(extensions[i][j]==extensions[i][j].toUpperCase()){ 				sum_up++; 			} 			else{ 				sum_low++; 			} 		} 		if(sum_up-sum_low>ext_index){ 			ext_index=sum_up-sum_low; 			result=extensions[i]; 		} 	} 	return class_name+'.'+result; }
let strength = 0;     let strongest = 0;     for(let i = 0; i < extensions.length; i++){         let caps = 0;         let smalls = 0;         for(let j = 0; j < extensions[i].length; j++){             if(extensions[i][j] == extensions[i][j].toUpperCase()){                 caps += 1;             }             else{                 smalls += 1;             }         }         strength = caps - smalls;         if(strength > strongest){             strongest = strength;             strongest_extension = extensions[i];         }     }     return class_name + '.' + strongest_extension; }
let caps = 0,         sm = 0,         _strongest = '';     for(let i = 0; i < extensions.length; i++){         let j = 0;         while(j < extensions[i].length){             if(extensions[i][j] >= 'A' && extensions[i][j] <= 'Z'){                 caps += 1;             }             else if(extensions[i][j] >= 'a' && extensions[i][j] <= 'z'){                 sm += 1;             }             j++;         }         if(caps - sm > 0){             _strongest = extensions[i];         }         caps = 0;         sm = 0;     }     return `${class_name}.${_strongest}`; }
let extension = extensions.reduce((acc, e) => {         let num_caps = (e.match(/[A-Z]/g) || []).length;         let num_smalls = (e.match(/[a-z]/g) || []).length;         let diff = num_caps - num_smalls;         if (diff > acc.diff){             acc.diff = diff;             acc.extension = e;         }         return acc;     }, {diff: -Infinity, extension: ''});     return `${class_name}.${extension.extension}`; }
var uppercase = 0;     var lowercase = 0;     var strength = 0;     var strongest = '';     extensions.forEach(extension => {         for(let i = 0; i < extension.length; i++){             if(extension[i] === extension[i].toUpperCase()){                 uppercase++;             }             else{                 lowercase++;             }         }         if(strength < uppercase - lowercase){             strength = uppercase - lowercase;             strongest = extension;         }         uppercase = 0;         lowercase = 0;     });     return class_name + '.' + strongest; }
var best_ext;     var best_score = 0;     for(var i = 0; i < extensions.length; i++){         var score = extensions[i].replace(/[^A-Z]/g, '').length - extensions[i].replace(/[^a-z]/g, '').length;         if(score > best_score){             best_score = score;             best_ext = extensions[i];         }     }     return class_name + '.' + best_ext; }
var classes = {};     for(var i=0; i<extensions.length; i++){         var up = extensions[i].match(/[A-Z]/g).length;         var low = extensions[i].match(/[a-z]/g).length;         var strength = up - low;         classes[extensions[i]] = strength;     }     var max = extensions[0];     for(var i=0; i<extensions.length; i++){         if(classes[extensions[i]] > classes[max]){             max = extensions[i];         }     }     return class_name + '.' + max; }
let maxStrength = 0;   let strongestExtension = '';   extensions.forEach(extension => {     let strength = extension.split('').filter(char => char === char.toUpperCase()).length - extension.split('').filter(char => char === char.toLowerCase()).length;     if (strength > maxStrength) {       maxStrength = strength;       strongestExtension = extension;     }   });   return `${class_name}.${strongestExtension}`; }
if(extensions.length === 0)         return class_name;     let strongest_extension = extensions[0];     let strongest_strength = 0;     for(let i = 0; i < extensions.length; i++){         let strength = 0;         for(let j = 0; j < extensions[i].length; j++){             if(extensions[i][j] >= 'A' && extensions[i][j] <= 'Z')                 strength++;             else if(extensions[i][j] >= 'a' && extensions[i][j] <= 'z')                 strength--;         }         if(strength > strongest_strength){             strongest_strength = strength;             strongest_extension = extensions[i];         }     }     return class_name + '.' + strongest_extension; }
let maxStrength = -Infinity;     let extensionName = "";     extensions.forEach(extension => {         let up = extension.split("").filter(x => x === x.toUpperCase()).length;         let lo = extension.split("").filter(x => x === x.toLowerCase()).length;         let strength = up - lo;         if(strength > maxStrength){             maxStrength = strength;             extensionName = extension;         }     });     return `${class_name}.${extensionName}`; }
var CAP = 0;   var SM = 0;   var strongestExt;   for(var i = 0; i < extensions.length; i++){     CAP = 0;     SM = 0;     for(var j = 0; j < extensions[i].length; j++){       if(extensions[i][j] == extensions[i][j].toUpperCase()){         CAP++;       }       else{         SM++;       }     }     if(extensions[i].length === 0){       continue;     }     if(i === 0){       strongestExt = extensions[i];     }     else if(CAP - SM > extensions[i].length){       strongestExt = extensions[i];     }   }   return class_name + '.' + strongestExt; }
let arr = []; 	if (lst.length == 0) { 		return arr; 	} 	for (let i = 0; i < lst.length; i++) { 		for (let j = 0; j < lst[i].length; j++) { 			if (lst[i][j] == x) { 				arr.push([i, j]); 			} 		} 	} 	return arr.sort((a, b) => a[0] - b[0] || b[1] - a[1]); }
let tuples = [];     for (let i = 0; i < lst.length; i++) {         for (let j = 0; j < lst[i].length; j++) {             if (lst[i][j] === x) {                 tuples.push([i, j]);             }         }     }     tuples.sort(function (a, b) {         return a[0] - b[0];     });     tuples.sort(function (a, b) {         return b[1] - a[1];     });     return tuples; }
let result = [];     for (let i = 0; i < lst.length; i++) {         for (let j = 0; j < lst[i].length; j++) {             if (lst[i][j] === x) {                 result.push([i, j]);             }         }     }     return result.sort((a, b) => {         if (a[0] === b[0]) {             return b[1] - a[1];         }         return a[0] - b[0];     }); }
if(lst.length == 0){         return [];     }     var result = [];     for(var i = 0; i < lst.length; i++){         for(var j = 0; j < lst[i].length; j++){             if(lst[i][j] == x){                 result.push([i, j]);             }         }     }     result.sort(function(a, b){         if(a[0] < b[0]){             return -1;         }         if(a[0] > b[0]){             return 1;         }         if(a[1] > b[1]){             return -1;         }         if(a[1] < b[1]){             return 1;         }         return 0;     });     return result; }
let res = []     for (let i = 0; i < lst.length; i++) {         let temp = lst[i].reduce((acc,item, ind) => item === x ? acc.concat([[i, ind]]) : acc, [])         res = res.concat(temp)     }     res.sort((a,b) => a[0] - b[0] || b[1] - a[1])     return res }
let res = [];     lst.forEach((item, i) => {         item.forEach((elem, j) => {             if (elem === x) res.push([i, j]);         });     });     return res.sort((a, b) => a[0] - b[0] || b[1] - a[1]); }
let arr = []     lst.forEach((item, index) => {         item.forEach((item2, index2) => {             if (item2 === x) {                 arr.push([index, index2])             }         })     })     arr.sort((a, b) => {         if (a[0] < b[0]) {             return -1         } else if (a[0] > b[0]) {             return 1         } else {             if (a[1] > b[1]) {                 return -1             } else if (a[1] < b[1]) {                 return 1             } else {                 return 0             }         }     })     console.log(arr)     return arr } get_row([     [1,2,3,4,5,6],     [1,2,3,4,1,6],     [1,2,3,4,5,1] ], 1) get_row([], 1) get_row([[], [1], [1, 2, 3]], 3)
let new_arr = [];     for (let i = 0; i < lst.length; i++) {         let arr = lst[i];         let index = arr.indexOf(x);         while (index >= 0) {             new_arr.push([i, index]);             index = arr.indexOf(x, index + 1);         }     }     new_arr.sort(function (a, b) {         if (a[0] !== b[0]) {             return a[0] - b[0];         } else {             return b[1] - a[1];         }     });     return new_arr; }
var result = [];     for (var i = 0; i < lst.length; i++) {         for (var j = 0; j < lst[i].length; j++) {             if (lst[i][j] == x) {                 result.push([i, j]);             }         }     }     return result.sort(function(a, b) {         return (a[0] - b[0]) || (b[1] - a[1]);     }); }
let result = [];   for (let i = 0; i < lst.length; i++) {     let row = lst[i];     for (let j = 0; j < row.length; j++) {       if (row[j] === x) {         result.push([i, j]);       }     }   }   return result.sort(function(a, b) {     if (a[0] === b[0]) {       return b[1] - a[1];     }     return a[0] - b[0];   }); }
// write code here.     const result = [];     for (let i = 0; i < lst.length; i++) {         const element = lst[i];         for (let j = 0; j < element.length; j++) {             const e = element[j];             if (e === x) {                 result.push([i, j]);             }         }     }     return result.sort((a, b) => {         if (a[0] === b[0]) {             return b[1] - a[1];         }         return a[0] - b[0];     }); }  const lst = [     [1,2,3,4,5,6],     [1,2,3,4,1,6],     [1,2,3,4,5,1] ];  const list = [     [],     [1],     [1, 2, 3] ];
let arr = [];     for (let i = 0; i < lst.length; i++) {         for (let j = 0; j < lst[i].length; j++) {             if (lst[i][j] === x) {                 arr.push([i, j]);             }         }     }     return arr.sort((a, b) => a[0] - b[0] || b[1] - a[1]); }
var coordinates = [];     var row_num = 0;     var col_num = 0;     for (var i = 0; i < lst.length; i++) {         for (var j = 0; j < lst[i].length; j++) {             if (lst[i][j] == x) {                 coordinates.push([row_num, col_num]);             }             col_num += 1;         }         row_num += 1;         col_num = 0;     }     coordinates.sort(function(a, b) {         if (a[0] < b[0]) {             return -1;         }         if (a[0] > b[0]) {             return 1;         }         if (a[1] > b[1]) {             return -1;         }         if (a[1] < b[1]) {             return 1;         }         return 0;     });     return coordinates; }
let array = [];     for (let i = 0; i < lst.length; i++) {         let row = lst[i];         for (let j = 0; j < row.length; j++) {             if (x === row[j]) {                 array.push([i, j]);             }         }     }     return array.sort((a, b) => (a[0] - b[0]) || (b[1] - a[1])); }
let array = []   let row = 0   for(let i = 0; i < lst.length; i++){     let columns = 0     for(let j = 0; j < lst[i].length; j++){       if(lst[i][j] === x){         array.push([row, columns])       }       columns++     }     row++   }   let sorted = array.sort(function(a, b){     if(a[0] === b[0]){       return b[1] - a[1]     }     return a[0] - b[0]   })   return sorted }
if (lst.length == 0) {         return [];     }     let result = [];     let i = 0;     let j = 0;     while (i < lst.length) {         while (j < lst[i].length) {             if (lst[i][j] == x) {                 result.push([i, j]);             }             j++;         }         j = 0;         i++;     }     result.sort(function(a, b) {         if (a[0] == b[0]) {             return b[1] - a[1];         }         return a[0] - b[0];     });     return result; }
var result = [];     for (var i = 0; i < lst.length; i++) {         for (var j = 0; j < lst[i].length; j++) {             if (lst[i][j] == x) {                 result.push([i, j]);             }         }     }     return result.sort(function(a, b) {         if (a[0] < b[0]) {             return -1;         } else if (a[0] > b[0]) {             return 1;         } else {             if (a[1] > b[1]) {                 return -1;             } else if (a[1] < b[1]) {                 return 1;             } else {                 return 0;             }         }     }); }
let row = [];     let obj = {};     for(let i = 0; i < lst.length; i++){         obj[i] = [];         for(let j = 0; j < lst[i].length; j++){             if(lst[i][j] === x){                 obj[i].push(j);             }         }     }     for(let i in obj){         for(let j of obj[i]){             row.push([i, j]);         }     }     let res = row.sort((a, b) => {         return a[0] - b[0] || b[1] - a[1];     });     return res; }
let result = [];   for (let i = 0; i < lst.length; i++) {     for (let j = 0; j < lst[i].length; j++) {       if (lst[i][j] === x) {         result.push([i, j]);       }     }   }   let sortByRow = result.sort((a, b) => {     return a[0] - b[0];   });   return sortByRow.map(x => {     return [x[0], -x[1]];   }).sort((a, b) => {     return a[1] - b[1];   }).map(x => {     return [x[0], -x[1]];   }); }
if(l.length == 0){         return null;     }     var length = l.length;     var l2 = l.sort(function(a, b){return a-b});     if(length % 2 == 0){         return (l2[length/2] + l2[length/2 - 1])/2;     }     else{         return l2[Math.floor(length/2)];     } }
// >>> median([-10, 4, 6, 1000, 10, 20])     // 15.0     // >>> median([3, 1, 2, 4, 5])     // 3     let length = l.length;     let sorted = l.sort(function(a, b){return a-b});     let result;     if (length % 2 != 0){         result = sorted[Math.floor(length/2)];     }     else{         result = (sorted[length/2] + sorted[length/2 - 1])/2;     }     return result; }
}
var ln = l.length;     if(ln%2===0){         return (l[ln/2-1]+l[ln/2])/2;     }     else{         return l[Math.floor(ln/2)];     } }
}
var l1 = l.slice();   l1.sort(function(a,b){     return a-b;   });   var result = l1[Math.floor(l1.length/2)];   return result; }
return _.median(l); }
if(l.length == 0){         return null;     }     //Sort the list     l.sort(function(a, b){         return a - b;     });     //Get the middle index     let index = parseInt(l.length / 2);     //Check if the list has an even number of elements     if(l.length % 2 == 0){         //If so, then return the mean of the elements at the index and at index + 1         return (l[index] + l[index + 1]) / 2;     }else{         //If not, then return the element at the index         return l[index];     } }
var l_sorted = l.sort(function(a, b){return a-b});     var l_len = l_sorted.length;     var l_mid = Math.floor(l_len/2);     if (l_len % 2)         return l_sorted[l_mid];     else         return (l_sorted[l_mid-1] + l_sorted[l_mid]) / 2.0; }
if (l.length == 0) {     return -1;   }   l.sort(function(a, b){return a-b});   var median = (l.length % 2 == 0) ? ((l[l.length/2] + l[l.length/2 - 1]) / 2) : l[Math.floor(l.length/2)];   return median; }
if(l.length==0){     return null;   }else{     return l[Math.floor(l.length/2)];   } }
if (l.length % 2 == 0){         return (l[l.length/2-1] + l[l.length/2])/2     }     else {         return l[Math.floor(l.length/2)]     } }
if (l.length % 2 == 0){         return (l[Math.floor(l.length/2)] + l[Math.floor(l.length/2)-1])/2     }     else {         return l[Math.floor(l.length/2)]     } }
var list = l.sort(function(a,b){ 		return a-b; 	}); 	var len = list.length; 	if(len%2 === 0){ 		return (list[len/2-1]+list[len/2])/2; 	} 	else{ 		return list[(len-1)/2]; 	} }
if(isEmpty(l)){     return 0;   }   else{     return (first(l) + last(l)) / 2;   } }
if(l.length === 0){         return NaN;     }     let k = Math.floor(l.length/2);     let m = 0;     l.sort(function(a, b){return a-b});     if(l.length % 2 === 0){         m = (l[k-1] + l[k])/2;     }else{         m = l[k];     }     return m; }
l.sort(function(a,b){ 		return a-b; 	}); 	console.log(l); 	return l[Math.floor(l.length/2)]; }
let length = l.length; 	if(length == 0){ 		return 0; 	} 	else if(length == 1){ 		return l[0]; 	} 	l.sort(function(a, b){return a-b}); 	console.log(l); 	if(length % 2 == 0){ 		return (l[length/2] + l[length/2 - 1])/2; 	} 	else{ 		return l[Math.floor(length/2)]; 	} }
var sorted = l.sort(function(a,b){     return a-b;   });   var m = sorted.length/2;   if(sorted.length % 2 == 0){     return ((sorted[m-1]+sorted[m])/2.0);   }   else{     return sorted[Math.floor(m)];   } }
numbers = numbers.split(' ') 	var numbers_in_order = [] 	var number_conversions = {'zero':0, 'one':1, 'two':2, 'three':3, 'four':4, 'five':5, 'six':6, 'seven':7, 'eight':8, 'nine':9} 	for (var i = 0; i < numbers.length; i++){ 		numbers_in_order.push(number_conversions[numbers[i]]) 	} 	numbers_in_order.sort(function(a,b){return a-b}) 	var sorted_numbers = [] 	for (var j = 0; j < numbers_in_order.length; j++){ 		for (var key in number_conversions){ 			if (numbers_in_order[j] == number_conversions[key]){ 				sorted_numbers.push(key) 			} 		} 	} 	return sorted_numbers.join(' ') }
// PUT YOUR CODE HERE     let numberals = numbers.split(' ');     for (let i = 0; i < numberals.length; i++) {         numberals[i] = numberals[i].replace('zero', '0');         numberals[i] = numberals[i].replace('one', '1');         numberals[i] = numberals[i].replace('two', '2');         numberals[i] = numberals[i].replace('three', '3');         numberals[i] = numberals[i].replace('four', '4');         numberals[i] = numberals[i].replace('five', '5');         numberals[i] = numberals[i].replace('six', '6');         numberals[i] = numberals[i].replace('seven', '7');         numberals[i] = numberals[i].replace('eight', '8');         numberals[i] = numberals[i].replace('nine', '9');     }     numberals.sort(function(a, b){return a-b});     for (let i = 0; i < numberals.length; i++) {         numberals[i] = numberals[i].replace('0', 'zero');         numberals[i] = numberals[i].replace('1', 'one');         numberals[i] = numberals[i].replace('2', 'two');         numberals[i] = numberals[i].replace('3', 'three');         numberals[i] = numberals[i].replace('4', 'four');         numberals[i] = numberals[i].replace('5', 'five');         numberals[i] = numberals[i].replace('6', 'six');         numberals[i] = numberals[i].replace('7', 'seven');         numberals[i] = numberals[i].replace('8', 'eight');         numberals[i] = numberals[i].replace('9', 'nine');     }     return numberals.join(' '); }
numbers = numbers.split(' ');     var nums = {         zero: 0,         one: 1,         two: 2,         three: 3,         four: 4,         five: 5,         six: 6,         seven: 7,         eight: 8,         nine: 9     };     numbers.sort(function(a, b){         return nums[a] - nums[b];     });     return numbers.join(' '); }
let num_map = {'zero':0, 'one':1, 'two':2, 'three':3, 'four':4, 'five':5, 'six':6, 'seven':7, 'eight':8, 'nine':9};     let num_arr = numbers.split(' ');     num_arr.sort((a,b) => {         return num_map[a] - num_map[b];     });     return num_arr.join(' '); }
// assume all numbers are valid integers, single space, no period   var numeral_to_number = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9};   var numbers_array = numbers.split(' ');   var numbers_array_converted = [];   for (var i = 0; i < numbers_array.length; i++) {     numbers_array_converted.push(numeral_to_number[numbers_array[i]]);   }   numbers_array_converted.sort(function(a, b){return a-b});   var sorted_numbers = '';   for (var i = 0; i < numbers_array_converted.length; i++) {     sorted_numbers += Object.keys(numeral_to_number)[numbers_array_converted[i]] + ' ';   }   return sorted_numbers.trim(); }
var numbers_list = numbers.split(' ');   numbers_list.sort(function(a, b){     return numeral_dict[a] - numeral_dict[b];   });   return numbers_list.join(' '); }
var nums = numbers.split(' '); 	var sort_nums = []; 	var num_dict = { 		'zero': 0, 		'one': 1, 		'two': 2, 		'three': 3, 		'four': 4, 		'five': 5, 		'six': 6, 		'seven': 7, 		'eight': 8, 		'nine': 9 	}; 	for (var i = 0; i < nums.length; i++){ 		var num = num_dict[nums[i]]; 		if (num){ 			sort_nums.push(num); 		} 	} 	sort_nums.sort(function(a, b){return a - b}); 	for (var i = 0; i < sort_nums.length; i++){ 		for (var key in num_dict){ 			if (num_dict[key] === sort_nums[i]){ 				sort_nums[i] = key; 			} 		} 	} 	return sort_nums.join(' '); }
let s = '';     let nums = numbers.split(' ');     nums.sort((a, b) => lookup_number(a) - lookup_number(b));     for (let n of nums)         s += n + ' ';     return s.trimRight(); }
var num = numbers.split(' ');   var sorted = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'];   var nums = [];   for (var i = 0; i < num.length; i++) {     for (var j = 0; j < sorted.length; j++) {       if (num[i] === sorted[j]) {         nums.push(sorted[j]);       }     }   }   return nums.join(' '); }
}
var num_obj = {     zero: 0,     one: 1,     two: 2,     three: 3,     four: 4,     five: 5,     six: 6,     seven: 7,     eight: 8,     nine: 9   };   var stringArr = numbers.split(' ');   for (var i = 0; i < stringArr.length; i++) {     stringArr[i] = num_obj[stringArr[i]];   }   stringArr.sort(function(a, b){return a-b});   for (var j = 0; j < stringArr.length; j++) {     for (var key in num_obj) {       if (num_obj[key] === stringArr[j]) {         stringArr[j] = key;       }     }   }   var string = stringArr.join(' ');   return string; }
var nums = numbers.split(' ');   return nums.sort(function(a,b){     return (translate(a) > translate(b));   }).join(' '); }
let numberMap = {'zero':0, 'one':1, 'two':2, 'three':3, 'four':4, 'five':5, 'six':6, 'seven':7, 'eight':8, 'nine':9}     return numbers.split(' ').sort((a,b) => numberMap[a] - numberMap[b]).join(' ') }
var list = numbers.split(' ');     var num = [];     var dict = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9};     for (var i=0; i<list.length; i++){         num.push(dict[list[i]]);     }     num.sort(function(a, b){return a-b});     for (var i=0; i<num.length; i++){         for (var key in dict){             if (dict[key] === num[i]){                 num[i] = key;             }         }     }     return num.join(' '); }
var new_number_array = []; 	var array_of_numbers = numbers.split(" "); 	for (var i = 0; i < array_of_numbers.length; i++) { 		switch(array_of_numbers[i]){ 			case 'zero': 				new_number_array.push(0); 				break; 			case 'one': 				new_number_array.push(1); 				break; 			case 'two': 				new_number_array.push(2); 				break; 			case 'three': 				new_number_array.push(3); 				break; 			case 'four': 				new_number_array.push(4); 				break; 			case 'five': 				new_number_array.push(5); 				break; 			case 'six': 				new_number_array.push(6); 				break; 			case 'seven': 				new_number_array.push(7); 				break; 			case 'eight': 				new_number_array.push(8); 				break; 			case 'nine': 				new_number_array.push(9); 				break; 		} 	} 	for (var i = 0; i < new_number_array.length; i++) { 		for (var j = i; j < new_number_array.length; j++) { 			if (new_number_array[i] > new_number_array[j]) { 				temp = new_number_array[i]; 				new_number_array[i] = new_number_array[j]; 				new_number_array[j] = temp; 			} 		} 	} 	for (var i =
var arr = numbers.split(' ');     arr.sort();     var output = arr.join(' ');     return output; }
var numbers_array = numbers.split(" "); 	var real_numbers = []; 	//Converting words to numbers 	for(var i = 0; i < numbers_array.length; i++){ 		if(numbers_array[i] == "zero"){ 			real_numbers.push(0); 		} 		else if(numbers_array[i] == "one"){ 			real_numbers.push(1); 		} 		else if(numbers_array[i] == "two"){ 			real_numbers.push(2); 		} 		else if(numbers_array[i] == "three"){ 			real_numbers.push(3); 		} 		else if(numbers_array[i] == "four"){ 			real_numbers.push(4); 		} 		else if(numbers_array[i] == "five"){ 			real_numbers.push(5); 		} 		else if(numbers_array[i] == "six"){ 			real_numbers.push(6); 		} 		else if(numbers_array[i] == "seven"){ 			real_numbers.push(7); 		} 		else if(numbers_array[i] == "eight"){ 			real_numbers.push(8); 		} 		else if(numbers_array[i] == "nine"){ 			real_numbers.push(9); 		} 	} 	 	//Sorting 	var temp; 	for(var i = 0; i < real_numbers.length - 1; i++){ 		for(var j = i + 1; j < real_numbers.length; j++){ 			if(real_numbers[i] > real_numbers[j]){ 				temp = real_numbers[i]; 				real_numbers[i] =
const numeral_map = new Map([['zero', 0], ['one', 1], ['two', 2], ['three', 3], ['four', 4], ['five', 5], ['six', 6], ['seven', 7], ['eight', 8], ['nine', 9]]);     const num_array = numbers.split(' ');     num_array.sort((a, b) => {return numeral_map.get(a) - numeral_map.get(b)});     return num_array.join(' '); }
let numToInt = {         'zero': 0,         'one': 1,         'two': 2,         'three': 3,         'four': 4,         'five': 5,         'six': 6,         'seven': 7,         'eight': 8,         'nine': 9     }     numbers = numbers.split(' ');     numbers = numbers.map(function(number){         return numToInt[number];     })     return numbers.sort(function(a, b){         return a - b;     }).join(' '); }
var ans = 0;     var prev_fill = 0;     for(let i = 0; i < grid.length; i++){         for(let j = 0; j < grid[i].length; j++){             if(grid[i][j] === 1){                 var prev_fill = grid[i][j];                 grid[i][j] = 0;                 ans++;             }             prev_fill = capacity - prev_fill;             if(prev_fill >= grid[i][j]){                 prev_fill -= grid[i][j];                 grid[i][j] = 0;             }             else{                 grid[i][j] -= prev_fill;                 prev_fill = 0;             }         }     }     return ans; }
//return [max_fill_times, fill_row]     var max_fill_times = 0,         fill_row = 0;     for(var i=0; i<grid.length; i++){         var cur_row_total = 0;         for(var j=0; j<grid[i].length; j++){             cur_row_total += grid[i][j];         }         if(cur_row_total > max_fill_times){             max_fill_times = cur_row_total;             fill_row = i;         }     }     return [max_fill_times, fill_row]; }
var sum = 0, max = 0;     for(var i = 0; i < grid.length; i++){         for(var j = 0; j < grid[i].length; j++){             sum += grid[i][j];             if(sum > max) max = sum;             if(sum == capacity) sum = 0;         }     }     return max; }
let max_fill = 0   let count = 0   for(let i = 0; i < grid.length; i++){     let fill = 0     for(let j = 0; j < grid[i].length; j++){       if(grid[i][j] == 1){         fill++       }     }     if(fill > max_fill){       max_fill = fill     }   }   count = Math.ceil(max_fill / capacity)   return count }
let maxFill = 0;     for(let i = 0; i < grid.length; i++){         for(let j = 0; j < grid[i].length; j++){             maxFill = Math.max(maxFill, grid[i][j]);         }     }     return Math.min(maxFill, capacity); }
var height = grid.length;     var width = grid[0].length;     var total = 0;     for(var i = 0; i < height; i++){         for(var j = 0; j < width; j++){             total += grid[i][j];         }     }     var can_fill = Math.floor(total / capacity);     return can_fill; }
const maxFillResult = [];     //calculate maxFillResult     for(let rowIndex = 0; rowIndex < grid.length; rowIndex++){         const row = grid[rowIndex];         let maxCapacity = capacity;         const resultRow = [];         // calculate maxFillRowResult         for(let wellIndex = 0; wellIndex < row.length; wellIndex++){             const well = row[wellIndex];             //check if the well contains water             if(well){                 //calculate maxCapacity - current well capacity                 const currentCapacity = maxCapacity - well;                 //push it to the result row                 resultRow.push(currentCapacity);                 // if it's negative then we should throw away this water                 // and set maxCapacity to capacity                 if(currentCapacity < 0){                     maxCapacity = capacity;                 } else {                     maxCapacity = currentCapacity;                 }             } else {                 //if the well is empty push 0                 resultRow.push(0);             }         }         //push the result row to the result array         maxFillResult.push(resultRow);     }     return maxFillResult; }
//expect_fill = max(grid[i])     let num_rows = grid.length;     let num_cols = grid[0].length;     let row_idx = 0;     let expect_fill = 0;     for(let col_idx = 0; col_idx < num_cols; col_idx++){         expect_fill = Math.max(expect_fill, grid[row_idx][col_idx]);     }     let fill_cnt = 0;     while(row_idx < num_rows){         let fill_cnt_per_row = 0;         for(let col_idx = 0; col_idx < num_cols; col_idx++){             if(grid[row_idx][col_idx] < expect_fill){                 grid[row_idx][col_idx] += 1;                 fill_cnt_per_row += 1;             }         }         fill_cnt += fill_cnt_per_row;         row_idx += 1;     }     return fill_cnt; }
// create a dp array of the same size of grid     let dp = Array(grid.length).fill(0).map(x => Array(grid[0].length).fill(0));     for(let i = 0; i < grid.length; i++){         for(let j = 0; j < grid[0].length; j++){             // 1 means there is water in the well,              // add it to the current bucket capacity             if(grid[i][j] === 1){                 dp[i][j] = 1;             }             // if we are not on the first row,              // add the previous row to the current bucket capacity             if(i > 0){                 dp[i][j] += dp[i-1][j];             }             // if we are not on the first column,              // add the previous column to the current bucket capacity             if(j > 0){                 dp[i][j] += dp[i][j-1];             }             // if we are not on the first row and first column,              // remove the square in the diagonal,              // because we added it twice             if(i > 0 && j > 0){                 dp[i][j] -= dp[i-1][j-1];             }             // compare with the bucket capacity             dp[i][j] = Math.min(dp[i][j], capacity);         }     }     return dp[grid.length-1][grid[0].length-1]; }
var result = 0;     for(var i=0; i<grid.length; i++){         var n_units = 0;         for(var j=0; j<grid[i].length; j++){             if(grid[i][j] == 1){                 n_units += 1;             }         }         var n_buckets = Math.ceil(n_units / capacity);         result += n_buckets;     }     return result; }
var fill_count = 0 	var empty_wells = [] 	for(i=0; i<grid.length; i++){ 		var well = grid[i] 		var full_units = well.filter(function(unit){ 			return unit === 1 		}) 		fill_count += Math.ceil(full_units.length / capacity) 		var empty_units = well.filter(function(unit){ 			return unit === 0 		}) 		empty_wells.push(empty_units.length) 	} 	var empty_wells_count = empty_wells.filter(function(empty_units){ 		return empty_units === well.length 	}) 	if(empty_wells_count.length === grid.length){ 		return 0 	} 	return fill_count }
let max_fill = 0;     for(let row = 0; row < grid.length; row++){         for(let col = 0; col < grid[row].length; col++){             if(grid[row][col] == 1){                 max_fill += capacity - 1;             }         }     }     return max_fill; }
let max = 0;     for(let row of grid){         for(let depth of row){             max = Math.max(max, depth);         }     }     return max * capacity; }
var i = 0, j = 0, c = 0, d = 0, s = 0, e = 0, b = 0, q = 0, f = 0, g = 0, r = 0, m = 0, h = 0, x = 0, z = 0,  		len = grid.length, len2 = 0, len3 = 0, len4 = 0, len5 = 0, wells = [], wells2 = [], sp = [], em = [], po = [],  		st = [], st2 = [], en = [], co = [], co2 = [], stack = [], stack2 = [], stack3 = [], stack4 = [],  		stack5 = [], stack6 = [], stack7 = [], stack8 = [], stack9 = [], stack10 = [], stack11 = [], stack12 = [],  		stack13 = [], stack14 = [], stack15 = [], stack16 = [], stack17 = [], stack18 = [], stack19 = [], stack20 = [],  		stack21 = [], stack22 = [], stack23 = [], stack24 = [], stack25 = [], stack26 = [], stack27 = [], stack28 = [],  		stack29 = [], stack30 = [], stack31 = [], stack32 = [], stack33 = [], stack34 = [], stack35 = [], stack36 = [],  		stack37 = [], stack38 = [], stack39 = [], stack40 = [], stack41 = [], stack42 = [], stack43 = [], stack44 = [],  		stack45 = [], stack46 = [], stack47 = [], stack48 = [], stack49 = [], stack50 = [], stack51 = [], stack52 = [],  		stack53 = [], stack54 = [], stack55 = [], stack56 = [], stack57 = [], stack58 = [], stack59 = [], stack60 = [],  		stack61 = [], stack62 = [], stack63 = [], stack64 = [], stack65 = [], stack66 = [], stack67 = [], stack68 = [],
let num_buckets = 0;     for(let i = 0; i < grid.length; i++){         for(let j = 0; j < grid[i].length; j++){             if(grid[i][j] === 1){                 num_buckets++;                 let j_new = j;                 while(grid[i][j_new] === 1 && grid[i][j_new + 1] === 1 && j_new < grid[i].length){                     j_new++;                 }                 if(j_new < grid[i].length){                     grid[i][j_new] = capacity;                 }                 j = j_new;             }         }     }     return num_buckets; }
let max_fill = 0;     for(let i = 0; i < grid.length; i++){         for(let j = 0; j < grid[i].length; j++){             if(grid[i][j] === 1) {                 max_fill += capacity;             }         }     }     return max_fill; }
let max_water = 0;     let max_row = 0;     let max_col = 0;     let row_idx = 0;     let col_idx = 0;     for(const row of grid){         for(const col of row){             if(col > max_water){                 max_water = col;                 max_row = row_idx;                 max_col = col_idx;             }             col_idx++;         }         row_idx++;         col_idx = 0;     }     const result = grid[max_row][max_col] * capacity;     grid[max_row][max_col] = 0;     return result; }
return grid.reduce((acc, row) => {     return Math.max(acc, capacity * Math.floor(row.reduce((acc, val) => {       return acc + val;     }, 0) / capacity));   }, 0); }
let max_fill_map = []; 	for(let i = 0; i < grid.length; i++){ 		for(let j = 0; j < grid[i].length; j++){ 			if(grid[i][j] == 1){ 				let new_max_fill = [[i, j]]; 				for(let ii = i - 1; ii >= 0; ii--){ 					if(grid[ii][j] == 1){ 						new_max_fill.push([ii, j]); 					}else{ 						break; 					} 				} 				for(let ii = i + 1; ii < grid.length; ii++){ 					if(grid[ii][j] == 1){ 						new_max_fill.push([ii, j]); 					}else{ 						break; 					} 				} 				let new_max_fill_set = new Set(new_max_fill.map(function(x){return x.join(',');})); 				if(max_fill_map.length == 0){ 					max_fill_map.push(new_max_fill_set); 				}else{ 					let max_fill_map_new = []; 					for(let k = 0; k < max_fill_map.length; k++){ 						let intersect = new Set([...max_fill_map[k]].filter(x => new_max_fill_set.has(x))); 						if(intersect.size == 0){ 							max_fill_map_new.push(max_fill_map[k]); 						}else{ 							let union = new Set([...max_fill_map[k], ...new_max_fill_set]);
var size = arr.length;     var left = 0;     var right = size - 1;     var left_sum = 0;     var right_sum = 0;     while(left < right){         if(arr[left] != arr[right]){             left_sum += arr[left];             right_sum += arr[right];         }         left++;         right--;     }     return Math.abs(left_sum - right_sum); }
var counter = 0;   var arrEnd = arr.length - 1;   for (var i = 0; i < arr.length; i++) {     if (arr[i] !== arr[arrEnd]) {       counter++;     }     arrEnd--;   }   return counter; }
var count = 0;     var length = arr.length;     var half = length/2     for(var i = 0; i < half; i++){         if(arr[i] != arr[length-1-i]){             count++         }     }     return count }
let original = 0;   let reversed = arr.length - 1;   let count = 0;   while (original <= reversed) {     if (arr[original] !== arr[reversed]) {       count++;     }     original++;     reversed--;   }   return count; }
let count = 0;     for(let i = 0; i < arr.length/2; i++){         if(arr[i] != arr[arr.length-1-i]){             count++;         }     }     return count; }
let start=0;   let end=arr.length-1;   let count=0;   while(start<end){     if(arr[start]!==arr[end]){       count++;     }     start++;     end--;   }   return count; }
let odd = 0;   let even = 0;   let map = {};   for(let i = 0; i < arr.length; i++){     if(map[arr[i]]){       map[arr[i]]++     } else {       map[arr[i]] = 1;     }   }   for(let key in map){     if(map[key] % 2 === 0){       even += map[key];     } else {       odd += map[key];     }   }   return odd; }
var left = 0;   var right = arr.length - 1;   var changes = 0;   while(left < right){     if(arr[left] !== arr[right]){       changes++;     }     left++;     right--;   }   return changes; }
var l = 0;     var r = arr.length - 1;     var diff = 0;     while(l < r){         if(arr[l] !== arr[r]){             diff++;         }         l++;         r--;     }     return diff; }
let count = 0;     for(let i = 0; i < arr.length / 2; i++){         if(arr[i] !== arr[arr.length - 1 - i]){             count++;         }     }     return count; }
var arr1 = arr.slice();   var arr2 = arr.slice().reverse();   var count = 0;   for(var i = 0; i < arr.length; i++){     if(arr1[i] != arr2[i]){       count++;     }   }   return count; }
var count = 0;   for(var i = 0; i < arr.length/2; i++){     if(arr[i]!=arr[arr.length-1-i]){       count++;     }   }   return count; }
let length = arr.length;   let palinArr = new Array(length);   let i,j,k;   let minimum = 0;   //fill the palinArr with zeros   for(i=0;i<length;i++){     palinArr[i] = 0;   }   //make the palinArr   for(i=0,j=length-1;i<length;i++,j--){     palinArr[i] = arr[j];   }   //comapre arr and palinArr   for(i=0;i<length;i++){     if(arr[i] !== palinArr[i]){       minimum++;     }   }   return minimum; }
var min = 0;   var pointerStart = 0;   var pointerEnd = arr.length - 1;   for(var i = 0; i < arr.length; i++){     if(arr[pointerStart] !== arr[pointerEnd]){       min++;     }     pointerStart++;     pointerEnd--;   }   return min; }
let count = 0;     for(let i = 0; i < arr.length/2; i++){         if(arr[i] != arr[arr.length-1-i]){             count++;         }     }     return count; }
var left = 0;   var right = arr.length - 1;   var count = 0;   while(left < right){     if(arr[left] !== arr[right]){       count++;     }     left++;     right--;   }   return count; }
let left = 0;     let right = arr.length - 1;     let count = 0;     while(left < right){         if(arr[left] !== arr[right]){             count++;         }         left++;         right--;     }     return count; }
let count = 0;     for(let i = 0; i < arr.length/2; i++){         if(arr[i] !== arr[arr.length-1-i]){             count++;         }     }     return count; }
var palindrome = false;   for(var i = 0; i < arr.length; i++){     if(arr[i] == arr[arr.length - 1 - i]){       palindrome = true;     }     else{       return arr.length - 1 - i;     }   }   if(palindrome){     return 0;   } }
return filter(strings, function(s){ 		return s.indexOf(prefix)==0; 	}); }
var new_strings = [];     for (var i = 0; i < strings.length; i++){         if (strings[i].substring(0, prefix.length) == prefix){             new_strings.push(strings[i]);         }     }     return new_strings; }
return strings.filter(function(a){         return a.startsWith(prefix);     }); }
// your code here   var newarr = [];   for (var i = 0; i < strings.length; i++) {     if (strings[i].startsWith(prefix)) {       newarr.push(strings[i]);     }   }   return newarr; }
return strings.filter(function(string){return string.startsWith(prefix)}); }
let result = [] 	for (let i = 0; i < strings.length; i++) { 		if (strings[i].startsWith(prefix)){ 			result.push(strings[i]) 		} 	} 	return result }
var filtered = strings.filter(function(string){         return string.indexOf(prefix) == 0;     });     return filtered; }
return strings.filter(function(str){         return str.indexOf(prefix) == 0;     }); }
return strings.filter( 	function(string){ 	    return string.startsWith(prefix); 	}); }
var result = [];     for(var i = 0; i < strings.length; i++){         if(strings[i].startsWith(prefix))             result.push(strings[i]);     }     return result; }
return strings.filter(function(str){return str.startsWith(prefix)}); }
var filtered = [];     strings.forEach(function(string){         if(string.startsWith(prefix)){             filtered.push(string);         }     });     return filtered; }
// YOUR CODE HERE     return strings.filter(function(str){         return starts_with(str, prefix);     }); }
return strings.filter(function(element){         return element.substring(0, prefix.length) == prefix;     }); }
var arr = []; 	for(i = 0; i < strings.length; i++){ 		if(strings[i].startsWith(prefix)){ 			arr.push(strings[i]); 		} 	} 	return arr; }
var filtered = [];     for (var i = 0; i < strings.length; i++){         if (strings[i].startsWith(prefix)){             filtered.push(strings[i]);         }     }     return filtered; }
return _.filter(strings, function(str){ return _.str.startsWith(str, prefix); }); }
var a = strings.filter(function(val){ 		if(val.startsWith(prefix)){ 			return val; 		} 	}); 	return a; }
return strings.filter(function(str){ 		return str.slice(0, prefix.length) === prefix; 	}); }
if (n<=1){         return false;     }     for (var i=2; i*i<=n; i++){         if (n%i == 0){             return false;         }     }     return true; }
if (n <= 1){         return false;     }     var i = 2;     while (i < n){         if (n % i == 0){             return false;         }         i += 1;     }     return true; }
if (n < 2) {     return false;   }   for (var i = 2; i < n; i++){     if (n % i == 0){       return false;     }   }   return true; }
if (n <= 1){         return false;     }     for (let i = 2; i < n; i++){         if (n % i == 0){             return false;         }     }     return true; }
if (n===1){ 		return false; 	} 	else if(n === 2){ 		return true; 	}else{ 		for(var x = 2; x < n; x++){ 			if(n % x === 0){ 				return false; 			} 		} 		return true;   	} }
if (n === 1){     return false;   }   else if (n === 2){     return true;   }   else {     for (var i = 2; i < n; i++){       if (n % i === 0){         return false;       }     }     return true;   } }
if (n < 2) {         return false;     }     for (var i = 2; i < n; i++) {         if (n % i == 0) {             return false;         }     }     return true; }
if (n < 2) {     return false;   }   for (let i = 2; i < n; i++) {     if (n % i == 0) {       return false;     }   }   return true; }
var flag = true; 	var i = 2; 	while(i < n){ 		if(n % i == 0){ 			flag = false; 			break; 		} 		i++; 	} 	return flag; }
if (n === 1) {     return false;   }   for (var i = 2; i < n; i++) {     if (n % i === 0) {       return false;     }   }   return true; }
if (n <= 1){         return false;     }     for (var i = 2; i < n; i++){         if (n % i == 0){             return false;         }     }     return true; }
// your code here }
if (n < 2) {return false;}     else if (n == 2) {return true;}     else {         var max = Math.floor(Math.sqrt(n));         for (var i = 2; i <= max; i++){             if (n % i == 0) {return false;}         }         return true;     } }
if (n < 2) {         return false;     } else if (n == 2) {         return true;     } else {         var i = 2;         while (i < n) {             if (n % i == 0) {                 return false;             }             i++;         }         return true;     } }
for(var i = 2; i < n; i++){         if(n % i == 0){             return false;         }     }     return true; }
if (n < 2) { 		return false; 	} else if (n === 2) { 		return true; 	} else { 		for (var i = 2; i < n; i++) { 			if (n % i === 0) { 				return false; 			} 		} 		return true; 	} }
if (n<2){     return false;   }   for (var i=2; i<n; i++){     if (n%i==0){       return false;     }   }   return true; }
for(var i = 0; i < lst1.length; i++){         if(lst1[i] % 2 != 0){             for(var j = 0; j < lst2.length; j++){                 if(lst2[j] % 2 == 0){                     var temp = lst1[i];                     lst1[i] = lst2[j];                     lst2[j] = temp;                     j = lst2.length;                 }             }         }     }     if(lst1.every(function(e){ return e % 2 == 0;})){         return "YES";     }     return "NO"; }
//Write your code here. }
let exchange = true;     for(let i = 0; i < lst1.length; i++){         if(lst1[i] % 2 !== 0){             exchange = false;             break;         }     }     return exchange ? "YES" : "NO"; } exchange([1, 2, 3, 4], [1, 2, 3, 4]);
let lst1odds = lst1.filter(x => x % 2 !== 0);   let lst2evens = lst2.filter(x => x % 2 === 0);   if (lst1odds.length === lst2evens.length) {     return "YES";   } else {     return "NO";   } }
for (let i = 0; i < lst1.length; i++) {     if (lst1[i] % 2 !== 0) {       for (let j = 0; j < lst2.length; j++) {         if (lst2[j] % 2 === 0) {           let tmp = lst1[i];           lst1[i] = lst2[j];           lst2[j] = tmp;           break;         }       }     }   }   for (let i = 0; i < lst1.length; i++) {     if (lst1[i] % 2 !== 0) {       return "NO";     }   }   return "YES"; }
for (let i = 0; i < lst1.length; i++) {     if (lst1[i] % 2 !== 0) {       for (let j = 0; j < lst2.length; j++) {         if (lst2[j] % 2 === 0) {           let t = lst1[i];           lst1[i] = lst2[j];           lst2[j] = t;           break;         }       }     }   }   for (let i = 0; i < lst1.length; i++) {     if (lst1[i] % 2 !== 0) {       return "NO";     }   }   return "YES"; }
for (let i = 0; i < lst1.length; i++) {     if (lst1[i] % 2 !== 0) {       for (let j = 0; j < lst2.length; j++) {         if (lst2[j] % 2 === 0) {           let temp = lst1[i];           lst1[i] = lst2[j];           lst2[j] = temp;           break;         }       }     }   }   return lst1.every(el => el % 2 === 0) ? "YES" : "NO"; }
const lst1Odds = lst1.filter(n => n % 2 !== 0)   const lst2Evens = lst2.filter(n => n % 2 === 0)   const count = lst1Odds.length   return lst2Evens.length >= count ? "YES" : "NO" }
let isOdd = n => n % 2 !== 0;     let cnt1 = lst1.filter(isOdd).length;     let cnt2 = lst2.filter(isOdd).length;     return cnt1 === cnt2 ? "YES" : "NO"; }
let result = lst1.filter( x => x % 2 === 0);   if (result.length === lst1.length) {     return "YES";   } else {     return "NO";   } }
for (var i = 0; i < lst1.length; i++) {     if (lst1[i] % 2 === 0) {       return "YES";     }     for (var j = 0; j < lst2.length; j++) {       if (lst2[j] % 2 === 0) {         lst1[i] = lst2[j];         return "YES";       }     }   }   return "NO"; }
let count = 0;   let lst1Even = [];   let lst2Even = [];   let lst1Odd = [];   let lst2Odd = [];   for(let i = 0; i < lst1.length; i++){     if(lst1[i] % 2 === 0){       lst1Even.push(lst1[i]);     } else {       lst1Odd.push(lst1[i]);     }   }   for(let i = 0; i < lst2.length; i++){     if(lst2[i] % 2 === 0){       lst2Even.push(lst2[i]);     } else {       lst2Odd.push(lst2[i]);     }   }   if(lst1Even.length + lst2Odd.length === lst1.length){     return "YES";   } else {     return "NO";   } }
let sum1 = 0, sum2 = 0;     for(let i = 0; i < lst1.length; i++){         sum1 += lst1[i];     }     for(let i = 0; i < lst2.length; i++){         sum2 += lst2[i];     }     if(sum1 % 2 === 0 || sum2 % 2 === 0){         return "YES";     }     return "NO"; }
for (var i = 0; i < lst1.length; i++) {     for (var j = 0; j < lst2.length; j++) {       if (lst1[i] % 2 !== 0 && lst2[j] % 2 === 0) {         var tmp = lst1[i];         lst1[i] = lst2[j];         lst2[j] = tmp;       }     }   }   for (var k = 0; k < lst1.length; k++) {     if (lst1[k] % 2 !== 0) {       return "NO";     }   }   return "YES"; }
let evens = []   let odds = []   for(let i = 0; i < lst1.length; i++){     if(lst1[i] % 2 === 0){       evens.push(lst1[i])     }     else{       odds.push(lst1[i])     }   }   for(let i = 0; i < lst2.length; i++){     if(lst2[i] % 2 === 0){       evens.push(lst2[i])     }     else{       odds.push(lst2[i])     }   }   if(evens.length === lst1.length){     return "YES"   }   else{     return "NO"   } }
var lst3 = lst1.concat(lst2);   for(var i = 0; i < lst3.length; i++){     if(lst3[i] % 2 == 0){       lst3.splice(i, 1);       i--;     }   }   var sum = 0;   for(var i = 0; i < lst3.length; i++){     sum += lst3[i];   }   if(sum % 2 == 0){     return "YES";   }   else{     return "NO";   } }
let odds = [];   lst1.map(item => {     if (item % 2 !== 0) {       odds.push(item);     }   });   let evens = [];   lst2.map(item => {     if (item % 2 === 0) {       evens.push(item);     }   });   return (odds.length === evens.length) ? "YES" : "NO"; }
if(lst1.some(x => x % 2)) {     return 'NO';   } else {     return 'YES';   } }
return lst1.some(n => n % 2 == 0) ? "YES" : "NO"; }
var leftCount = 0; 	var rightCount = 0; 	for (var i = 0; i < brackets.length; i++) { 		if (brackets[i] === "(") { 			leftCount++; 		} else if (brackets[i] === ")") { 			rightCount++; 		} 	} 	if (leftCount === rightCount) { 		return true; 	} else { 		return false; 	} }
const stack = [];     for (let i = 0; i < brackets.length; i++){         if (brackets[i] === '('){             stack.push(brackets[i]);         }         else if (brackets[i] === ')'){             if (stack.length === 0){                 return false;             }             else{                 stack.pop();             }         }     }     return stack.length === 0; }
var count = 0;     for (var i = 0; i < brackets.length; i++){         if (brackets[i] == "("){             count++;         } else if (brackets[i] == ")"){             count--;         }         if (count < 0){             return false;         }     }     return (count == 0); }
let opening = 0     let closing = 0     for (let i = 0; i < brackets.length; i++){         if (brackets[i] == "("){             opening += 1         } else if (brackets[i] == ")"){             closing += 1         }     }     if (opening == closing){         return true     } else {         return false     } }
if (brackets.length % 2 !== 0){         return false;     }     const opening_brackets = '([{';     const closing_brackets = ')]}';     const matching_brackets = {         ')': '(',         ']': '[',         '}': '{'     };     const stack = [];     for (let i = 0; i < brackets.length; i++){         if (opening_brackets.includes(brackets[i])){             stack.push(brackets[i]);         }         else if (closing_brackets.includes(brackets[i])){             if (stack.length === 0){                 return false;             }             else if (stack[stack.length - 1] === matching_brackets[brackets[i]]){                 stack.pop();             }             else {                 return false;             }         }     }     return stack.length === 0; }
var opened_brackets = 0;   for (var i = 0; i < brackets.length; i++) {     if (brackets[i] == "(") {       opened_brackets++;     } else if (brackets[i] == ")") {       opened_brackets--;     }     if (opened_brackets < 0) {       return false;     }   }   return opened_brackets == 0; }
//Step 1: How to do parentheses matching problem?     //Step 2: How to handle errors?     //Step 3: How to use stack?     //Step 4: How to find the current parentheses is a left parentheses or right parentheses?     //Step 5: How to compare the left parentheses with right parentheses?     //Step 6: How to judge the parentheses is error or not?     //Step 7: How to output the result?     //Step 8: How to write the test case?     if(brackets.length == 0) {         return false;     }     var bracket_list = brackets.split("");     var stack = [];     for(var i = 0; i < bracket_list.length; i++) {         if(bracket_list[i] == "(") {             stack.push(bracket_list[i]);         } else if(bracket_list[i] == ")") {             if(stack.length == 0) {                 return false;             } else {                 stack.pop();             }         }     }     if(stack.length == 0) {         return true;     } else {         return false;     } }
let stack = [];     for (let bracket of brackets){         if (bracket === "("){             stack.push(bracket);         } else if (bracket === ")"){             if (stack.length === 0){                 return false;             } else {                 stack.pop();             }         }     }     return stack.length === 0; }
var bracket_counter = 0;     for (i = 0; i < brackets.length; i++){         if (brackets[i] == "("){             bracket_counter += 1;         }         else if (brackets[i] == ")"){             bracket_counter -= 1;         }         if (bracket_counter < 0){             return false;         }     }     if (bracket_counter == 0){         return true;     }     else{         return false;     } }
}
var openP = 0     var closeP = 0     for (var i = 0; i < brackets.length; i++) {         if (brackets[i] == "(") {             openP++         } else if (brackets[i] == ")") {             closeP++         }     }     if (openP == closeP) {         return true     } else {         return false     } }
var left_para = 0; 	var right_para = 0; 	for (var i = 0; i < brackets.length; i++){ 		if (brackets[i] == '('){ 			left_para++; 		} 		else if (brackets[i] == ')'){ 			right_para++; 		} 		if (right_para > left_para){ 			return false; 		} 	} 	if (left_para != right_para){ 		return false; 	} 	return true; }
var num_left = 0;     var num_right = 0;     for (var i = 0; i < brackets.length; i++){         if (brackets[i] == "("){             num_left++;         }         else{             num_right++;         }     }     if (num_left == num_right){         return true;     }     else{         return false;     } }
var error = 0; 	for (var i = 0; i < brackets.length; i++) { 		if (brackets[i] == "(") { 			error += 1; 		} 		else if (brackets[i] == ")") { 			error -= 1; 		} 		if (error < 0) { 			return false; 		} 	} 	if (error == 0) { 		return true; 	} 	else { 		return false; 	} }
var stack = []; 	var error = false; 	for(var i = 0; i < brackets.length; i++){ 		if(brackets[i] === "("){ 			stack.push(brackets[i]); 		}else if(brackets[i] === ")"){ 			if(stack.length > 0){ 				stack.pop(); 			}else{ 				error = true; 			} 		} 	} 	return error || stack.length > 0? false: true; }
var stack = [];     for (var i = 0; i < brackets.length; i++){         if (brackets[i] == '('){             stack.push(brackets[i]);         }         else if (brackets[i] == ')'){             if (stack.length == 0){                 return false;             }             else{                 stack.pop();             }         }     }     if (stack.length == 0){         return true;     }     else{         return false;     } }
var left = 0; 	var right = 0; 	 	for (var i = 0; i < brackets.length; i++){ 		if (brackets[i] == '('){ 			left += 1; 		} 		else if (brackets[i] == ')'){ 			right += 1; 		} 		if (right > left){ 			return false; 		} 	} 	return (left == right); }
var i, l, open_bracket = 0; 	for(i = 0, l = brackets.length; i < l; i++){ 		if(brackets[i] == "("){ 			open_bracket++; 		}else if(brackets[i] == ")"){ 			open_bracket--; 		} 		if(open_bracket < 0){ 			return false; 		} 	} 	return open_bracket == 0; }
const stack = new Stack();     for (let i = 0; i < brackets.length; i++) {         if (brackets[i] === "(") {             stack.push(brackets[i]);         } else if (brackets[i] === ")") {             stack.pop();         }     }     return stack.size() === 0; }
const tribonacciSequence = [1, 3, 2];   if (n === 0) {     return [];   }   if (n === 1) {     return [1];   }   if (n === 2) {     return [1, 3];   }   if (n === 3) {     return tribonacciSequence;   }   let counter = 3;   while (counter < n) {     tribonacciSequence.push(tribonacciSequence[counter] + tribonacciSequence[counter - 1] + tribonacciSequence[counter - 2]);     counter++;   }   return tribonacciSequence; }
let arr = [1, 3, 2];     for (let i = 0; i < n; i++) {         arr.push(isEven(i) ? (1 + i / 2) : arr[i - 1] + arr[i - 2] + arr[i + 1]);     }     return arr; }
let trib = [1, 3, 2];     if (n === 0) return [1];     if (n === 1) return [1, 3];     if (n === 2) return trib;     for (let i = 3; i <= n; i++) {         if (i % 2 === 0) {             trib.push(1 + i / 2);         } else {             trib.push(trib[i - 1] + trib[i - 2] + trib[i + 1]);         }     }     return trib; }
var tri = [1, 3, 2]; 	for (var i = 3; i <= n; i++) { 		if (i % 2 == 0) { 			tri.push(1 + i / 2); 		} else { 			tri.push(tri[i - 1] + tri[i - 2] + tri[i + 1]); 		} 	} 	return tri; }
if (n === 0) return [];   if (n === 1) return [1];   if (n === 2) return [1,3];   if (n === 3) return [1,3,2,8];   var arr = [1,3,2,8];   for (var i = 4; i <= n; i++) {     if (i % 2 === 0) {       arr.push(1 + i / 2);     } else {       arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);     }   }   return arr; }
let output = [];     for(let i = 0; i <= n; i++){         if(i === 0){             output.push(1);         }else if(i === 1){             output.push(3);         }else if(i === 2){             output.push(2);         }else if(i % 2 === 0){             output.push(1 + i / 2);         }else{             output.push(output[i - 1] + output[i - 2] + output[i + 1]);         }     }     return output; }
let result = [1, 3, 2, 8];   let x = 4;   while (x <= n) {     result.push(result[x-1] + result[x-2] + result[x-3]);     x++;   }   return result; }
var arr = [1, 3, 2];     if (n === 0) {         return [1];     } else if (n === 1) {         return [1, 3];     } else if (n === 2) {         return [1, 3, 2];     } else {         for (var i = 0; i < n - 2; i++) {             var lastThree = arr[arr.length - 3] + arr[arr.length - 2] + arr[arr.length - 1];             arr.push(lastThree);         }     }     return arr; }
let arr = [1, 3, 2];   let i = 3;   while (i < n + 1) {     if (i % 2 === 0) {       arr.push(arr[i - 2] + arr[i - 1] + arr[i + 1]);     } else {       arr.push(1 + (i / 2));     }     i += 1;   }   return arr; }
let result = [];   for (let i = 0; i <= n; i++) {     if (i === 0) {       result.push(1);     } else if (i === 1) {       result.push(3);     } else if (i === 2) {       result.push(2);     } else if (i === 3) {       result.push(8);     } else if (i % 2 === 0) {       result.push(1 + i / 2);     } else {       result.push(result[i - 1] + result[i - 2] + result[i - 3]);     }   }   return result; }
if(n == 0) { 		return []; 	} else if(n == 1) { 		return [1]; 	} else if(n == 2) { 		return [1, 3]; 	} 	var evenOrOdd = n % 2 == 0 ? "even" : "odd"; 	var remainder = n % 3; 	var array = [1, 3, 2]; 	if(evenOrOdd == "even") { 		for(var i = 1; i <= remainder; i++) { 			var lastNumber = array[array.length - 1]; 			var secondToLastNumber = array[array.length - 2]; 			var thirdToLastNumber = array[array.length - 3]; 			array.push(lastNumber + secondToLastNumber + thirdToLastNumber); 		} 	} else { 		for(var i = 1; i <= remainder; i++) { 			var lastNumber = array[array.length - 1]; 			var secondToLastNumber = array[array.length - 2]; 			var thirdToLastNumber = array[array.length - 3]; 			array.push(lastNumber + secondToLastNumber + thirdToLastNumber); 		} 		array.push(1 + n / 2); 	} 	return array; }
let arr = [1, 3, 2];   if (n === 0) return [];   if (n === 1) return [1];   if (n === 2) return [1, 3];   for (let i = 3; i <= n; i++) {     arr.push(arr[i - 1] + arr[i - 2] + arr[i - 3]);   }   return arr; }
if(n <= 1) return [1];     let arr = [1, 1, 1];     while(arr.length <= n) {         let last = arr[arr.length - 1];         let last2 = arr[arr.length - 2];         let last3 = arr[arr.length - 3];         arr.push(last + last2 + last3);     }     return arr; }
var arr = [1, 3, 2];   for (var i = 0; i < n - 2; i++) {     arr.push(arr[i] + arr[i + 1] + arr[i + 2]);   }   return arr; }
var tribonacciSequence = [1, 3, 2];   var currentNumber = 3;   while (currentNumber < n) {     currentNumber++;     var nextNumber = tribonacciSequence[currentNumber - 2] + tribonacciSequence[currentNumber - 3] + tribonacciSequence[currentNumber - 4];     tribonacciSequence.push(nextNumber);   }   return tribonacciSequence; }
if(n === 1) return [1, 3];     if(n === 2) return [1, 3, 2];     const arr = [1, 3, 2];     let i = 3;     while(i <= n){         if(i % 2 === 0){             arr.push(1 + i / 2);         }else{             arr.push(arr[i - 1] + arr[i - 2] + arr[i + 1]);         }         i++;     }     return arr; }
let array = [];     for(let i = 0; i <= n; i++){         if(i === 0){             array.push(1);         } else if(i === 1){             array.push(3);         } else if(i === 2){             array.push(2);         } else if(i % 2 === 0){             array.push(1 + (i / 2));         } else if(i % 2 !== 0){             array.push(array[i - 1] + array[i - 2] + array[i + 1]);         }     }     return array; }
let arr = [1, 3, 2];   while (arr.length < n + 1) {     let num = arr[arr.length - 1] + arr[arr.length - 2] + arr[arr.length - 3];     arr.push(num);   }   return arr; }
if(n == 1){         return 3;     }else if(n % 2 == 0){         return 1 + (n / 2);     }else{         return tri(n - 1) + tri(n - 2) + tri(n + 1);     } }
var length = 0;   while(string[length] != undefined){     length += 1;   }   return length; }
if(string === ""){         return 0;     }else{         return 1 + strlen(string.substring(1));     } }
var length = 0;     var i = 0;     while(string[i] != undefined){         length++;         i++;     }     return length; }
return string.length; }
return _.reduce(         string,         function(count, character){             return count + 1;         },         0     ); }
var i=0;     while(string[i]!==undefined){         i++;     }     return i; }
var i = 0;     while(string[i] !== undefined){         i++;     }     return i; }
var count = 0; 	for(var i = 0; i < string.length; i++){ 		count++; 	} 	return count; }
var strLength = 0;     for(var i = 0; i < string.length; i++){         strLength += 1;     }     return strLength; }
var total = 0;     if(string.length>0){         total = 1 + strlen(string.substring(1));     }     return total; }
return string.length; }
var stringLength = 0;   while(string[stringLength] != undefined){     stringLength++;   }   return stringLength; }
var length = 0;     for(var i = 0; i < string.length; i++){         length += 1;     }     return length; }
//base case     if(string.length === 0){         return 0;     }     //recursive case     return 1 + strlen(string.slice(1)); }
if(string === ''){         return 0;     }     else{         return 1 + strlen(string.slice(1));     } }
var count = 0;   for (var i = 0; i < string.length; i++) {     count++;   }   return count; }
return(string.length); }
var i = 0     while(string[i] !== undefined){       i++     }     return i }
//we'll use an array to store our transformed letters   let arr = [];   //we'll use a string to store the transformed letters   let str = '';   //we'll loop through every letter in the string   for(let i = 0; i < s.length; i++){     //we'll assign the character code of the letter to a variable     let char = s.charCodeAt(i);     //if that letter is not the letter 'z' we can just increment the character code by 2 and push it to the array     if(char !== 122){       arr.push(String.fromCharCode(char + 2));     }     //if that letter is the letter 'z' we want to push the character code of the letter 'b' to the array instead     else if(char === 122){       arr.push(String.fromCharCode(98));     }     //if that letter is the letter 'y' we want to push the character code of the letter 'a' to the array instead     else if(char === 121){       arr.push(String.fromCharCode(97));     }   }   //now we loop through the length of the array and assign each letter to the string   for(let i = 0; i < arr.length; i++){     str += arr[i];   }   //now we return the string   return str; }
var originalAlphabet = ["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"];     var encryptedAlphabet = [];     var encryptedString = "";     for(var i = originalAlphabet.length - 1; i >= 0; i--){         encryptedAlphabet.push(originalAlphabet[i]);     }     for(var j = 0; j < s.length; j++){         for(var k = 0; k < originalAlphabet.length; k++){             if(s[j] === originalAlphabet[k]){                 encryptedString += encryptedAlphabet[k];             }         }     }     return encryptedString; }
var x = s.split(''); 	var y = x.map(function(c){ 		var code = c.charCodeAt(); 		if (code == 122){ 			return 'a'; 		} else if (code == 121){ 			return 'b'; 		} else { 			return String.fromCharCode(code + 2); 		} 	}); 	return y.join(''); }
let a = 'abcdefghijklmnopqrstuvwxyz'   let result = ''   for(let i = 0; i < s.length; i++){     result += a[(a.indexOf(s[i]) + (2 * 2)) % 26]   }   return result }
var result = "";     for(var i = 0; i < s.length; i++){         var letter = s[i];         result += rotate(letter, 2);     }     return result; }
let str = "";     const alphabet = "abcdefghijklmnopqrstuvwxyz";     for(let i = 0; i < s.length; i++){         let index = alphabet.indexOf(s[i]);         str += alphabet[(index+2) % alphabet.length];     }     return str; }
var arr = [];     for(var i = 0; i < s.length; i++){         arr.push(s.charCodeAt(i) + 1);     }     return String.fromCharCode(...arr); }
let outputString = '';     let alphabet = 'abcdefghijklmnopqrstuvwxyz';     let inputArr = s.split('');     let lastIndex = alphabet.length - 1;     inputArr.forEach(function(inputChar){         let inputCharIndex = alphabet.indexOf(inputChar);         if(inputCharIndex === lastIndex){             let shiftedIndex = inputCharIndex - lastIndex;             outputString += alphabet[shiftedIndex];         }else if(inputCharIndex === lastIndex - 1){             let shiftedIndex = inputCharIndex - lastIndex + 1;             outputString += alphabet[shiftedIndex];         }else{             let shiftedIndex = inputCharIndex + 2;             outputString += alphabet[shiftedIndex];         }     });     return outputString; }
var newString = '';     for(var i = 0; i < s.length; i++){         var newLetter = s.charCodeAt(i) + 4;         if(newLetter > 122){             newLetter = (newLetter - 122) + 96;         }         newString += String.fromCharCode(newLetter);     }     return newString; }
//var s= "hi"; 	var newstr = ''; 	var charcode = 0; 	//console.log(s); 	for(var i=0; i<s.length; i++){ 		charcode = s.charCodeAt(i); 		//console.log(charcode); 		if(charcode == 122){ 			newstr += String.fromCharCode(97); 		} 		else if(charcode == 90){ 			newstr += String.fromCharCode(65); 		} 		else{ 			newstr += String.fromCharCode(charcode+2); 		} 	} 	return newstr; }
var alphabet = ["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"]; 	var result = "" 	for(var i = 0; i < s.length; i++){ 		var index = alphabet.indexOf(s[i]); 		result += alphabet[index+2]; 	} 	return result; }
let alphabet = {         1: 'a', 2: 'b', 3: 'c', 4: 'd', 5: 'e', 6: 'f', 7: 'g', 8: 'h', 9: 'i', 10: 'j', 11: 'k', 12: 'l', 13: 'm', 14: 'n', 15: 'o', 16: 'p', 17: 'q', 18: 'r', 19: 's', 20: 't', 21: 'u', 22: 'v', 23: 'w', 24: 'x', 25: 'y', 26: 'z'     }     let encryptObj = {         a: 3, b: 4, c: 5, d: 6, e: 7, f: 8, g: 9, h: 10, i: 11, j: 12, k: 13, l: 14, m: 15, n: 16, o: 17, p: 18, q: 19, r: 20, s: 21, t: 22, u: 23, v: 24, w: 25, x: 26, y: 1, z: 2     }     let sArr = s.split('');     let encryptArr = [];     sArr.forEach(function(letter){         let value = encryptObj[letter];         encryptArr.push(alphabet[value]);     })     return encryptArr.join(''); }
}
var alpha = "abcdefghijklmnopqrstuvwxyz";   var beta = "cdefghijklmnopqrstuvwxyzab";   var str1 = "";   for(var i = 0; i < s.length; i++){       str1 += beta[alpha.indexOf(s[i])];   }   return str1; }
var eString = "";   for(var i = 0; i < s.length; i++){     eString += String.fromCharCode(s.charCodeAt(i) + 2 * 2);   }   return eString; }
var s2 = '';     for(var i = 0; i < s.length; i++){         if(s[i] === 'x'){             s2 += 'a';         }         else if(s[i] === 'y'){             s2 += 'b';         }         else if(s[i] === 'z'){             s2 += 'c';         }         else{             s2 += String.fromCharCode(s.charCodeAt(i) + 2);         }     }     return s2; }
var alphabet = "abcdefghijklmnopqrstuvwxyz";     var newString = "";     for(var i = 0; i < s.length; i++){         var index = alphabet.indexOf(s[i]);         if(index + 6 < 26){             newString += alphabet[index + 6];         }         else{             newString += alphabet[index + 6 - 26];         }     }     return newString; }
var alphabet = 'abcdefghijklmnopqrstuvwxyz';     var lower = s.toLowerCase();     var length = lower.length;     var newString = '';     for(var i = 0; i < length; i++){         var index = alphabet.indexOf(lower[i]);         if(index < 0){             newString += lower[i];         }         else{             var newIndex = index + 2 * 2;             if(newIndex > 25){                 newIndex = newIndex - 26;             }             newString += alphabet[newIndex];         }     }     return newString; }
let plainAlphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];   let encryptedAlphabet = ['c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','a','b'];   //console.log(plainAlphabet.indexOf('a'));   //console.log(encryptedAlphabet[plainAlphabet.indexOf('a')]);   let encryptedString = '';   for(let i = 0; i < s.length; i++){     encryptedString += encryptedAlphabet[plainAlphabet.indexOf(s[i])];   }   return encryptedString; }
var re = /[aeiou]/gi;     return (s.replace(re, "").length); }
var count = 0;     var string = s.toLowerCase();     for(var i = 0; i < string.length; i++){         if(string[i] == "a" || string[i] == "e" || string[i] == "i" || string[i] == "o" || string[i] == "u"){             count++;         }     }     if(string[string.length - 1] == "y"){         count++;     }     return count; }
vowels=0; 	for(var i=0;i<s.length;i++){ 		if(s[i]=='a'||s[i]=='e'||s[i]=='i'||s[i]=='o'||s[i]=='u'||(s[i]=='y'&&i==s.length-1)){ 			vowels+=1; 		} 	} 	return vowels; }
var num=0;   var vowels=["a","e","i","o","u"];   for(var i=0;i<s.length;i++){     if(vowels.indexOf(s[i].toLowerCase())!=-1){       num++;     }   }   return num; }
var v = ['a', 'e', 'i', 'o', 'u'];     var count = 0;     var last_letter = s[s.length - 1];     if (v.indexOf(last_letter) != -1) {         count += 1;     }     s = s.toLowerCase();     for (var i = 0; i < s.length; i++) {         if (v.indexOf(s[i]) != -1) {             count += 1;         }     }     return count; }
s = s.toLowerCase();     var count = 0;     for(var i = 0; i < s.length; i++){         if(s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u'){             count += 1;         }     }     if(s[s.length - 1] === 'y'){         count += 1;     }     return count; }
if(s[s.length-1]=="y"){         return s.match(/[aeiou]/gi).length;     }else{         return s.match(/[aeiou]/gi).length - 1;     } }
return s.replace(/[^aeiou]/gi, '').length; }
var count = 0;   var vowels = 'aeiouyAEIOUY';   for(var i = 0; i < s.length; i++){     if(vowels.indexOf(s[i]) != -1){       count++;     }   }   return count; }
var c = 0;     var l = s.length;     for(var i = 0; i < l; i++){         if(s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y'){             c++;         }     }     return c; }
var counter = 0;   for(var i = 0; i < s.length; i++){     if(s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y'){       counter += 1;     }   }   return counter; }
var vowels = 'aeiou';     var count = 0;     for(var i = 0; i < s.length; i++){         if(vowels.indexOf(s[i]) !== -1){             count++;         }     }     return count; }
// Your code here 	var vowels = new Set(['a', 'e', 'i', 'o', 'u']); 	var count = 0; 	for (var i = 0; i < s.length; i++) { 		if (vowels.has(s[i])) { 			count++; 		} 	} 	if (s[s.length - 1] == 'y') { 		count++; 	} 	return count; }
}
let word = s.toLowerCase();     let count = 0;     for(let i = 0; i < word.length; i++){         if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u'){             count++;         }     }     return count; }
var vowels = ['a', 'e', 'i', 'o', 'u'];     var count = 0;     for (var i = 0; i < s.length; i++){         if (vowels.indexOf(s[i].toLowerCase()) !== -1){             count++;         }     }     return count; }
var str = s.toLowerCase();    var sum = 0;    var vowel = ["a","e","i","o","u"];    for(var i = 0; i < str.length; i++){       if(vowel.indexOf(str[i]) !== -1){          sum += 1;       }    }    return sum; }
var n = 0; 	for(var i = 0; i < s.length; i++){ 		var c = s.charAt(i); 		if(c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u' || c === 'y'){ 			n++; 		} 	} 	if(s.charAt(s.length - 1) !== 'y'){ 		return n; 	} 	return n - 1; }
var count = 0;     for(var i = 0; i < s.length; i++){         if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] == 'y'){             count++;         }     }     return count; }
let sum = 0;     let product = 1;     for(let i=0; i<numbers.length; i++){         sum += numbers[i];         product *= numbers[i];     }     return [sum, product]; }
let sum = 0;     let product = 1;     for(let i = 0; i < numbers.length; i++){         sum += numbers[i];         product *= numbers[i];     }     return [sum, product]; }
var sum = 0;     var product = 1;     for(var i = 0; i < numbers.length; i++){         sum += numbers[i];         product *= numbers[i];     }     return [sum, product]; }
let sum = 0     let product = 1     for(let number of numbers){         sum += number         product *= number     }     return (sum, product) }
var sum = 0;     var product = 1;     if(numbers.length == 0){         return [sum, product];     }     for(var i = 0; i < numbers.length; i++){         sum += numbers[i];         product *= numbers[i];     }     return [sum, product]; }
var sum = 0, product = 1;     for(i = 0; i < numbers.length; i++){         sum += numbers[i];         product *= numbers[i];     }     return [sum, product]; }
//     let sum=0;     let product=1;     numbers.forEach(function(value){         sum += value;         product *= value;     });     return [sum, product]; }
let sum = 0;     let product = 1;     for(let i = 0; i < numbers.length; i++){         sum += numbers[i];         product *= numbers[i];     }     return [sum, product]; }
var totalSum = 0;     var totalProduct = 1;     for(var i = 0; i < numbers.length; i++){         totalSum += numbers[i];         totalProduct *= numbers[i];     }     return [totalSum, totalProduct]; }
// YOUR CODE HERE }
if(numbers.length === 0){         return [0, 1];     } else{         let sum = 0;         let product = 1;         for(let i = 0; i < numbers.length; i++){             sum += numbers[i];             product *= numbers[i];         }         return [sum, product];     } }
let sum = numbers.reduce((a, b) => a + b, 0);     let product = numbers.reduce((a, b) => a * b, 1);     return [sum, product]; }
//You can write your code here!     return (numbers.reduce((sum, val) => sum + val, 0), numbers.reduce((sum, val) => sum * val, 1)); }
var sum = 0;   var product = 1;   if (numbers.length == 0){     return [sum, product];   } else {     for (var i = 0; i < numbers.length; i++){       sum += numbers[i];       product *= numbers[i];     }     return [sum, product];   } }
var sum=0;     var product=1;     if(numbers.length==0){         console.log("empty sum is : "+sum);         console.log("empty product is : "+product);     }     else{         for(var i=0;i<numbers.length;i++){             sum=sum+numbers[i];             product=product*numbers[i];         }         console.log("sum is : "+sum);         console.log("product is : "+product);     } } sum_product([1,2,3,4]); sum_product([]);
var sum = 0;   var product = 1;   for(var i = 0; i < numbers.length; i++){     sum += numbers[i];     product *= numbers[i];   }   var sum_product = [sum, product];   return sum_product; }
let sum = 0; 	let product = 1; 	if(numbers.length == 0){ 		return [sum, product]; 	} 	for(let i = 0; i < numbers.length; i++){ 		sum += numbers[i]; 		product *= numbers[i]; 	} 	return [sum, product]; }
let result = 0; 	for(let i = 0; i < n; i++){ 		let currentDigit = i; 		if(currentDigit % 11 === 0 || currentDigit % 13 === 0){ 			if(currentDigit === 7){ 				result++; 			} 			while(currentDigit > 0){ 				if(currentDigit % 10 === 7){ 					result++; 				} 				currentDigit = (currentDigit - currentDigit % 10) / 10; 			} 		} 	} 	return result; }
var count = 0; 	for(var i = 0; i < n; i++){ 		if(i % 11 == 0 || i % 13 == 0){ 			count += i.toString().split("").filter(function(a){return a == 7}).length; 		} 	} 	return count; }
var count = 0;     for(var i = 1; i < n; i++){         if(i % 11 == 0 || i % 13 == 0){             var temp = i;             while(temp > 0){                 var digit = temp % 10;                 if(digit == 7){                     count++;                 }                 temp = Math.floor(temp / 10);             }         }     }     return count; }
var count = 0;     for(var i = 1; i < n; i++){         if(i % 11 == 0 || i % 13 == 0){             var num = i.toString();             for(var j = 0; j < num.length; j++){                 if(num[j] == '7'){                     count++;                 }             }         }     }     return count; }
var count = 0;     for(var i = 1; i < n; i++){         if(i % 11 == 0 || i % 13 == 0){             var str = String(i);             for(var j = 0; j < str.length; j++){                 if(str[j] == '7'){                     count += 1;                 }             }         }     }     return count; }
if(n < 7) return 0;     let sum = 0;     for(let i = 7; i < n; i += 11){         if(i % 13 === 0) {             sum += 1;             continue;         }         let s = i.toString();         for(let j = 0; j < s.length; j++){             if(s[j] === '7') sum += 1;         }     }     return sum; }
var count = 0; 	 	for(var i = 0; i < n; i++) { 		var str = i.toString(); 		if(str.indexOf('7') !== -1) { 			if(i % 11 === 0 || i % 13 === 0) { 				count++; 			} 		} 	} 	return count; }
var count = 0;   for(var i = 0; i < n; i++){     if(i % 11 === 0 || i % 13 === 0){       var number = i.toString();       for(var j = 0; j < number.length; j++){         if(number[j] === "7"){           count += 1;         }       }     }   }   return count; }
var count = 0;     var i = 0;     while(i<n){         if(i%11 == 0 && i%13 == 0){             var tempString = i.toString();             for(var j = 0; j<tempString.length; j++){                 if(tempString[j] == 7){                     count++;                 }             }         }         i++;     }     return count; }
var count = 0;   for(var i = 1; i < n; i++){     if((i % 11 == 0 || i % 13 == 0) && i.toString().includes("7")){       count += 1;     }   }   return count; }
var count = 0;     for(i=1; i<n; i++){         if(i%11==0 || i%13==0){             if(i.toString().includes('7'))                 count += 1;         }     }     return count; }
function check_divis(n){ 		return n % 11 == 0 || n % 13 == 0; 	} 	function check_7(n){ 		var number = n.toString(); 		var count = 0; 		for(var i = 0; i < number.length; i++){ 			if(number[i] == '7'){ 				count += 1; 			} 		} 		return count; 	} 	var sum = 0; 	for(var i = 0; i < n; i++){ 		if(check_divis(i)){ 			sum += check_7(i); 		} 	} 	return sum; }
var count = 0; 	for(var i = 0; i < n; i++){ 		if(i % 11 == 0 || i % 13 == 0){ 			var num = i.toString(); 			for(var j = 0; j < num.length; j++){ 				if(num[j] == 7){ 					count++; 				} 			} 		} 	} 	return count; }
var count = 0;     var sum = 0;     for(var i = 0; i < n; i++){         if((i % 11 == 0 || i % 13 == 0) && i.toString().search("7") != -1){             count++;             sum += i;         }     }     return count; }
let sum = 0;     for(let i = 0; i < n; i++){         if((i % 11 == 0 || i % 13 == 0) && (i % 7 != 0)){             sum += Math.trunc(i / 10);         }     }     return sum; }
var i, s; 	for(i = 0, s = 0; i < n; i++){ 		if(i % 11 == 0 || i % 13 == 0){ 			s += i.toString().split("").reduce(function(x, y){ 				return (y == 7) ? x + 1 : x; 			}, 0); 		} 	} 	return s; }
var count = 0;   for(var i = 1; i < n; i++){     if((i % 11 === 0 || i % 13 === 0) && i.toString().indexOf('7') != -1){       count++;     }   }   return count; }
let count = 0;     for(let i = 0; i < n; i++){         if((i % 11 == 0 || i % 13 == 0) && i.toString().indexOf('7') > -1){             count++;         }     }     return count; }
// good luck! }
var result = "";     for(var i = 0; i < a.length; i++){         if(a[i] === b[i]){             result += '0';         }else{             result += '1';         }     }     return result; }
var result = '';   a = a.split('');   b = b.split('');   for(var i = 0; i < a.length; i++){     if (a[i] === b[i]){       result += '0';     } else {       result += '1';     }   }   return result; }
return (a.split('').map(function(item, index){     return Number(item) !== Number(b[index]) ? '1' : '0';   })).join(''); }
var key = 0;     var string = "";     for(var i = 0; i < a.length; i++){         key = key + parseInt(a[i]) + parseInt(b[i]);         if(key == 0 || key == 1){             string = string + key;             key = 0;         }         else{             string = string + "0";             key = 1;         }     }     return string; }
var xored = '';   for (var i = 0; i < a.length; i++) {     if (a[i] == b[i]) {       xored += '0';     } else {       xored += '1';     }   }   return xored; }
return (BigInt(a, 2) ^ BigInt(b, 2)).toString(2) }
let result = "";   for (let i = 0; i < a.length; i++) {     result += a[i] ^ b[i];   }   return result; }
// init variables 	var i = a.length; 	var result = ''; 	// walk thru input strings 	while(i--){ 		// XOR logic 		result = (a[i] != b[i]) ? '1' + result : '0' + result; 	} 	return result; }
// XOR     var result = '',         i = a.length,         j = b.length;      for(var l=0; l<i || l<j; l++){         if(a[l] === b[l]){             result += '0';         } else {             result += '1';         }     }      return result; }
a = a.split('');     b = b.split('');     var output = [];     for(var i = 0; i < a.length; i++){         if(a[i] === b[i]){             output.push('0');         } else{             output.push('1');         }     }     return output.join(''); }
var res = "";     for(var i = 0; i < a.length; i++){         if(a[i] === b[i]){             res += '0';         }else{             res += '1';         }     }     return res; }
}
if(a.length != b.length){     return "Not the same length";   }   var newString = '';   for(var i = 0; i < a.length; i++){     if(a[i] == b[i]){       newString += '0';     }     else{       newString += '1';     }   }   return newString; }
var result = "";   for(var i = 0; i < a.length; i++){     result += (a[i] === b[i]) ? "0" : "1";   }   return result; }
let res = "";   for (let i = 0; i < a.length; i++) {     if (a[i] === b[i]) {       res += '0';     } else {       res += '1';     }   }   return res; }
var result = '';     for(var i = 0; i < a.length; i++){         if(a[i] == b[i]){             result += '0';         }else{             result += '1';         }     }     return result; }
var res = '';   for (var i = 0; i < a.length; i++) {     if (a[i] == b[i]) {       res += '0';     } else {       res += '1';     }   }   return res; }
// let res = '';   // for (let i = 0; i < a.length; i++){   //   if (a[i] === b[i]){   //     res += '0';   //   } else {   //     res += '1';   //   }   // }   // return res;   return a.split('').map((letter, i) => letter == b[i] ? '0' : '1').join(''); }
var xor = [];     if(a.length === b.length){         for(var i = 0; i < a.length; i++){             var aBool = parseInt(a[i]);             var bBool = parseInt(b[i]);             xor.push(aBool ^ bBool);         }     }     return xor.join(''); }
const factors = []   for (var i = 2; i <= n; i++) {     while (n % i === 0) {       factors.push(i)       n /= i     }   }   return factors } factorize(56)
var result = [];     var d = 2;     while (n > 1) {         while (n % d == 0) {             result.push(d);             n /= d;         }         d = d + 1;         if (d*d > n) {             if (n > 1) result.push(n);             break;         }     }     return result; }
var factorization = [];   var primeFactors = [];   var remaining = n;   for (var i = 2; i <= n; i++) {     while (remaining % i === 0) {       primeFactors.push(i);       remaining = remaining / i;     }   }   for (var j = 0; j < primeFactors.length; j++) {     factorization.push(primeFactors[j]);   }   return factorization; }
var l = [];     if (n <= 1) {         return l;     }     var i = 2;     while (n > 1) {         if (n % i == 0) {             l.push(i);             n = n / i;         } else {             i = i + 1;         }     }     return l; }
let result = [];     for (let i = 2; i <= n; i++) {         while (n % i === 0) {             result.push(i);             n /= i;         }     }     return result; }
var factors = [];     for (var i = 2; i <= n; i++) {         while ((n % i) === 0) {             factors.push(i);             n /= i;         }     }     return factors; }
var factors=[];     for(var i=2; i<=n; i++){         if(n%i==0){             factors.push(i);             n=n/i;             i=1;         }     }     return factors; }
let primeFactors = [];     let i = 2;     while (n > 1) {         if (n % i === 0) {             primeFactors.push(i);             n = n / i;         } else {             i++;         }     }     return primeFactors; }
var result = [];     if (n % 2 == 0) {         for (var i = 0; i < n / 2; i++) {             result.push(2);         }     }     for (var i = 3; i < n; i+=2) {         if (n % i == 0) {             for (var j = 0; j < n / i; j++) {                 result.push(i);             }         }     }     return result; }
var factors = [],         divisor = 2;      while(n>2){         if(n % divisor == 0){             factors.push(divisor);             n= n/ divisor;         }         else{             divisor++;         }     }     return factors; }
var factors = [], i;     for (i = 2; i <= n; i++) {         while ((n % i) === 0) {             factors.push(i);             n /= i;         }     }     return factors; }
let result = [];     let i = 2;     while (n > 1){         if (n % i === 0){             result.push(i);             n = n / i;         }         else{             i = i + 1;         }     }     return result; }
var res = [];     while(n % 2 === 0){         res.push(2);         n /= 2;     }     for(var i = 3; i <= Math.sqrt(n); i += 2){         while(n % i === 0){             res.push(i);             n /= i;         }     }     if(n > 2){         res.push(n);     }     return res; }
var factors = [];     var divisor = 2;     while (n > 2){         if (n % divisor == 0){             factors.push(divisor);             n = n / divisor;         } else {             divisor++;         }     }     return factors; }
for (var arr = [], i = 2; i <= n; i++) {     while ((n % i) === 0) {       arr.push(i);       n /= i;     }   }   return arr; }
var res = [];     var factor = 2;     while (n != 1){         if (n % factor == 0){             res.push(factor);             n = n / factor;         }         else{             factor++;         }     }     return res; }
var factors = [];     for (var i = 2; i <= n; i++) {         while ((n % i) === 0) {             factors.push(i);             n /= i;         }     }     return factors; }
let result = [];     for (let i = 2; i <= n; i++) {         while (n % i === 0) {             result.push(i);             n /= i;         }     }     return result; }
let sum = 0;     for(let i = 0; i < operations.length; i++){         sum += operations[i];         if(sum < 0){             return true;         }     }     return false; }
return operations.some(op => op < 0); }
let balance = 0;     for(let i=0; i<operations.length; i++){         if(operations[i] > 0){             balance += operations[i];         }         else if(operations[i] < 0){             balance -= Math.abs(operations[i]);         }         if(balance < 0){             return true;         }     }     return false; }
var balance = 0;     for(var i = 0; i < operations.length; i++){         balance += operations[i];         if(balance < 0){             return true;         }     }     return false; }
var account_balance = 0;     for (var i = 0; i < operations.length; i++){         account_balance += operations[i];         if (account_balance < 0){             return true;         }     }     return false; }
for(let i = 0; i < operations.length; i++){         if(operations[i] < 0){             return true;         }     }     return false; }
var bal = 0;     for(var i = 0; i < operations.length; i++){         bal += operations[i];         if(bal < 0){             return true;         }     }     return false; }
var balance = 0;   for (var i = 0; i < operations.length; i++) {     balance += operations[i];     if (balance < 0) {       return true;     }   }   return false; }
var sum = 0;   for (var i = 0; i < operations.length; i++) {     sum += operations[i];     if (sum < 0) {       return true;     }   }   return false; }
let balance = 0;     for(let i = 0; i < operations.length; i++){         if(operations[i] > 0){             balance += operations[i];         }         else if(operations[i] < 0){             balance -= operations[i];         }         if(balance < 0){             return true;         }     }     return false; }
var balance = 0;     for(i=0; i<operations.length; i++){         balance += operations[i];         if(balance < 0){             return true;         }     }     return false; }
var balance = 0;     for(var x = 0; x < operations.length; x++){         if(operations[x] > 0){             balance += operations[x];         }else{             balance -= operations[x];         }         if(balance < 0){             return true;         }     }     return false; }
let balance = 0;     for(let i = 0; i < operations.length; i++){         balance += operations[i];         if(balance < 0){             return true;         }     }     return false; }
let balance = 0;   for (let i = 0; i < operations.length; i++){     if (operations[i] < 0){       balance = balance + operations[i];       if (balance < 0){         return true;       }     }     else {       balance = balance + operations[i];     }   }   return false; }
for (var i = 0; i < operations.length; i++) {     if (operations[i] < 0) {       return true;     }   }   return false; }
}
let total = 0;     for(let i=0; i<operations.length; i++){         if(operations[i] < 0){             total -= operations[i];         } else {             total += operations[i];         }         if(total < 0){             return true;         }     }     return false; }
var below = false; 	var balance = 0; 	for(i=0; i<operations.length; i++){ 		balance = balance + operations[i]; 		if(balance < 0){ 			below = true; 		} 	} 	return below; }
let result = 0; 	for(let i = 0; i < operations.length; i++){ 		result += operations[i]; 		if(result < 0){ 			return true; 		} 	} 	return false; }
let sum = 0;     let first = q[0];     let second = q[q.length-1];     for(let i = 0; i < q.length; i++){         sum += q[i];     }     return sum <= w && first === second; }
if(q.length == 1){         return true;     }     if(sum(q) > w){         return false;     }     else{         return checkPalindrome(q);     } }
let sum = 0;     let b = true;     for(let i = 0; i < q.length; i++){         sum += q[i];         if(q[i] !== q[q.length - 1 - i]){             b = false;         }     }     return b && sum <= w; }
let palindrome = q.slice(0, Math.floor(q.length/2)).join("") === q.slice(Math.ceil(q.length/2)).reverse().join(""); 	let totalWeight = q.reduce((acc, curr) => acc + curr); 	return palindrome && totalWeight <= w; }
if(q.length === 1){         return true;     }     let sum = 0;     let i = 0;     while(i < q.length){         sum += q[i];         i++;     }     if(sum <= w){         return true;     }else{         return false;     } }
}
if(isPalindrome(q) && getSum(q)<=w){         return true;     }     return false; }
if(q.length === 1) return true;     if(q.length === 2 && q[0] === q[1]) return true;     if(q.length % 2 === 0) return false;     if(sum(q) > w) return false;     let i = 0;     let j = q.length - 1;     while(i < j){         if(q[i] !== q[j]) return false;         i++;         j--;     }     return true; }
let palindrome = isPalindrome(q);     let tot = 0;     for(i=0; i<q.length; i++){         tot += q[i];     }     if(palindrome === true && tot <= w){         return true;     }     else{         return false;     } }
const sumOf = q.reduce((a,b) => a + b, 0);     if(w < sumOf){         return false;     }else if(q.join('') == q.reverse().join('')){         return true;     }else{         return false;     } }
let sum = 0;     for(let i = 0; i < q.length; i++){         sum = sum + q[i];     }     let arr = q.toString().split(',').join('');     let rev = q.toString().split(',').reverse().join('');     if(sum <= w && arr === rev){         return true;     }     else{         return false;     } }
var sum = 0;     var n = q.length;     for(var i = 0; i < n; i++){         sum += q[i];     }     if(sum <= w){         var c = 0;         for(var i = 0; i < n; i++){             if(q[i] == q[n-i-1]){                 c++;             }         }         if(c == n){             return true;         }         else{             return false;         }     }     else{         return false;     } }
let sum = 0;     for(let i = 0; i < q.length; i++){         sum += q[i];     }     let qStr = "";     let rStr = "";     for(let i = 0; i < q.length; i++){         qStr += q[i].toString();         rStr += q[q.length - i - 1].toString();     }     if(sum <= w && qStr === rStr){         return true;     }     return false; }
let sum = q.reduce((a,b) => a + b, 0);     return sum <= w && q.join("") === q.reverse().join(""); }
for(let i = 0; i<q.length/2; i++){         if(q[i] !== q[q.length-1-i]){             return false;         }     }     if(q.reduce((a,b)=>a+b)<=w){         return true;     }else{         return false;     } }
if(q.length % 2 === 0) {     var first = q.slice(0, q.length/2);     var second = q.slice(q.length/2);     second.reverse();     if(first.toString() !== second.toString()) {       return false;     }   }   var sum = 0;   for(var i = 0; i < q.length; i++) {     sum += q[i];   }   if(sum <= w) {     return true;   } else {     return false;   } }
let sum = 0;     let balanced = true;     for(let i = 0; i < q.length; i++){         sum += q[i];         if(q[i] !== q[q.length -1 -i]){             balanced = false;         }     }     if(sum <= w && balanced){         return true;     }     return false; }
if (q.length === 1){         return true;     }     let sum = 0;     for (let i = 0; i < q.length; i++){         sum += q[i];     }     if (sum > w){         return false;     }     let reverse = q.reverse();     let newSum = 0;     for (let i = 0; i < reverse.length; i++){         newSum += reverse[i];     }     if (newSum === sum){         return true;     }     return false; }
if(q.length > 1){         if(q[0] == q[q.length-1]){             q.pop();             q.shift();             will_it_fly(q, w);         }         else {             return false;         }     }     else {         if(w >= q[0]){             return true;         }         else {             return false;         }     } }
let upperArray = s.split('').filter(element => element.toUpperCase() === element)     let upperCodes = upperArray.map(element => element.charCodeAt(0))     let sum = upperCodes.reduce((acc,element) => acc + element)     return sum }
if(s == ""){         return 0;     }     var sum = 0;     for(var i = 0; i < s.length; i++){         if(s[i] == s[i].toUpperCase()){             sum += s.charCodeAt(i);         }     }     return sum; }
let total = 0;   for (let i = 0; i < s.length; i++) {     if (s[i] >= 'A' && s[i] <= 'Z') {       total += s.charCodeAt(i);     }   }   return total; }
//your code here. } module.exports = digitSum
let result = 0;     for (let i = 0; i < s.length; i++) {         let asc = s.charCodeAt(i);         if (asc > 64 && asc < 91) {             result += asc;         }     }     return result; }
return s.split('').reduce((acc, char) => char.toUpperCase() === char ? acc + char.charCodeAt(0) : acc, 0) }
// code code code     let res = [];     let sum = 0;     let code = [];     res = s.split('');     for(let i = 0; i < res.length; i++){         if(res[i] === res[i].toUpperCase()){             code.push(res[i].charCodeAt());         }     }     for(let i = 0; i < code.length; i++){         sum += code[i];     }     return sum; }
if (s === '') return 0;   s = s.toUpperCase();   return s.split('').reduce((acc, curr) => {     const num = curr.charCodeAt(0);     if (num >= 65 && num <= 90) {       return acc + num;     }     return acc;   }, 0); }
let sum = 0;     for (let i = 0; i < s.length; i++) {         if (s[i] === s[i].toUpperCase()) {             sum += s.charCodeAt(i);         }     }     return sum; }
let alpha = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';   let sum = 0;   for(let i = 0; i < s.length; i++){     if(alpha.includes(s[i])) sum += s.charCodeAt(i);   }   return sum; }
return s.split('').reduce((sum, ch) => sum + (ch >= 'A' && ch <= 'Z' ? ch.charCodeAt(0) : 0), 0); }
var sum = 0;     for(var i = 0; i < s.length; i++){         if(s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90){             sum += s.charCodeAt(i);         }     }     return sum; }
var sum = 0;   for (var i = 0; i < s.length; i++) {     if(s[i] == s[i].toUpperCase()){       sum += s.charCodeAt(i);     }   }   return sum; }
let array = s.split('');     let sum = 0;     for(let i = 0; i < array.length; i++){         if(array[i] === array[i].toUpperCase()){             sum += array[i].charCodeAt(0);         }     }     return sum; }
const str = s.toUpperCase().split('');   let sum = 0;   for (let i = 0; i < str.length; i++) {     sum += str[i].charCodeAt();   }   return sum; }
let sum = 0;   for (let i = 0; i < s.length; i++) {     if (s[i] === s[i].toUpperCase()) {       sum += s.charCodeAt(i);     }   }   return sum; }
return s.split('').reduce((acc,val)=>{     if(val.charCodeAt(0)>=65 && val.charCodeAt(0)<=90){       acc += val.charCodeAt(0)     }     return acc   },0) }
var sum = 0;   for (var i = 0; i < s.length; i++) {     if (s[i] == s[i].toUpperCase()) {       sum += s.charCodeAt(i);     }   }   return sum; }
let sum = 0;     s.split('').map(x => x.charCodeAt(0) >= 65 && x.charCodeAt(0) <= 90 ? sum += x.charCodeAt(0) : 0)     return sum; }
var sum = 0;   var sign = 1;   if (arr.length == 0){     return null;   }   for (var i = 0; i < arr.length; i++){     if (arr[i] > 0){       sum += arr[i];     } else if (arr[i] < 0){       sum += Math.abs(arr[i]);       sign *= -1;     } else {       sign = 0;     }   }   return sum * sign; }
var val = 0     for(var i = 0; i < arr.length; i++){         val += Math.abs(arr[i])     }     for(var i = 0; i < arr.length; i++){         if(arr[i] == 0){             return 0         }         if(arr[i] < 0){             val = val * -1         }     }     return val }
if(arr.length == 0){         return null;     }     var sum = 0;     var product = 1;     for(var i = 0; i < arr.length; i++){         sum += Math.abs(arr[i]);         product *= Math.sign(arr[i]);     }     return sum * product; }
if (arr.length === 0) {     return;   }    var signs = 1;   var sum = 0;   for (var i = 0; i < arr.length; i++) {     if (arr[i] < 0) {       signs *= -1;     } else if (arr[i] > 0) {       signs *= 1;     } else {       signs *= 0;     }     sum += Math.abs(arr[i]);   }   return sum * signs; }
if(arr.length==0){         return null;     }     var sum=0;     var prod=1;     for(var i=0;i<arr.length;i++){         if(arr[i]<0){             prod*=-1;         }else if(arr[i]>0){             prod*=1;         }else{             prod*=0;         }         sum+=Math.abs(arr[i]);     }     return sum*prod; }
if(arr.length < 1){         return null;     }     var sum = arr.reduce(function(a, b){         return Math.abs(a) + Math.abs(b);     });     var signs = 1;     for(var i = 0; i < arr.length; i++){         if(arr[i] < 0){             signs *= -1;         }         else if(arr[i] == 0){             signs = 0;         }     }     return sum * signs; }
}
if (arr.length == 0) {         return null;     } else {         let sum = 0;         let sign = 1;         for (let i = 0; i < arr.length; i++) {             sum += Math.abs(arr[i]);             sign *= Math.sign(arr[i]);         }         return sum * sign;     } }
if(arr.length == 0){         return null;     }     else {         let sum = 0;         let prod = 1;         for (let i = 0; i < arr.length; i++) {             if (arr[i] > 0) {                 sum += arr[i];                 prod *= 1;             }             else if (arr[i] < 0) {                 sum += Math.abs(arr[i]);                 prod *= -1;             }             else {                 prod *= 0;             }         }         return sum * prod;     } }
let sum = 0;   let prod = 1;   if(arr.length !== 0){     for(let i = 0; i < arr.length; i++){       if(arr[i] > 0){         sum += arr[i];         prod *= 1;       }       else if(arr[i] < 0){         sum += Math.abs(arr[i]);         prod *= -1;       }       else{         sum += 0;         prod *= 0;       }     }     return sum * prod;   }   else{     return null;   } }
if (arr.length === 0) {     return null;   }   let sum = 0;   let product = 1;   for (let i = 0; i < arr.length; i++) {     const val = arr[i];     sum += Math.abs(val);     product *= Math.sign(val);   }   return sum * product; }
let magnitudes = [];     let signs = [];     for(let n of arr){         magnitudes.push(Math.abs(n));         if(n === 0){             signs.push(0);         } else if(n < 0){             signs.push(-1);         } else {             signs.push(1);         }     }     if(magnitudes.length === 0){         return null;     }     const sum = magnitudes.reduce((a, b) => a + b);     const product = signs.reduce((a, b) => a * b);     return sum * product; }
if(arr.length === 0){         return null;     }     var product = 1;     var sum = 0;     for(var i = 0; i < arr.length; i++){         var currentElement = arr[i];         if(currentElement > 0){             sum += currentElement;             product *= 1;         }else if(currentElement < 0){             sum += currentElement * -1;             product *= -1;         }else{             product *= 0;         }     }     return sum * product; } var result = prod_signs([1, 2, 2, -4]);
let prod = 1;     let sum = 0;     if (arr.length > 0){         for (let i = 0; i < arr.length; i++){             if (arr[i] > 0){                 prod *= 1;                 sum += arr[i];             } else if (arr[i] < 0){                 prod *= -1;                 sum += Math.abs(arr[i]);             } else if (arr[i] == 0){                 prod *= 0;             }         }         return prod * sum;     } else {         return null;     } }
var result = 1;     var sum=0;     if(arr.length == 0){         return null;     }     else{         for(var i=0; i<arr.length; i++){             if(arr[i]>0){                 sum += arr[i];                 result *= 1;             }             else if(arr[i]<0){                 sum += arr[i];                 result *= -1;             }             else if(arr[i]==0){                 result *= 0;             }         }         return result*sum;     } }
let sum = 0;     let prod = 1;     for (let i = 0; i < arr.length; i++){         if (arr[i] !== 0){             if (arr[i] > 0){                 sum += arr[i];                 prod *= 1;             } else {                 sum += Math.abs(arr[i]);                 prod *= -1;             }         }     }     return sum * prod; }
if (arr.length === 0) {     return null;   }   var sign = 1;   var sum = 0;   for (var i = 0; i < arr.length; i++) {     var absVal = Math.abs(arr[i]);     if (arr[i] < 0) {       sign *= -1;     } else if (arr[i] === 0) {       sign = 0;     }     sum += absVal;   }   return sum * sign; }
return arr.length ? eval(arr.map(v => v ? (Math.abs(v) + v)/v : 0).join('*')) : null; }
let prod = 1;     let sum = 0;     for(let i = 0; i < arr.length; i++){         sum += Math.abs(arr[i]);         if(arr[i] !== 0){             prod *= arr[i]/Math.abs(arr[i]);         }     }     return arr.length === 0 ? null : sum * prod; }
let level = 1;     let current_n = n;     let result = [];     while(n > 0){         result.push(current_n);         if(current_n % 2 === 0){             current_n += 2;         } else {             current_n += 1;         }         n--;     }     return result; }
var arr = [n];   var s = 0;   while(n >= 3){     if(n % 2 == 0){       s = n + 2;     }     else{       s = n + 1;     }     arr.push(s);     n = s;   }   return arr; }
var level = 1;     var stones = [];     stones.push(n);     while(level<n){         if(stones[level-1]%2==0){             stones.push(stones[level-1]+2);         }         else{             stones.push(stones[level-1]+1);         }         level++;     }     return stones; }
let result = [];     while(n>0){         result.push(n);         if(n%2===0){             n = n-1;         }else{             n = n-2;         }     }     return result; }
// Your code here     var result = [];     var count = n;     for(var i = 0; i < n; i++){         if(count % 2 == 0){             result.push(count)             count = count + 2;         }else{             result.push(count)             count = count + 1;         }     }     return result; }
var stones = [];   for (var i = 0; i < n; i++) {     var levels = [i + 1];     stones.push(levels);   }   return stones; }
if(n===1){         return [1];     }     if(n%2===0){         return [n].concat(make_a_pile(n+1));     }     return [n].concat(make_a_pile(n+2)); }
var listOfLevels = [];     for (var i = 0; i < n; i++){         if (i == 0){             listOfLevels.push(n);         }         else if (i % 2 == 0){             listOfLevels.push(listOfLevels[i-1] + 2);         }         else{             listOfLevels.push(listOfLevels[i-1] + 1);         }     }     return listOfLevels; }
var arr = [];   arr.push(n);   for(var i = 1; i <= n; i++){     if(n % 2 === 0){       arr.push(n + i);     } else {       arr.push(n + i + 1);     }   }   return arr; }
const result = [n];   for (let i = 0; i < n - 1; i++) {     result.push(result[i] % 2 ? result[i] + 2 : result[i] + 1);   }   return result; }
if(n<1)         return [];     let pile = [n];     while(pile[pile.length-1]>0){         let last = pile[pile.length-1];         if(last%2===0)             pile.push(last-1);         else             pile.push(last-2);     }     return pile.slice(0,pile.length-1); }
const arr = [n];   while(arr[arr.length-1] > 0){     if(arr[arr.length-1] % 2 === 0){       arr.push(arr[arr.length-1] - 1);     } else {       arr.push(arr[arr.length-1] - 2);     }   }   return arr.slice(0, arr.length-1); }
var result = [n];   for(var i = 1; i < n; i++){     if(n % 2 == 0){       n += 2;     }     else{       n += 1;     }     result.push(n);   }   return result; }
const stones = [n];   while (stones[stones.length - 1] !== 1) {     if (stones[stones.length - 1] % 2 === 0) {       stones.push(stones[stones.length - 1] - 1);     } else {       stones.push(stones[stones.length - 1] - 2);     }   }   return stones; }
let arr = [n];     for(let i = 1; i < n; i++){         if(arr[i-1] % 2 === 0){             arr.push(arr[i-1] + 2);         }else{             arr.push(arr[i-1] + 1);         }     }     return arr; }
//Fill this in.     let ret = [];     for(let i = 0; i < n; i++){         if(n % 2 === 0){             ret.push(n+1);         }         else{             ret.push(n);         }         n--;     }     return ret; }
let i=1;     let arr=[];     while(i<=n){         if(i%2==0){             arr.push(i+1);         }         else if(i%2!=0){             arr.push(i+2);         }         i++;     }     console.log(arr); } make_a_pile(3);
let arr = [n]     while(n > 0){         n = next(n)         arr.push(n)     }     return arr.slice(0, arr.length - 1) }
let arr = [n];     for(let i = 1; i < n; i++){         if(arr[i-1] % 2 == 0){             arr.push(arr[i-1] + 2);         }         else{             arr.push(arr[i-1] + 1);         }     }     return arr; }
let binString = N.toString(2);     let splitString = binString.split('');     let sumDigits = 0;     for(let i = 0; i < splitString.length; i++){         sumDigits += parseInt(splitString[i]);     }     return sumDigits; }
return (N.toString(2).match(/1/g)||[]).length }
return N.toString(2).split('').reduce((acc, curr) => parseInt(acc) + parseInt(curr), 0); }  module.exports = { solve };
return N.toString(2).split('').reduce((a,b)=>+a+ +b) }
var sum = 0;   var result = [];   while(N>0){     result.push(N%2);     N = Math.floor(N/2);   }   for(var i = 0; i < result.length; i++){     sum += result[i];   }   return sum; }
var binary = (N >>> 0).toString(2);   var result = 0;   for (var i = 0; i < binary.length; i++) {     result += parseInt(binary[i]);   }   return result; }
// write your code here }
let result = 0;     for(let i = N; i > 0; i = Math.floor(i/2)){         result += i % 2;     }     return result; }
return N.toString(2).split('').reduce((acc, curr) => acc + Number(curr), 0); }
//your code here     var arr = [];     var total = 0;     for(var i = 0; i < N; i++){         var binary = (i).toString(2);         for(var j = 0; j < binary.length; j++){             total += parseInt(binary[j]);         }     }     return total; } solve(1000);
var obj = {}   var count = 0   var binary = []   var sum = 0   while(N != 0){     if(N % 2 === 0){       binary.push(0)     }else{       binary.push(1)     }     N = Math.floor(N / 2)   }   var result = binary.reverse().join('')   for(var i = 0; i < result.length; i++){     if(result[i] === '1'){       sum++     }   }   return sum }
var bin = N.toString(2);     var sum = 0;     for(var i = 0; i < bin.length; i++){         sum += +bin[i];     }     return sum; }
//write your code here     return (N >>> 0).toString(2).split('').reduce((a,b) => +a + +b); }
return N.toString(2).split('').reduce((p,c)=>p+parseInt(c),0) } solve(1000) solve(150) solve(147)
// this is  a binary problem.    var sum = 0;    var arr = [];    while(N){       if(N%2){          sum++;       }       arr.push(N%2);       N = Math.floor(N/2);    }    return sum; }
let result = 0;   let str = '';   let rem = 0;   while(N>0){     rem = Math.floor(N%2);     str += rem;     result += rem;     N = Math.floor(N/2);   }   console.log(result);   return str.split('').reverse().join(''); }
let x = Number(N).toString(2);     let arr = x.split('');     let sum = 0;     for(let i = 0; i < arr.length; i++){         sum += Number(arr[i]);     }     return sum; }
// let result = 0;     // for(let i = 0; i < N.length; i++){     //     result += N[i];     // }     // return result;     return N.toString(2); }
let sum = 0; 	let bin = N.toString(2); 	for(let i = 0; i < bin.length; i++){ 		sum += parseInt(bin[i],10); 	} 	return sum; }
return (n+'').split('').reduce((a,b)=>(b%2===1)?a*+b:a,1); }
var num = n.toString().split('');   var result = 0;   for (var i = 0; i < num.length; i++) {     if (num[i] % 2 != 0) {       result += parseInt(num[i]);     }   }   return result; }
if(n == 0) {         return 0;     }     return Math.abs(n) % 10 % 2 ? Math.abs(n) % 10 * digits(Math.floor(n / 10)) : digits(Math.floor(n / 10)); }
var product = 1;     var num = n.toString().split('');     for(var i = 0; i < num.length; i++){         if(num[i] % 2 !== 0){             product *= parseInt(num[i]);         }     }     return product; }
let prod = 1;     while (n > 0) {         if (n % 2 !== 0) prod *= n % 10;         n = Math.floor(n / 10);     }     return prod; }
var str = n.toString();   var arr = str.split('');   var total = 1;   for (var i = 0; i < arr.length; i++) {     if (arr[i] % 2 !== 0) {       total *= arr[i];     }   }   return total; }
let x = n.toString().split('');   let result = 1;   for (let i = 0; i < x.length; i++) {     if (x[i] % 2 !== 0) {       result *= x[i];     }   }   return result; }  module.exports = digits;
let sum = 1;     let check = n.toString();     for (let i = 0; i < check.length; i++) {         if (check[i] % 2 !== 0) {             sum *= parseInt(check[i]);         }     }     return sum === 1 ? 0 : sum; }
var num = n.toString();     var result = 1;     for (var i = 0; i < num.length; i++) {         if (num[i] % 2 === 1) {             result *= parseInt(num[i]);         }     }     return result; }
let prod = 1;   n = n.toString().split('');   for (let i = 0; i < n.length; i++) {     if (n[i] % 2 === 1) {       prod *= n[i];     }   }   return prod === 1 ? 0 : prod; }
let sum = 1;     n = n.toString().split('');     if(n.length === 1){         return n[0] % 2 !== 0 ? n[0] : 0;     }     for(let i = 0; i < n.length; i++){         if(n[i] % 2 !== 0){             sum *= n[i];         }     }     return sum; }
let mult = 1;     n = n.toString().split('');     for (let i = 0; i < n.length; i++) {         if (n[i] % 2 === 1) {             mult *= n[i];         }     }     return mult; }
var arr = n.toString().split('').map(Number);    var n = 1;    for (var i = 0; i < arr.length; i++) {      if (arr[i] % 2 === 1) {      n *= arr[i];      }    }    return n; }
let arr = n.toString().split('')   let ans = arr.filter(el => el % 2 !== 0)   return ans.length === 0 ? 0 : ans.reduce((a, b) => a * b) }
let arrayOfNumbers = n.toString().split('').map(n => parseInt(n));   let productOfOdd = arrayOfNumbers.filter(n => n % 2 !== 0).reduce((a, b) => a * b, 1);   return productOfOdd; }  digits(12345);
let numToStr = n.toString();     let result = 1;     for (let i = 0; i < numToStr.length; i++) {         let currentNum = Number(numToStr[i]);         if (currentNum % 2 !== 0) {             result *= currentNum;         }     }     return result; }
//write your code here }
const arr = n.toString().split('');     const result = arr.filter(elem => elem % 2 !== 0).reduce((acc, curr) => acc * curr, 1);     return result || 0; }
var sum = 0;     var num = n.toString();     for (i = 0; i < num.length; i++) {         var number = parseInt(num[i]);         if (number % 2 != 0) {             sum += number;         }     }     return sum; }
if (need <= remaining) {     return [number + need, remaining - need];   } else {     return [number + remaining, 0];   } }
return [number+need<=remaining?number+need:remaining, remaining-need>=0?remaining-need:0]; }
if(remaining >= (number + need)){     return [ number + need, remaining - (number + need) ];   } else if(remaining < (number + need)){     return [ number + remaining, 0 ];   } }
let needCarrots = number + need;   if (needCarrots > remaining) {     return [remaining, 0];   } else {     return [needCarrots, remaining - needCarrots];   } }
// code here   if (remaining >= need) {     return [number + need, remaining - need];   } else {     return [number + remaining, 0];   }   }
// Write your code here...     return need-number>remaining?[remaining+number,0]:[need, remaining-(need-number)]; }
var eat = number + need;   if (remaining >= eat) {     var ret = [eat, remaining - eat];   } else {     var ret = [eat - remaining, 0];   }   return ret; }
let left = remaining - need   let result = []   if (left < 0) {     result.push(remaining)     result.push(0)   } else {     result.push(number + need)     result.push(left)   }   return result }
return (remaining >= need) ? [number + need, remaining - need] : [number + remaining, 0]; }
var eaten = number + need;     var left = 0;     if (eaten <= remaining) {         left = remaining - eaten;     }     return [eaten, left]; }
if(remaining < need){     return [number + remaining, 0];   }   else{     return [number + need, remaining - need];   } }
if(number + need <= remaining){         return [number + need, remaining - (number + need)]     } else {         return [number + remaining, 0]     } }
var total = number + remaining;   var eaten = 0;   var carrotRemain = 0;   if (total < need) {     eaten = total;     carrotRemain = 0;   } else {     eaten = need;     carrotRemain = total - need;   }   return [eaten, carrotRemain]; }
if(remaining < need) {     return [number + remaining, 0];   }   return [number + need, remaining - need]; }
let eaten = number + Math.min(need, remaining);     return [eaten, remaining - Math.min(need, remaining)]; }
if(number + need <= remaining){ 		return [number + need, remaining - (number + need)]; 	} 	else{ 		return [number + remaining, 0]; 	} }
var total = number + need;   if (total > remaining) {     total = remaining + number;     return [total, 0];   } else {     return [total, remaining - total];   } }
if(remaining >= need) return [number + need, remaining - need];   else return [number + remaining, 0]; }
if(number + need <= remaining){     return [number + need, remaining - (number + need)]   }   return [remaining, 0] }
return Number.isInteger(Math.cbrt(a)); }
return Math.pow(a, 1/3) % 1 === 0; }
return Number.isInteger(Math.cbrt(a)); }
return (Math.cbrt(a) % 1 === 0) }
return Math.sqrt(a) % 1 === 0; }
return !isNaN(Math.pow(a, 1/3)); }
if(Math.cbrt(a) % 1 == 0){         return true;     }else{         return false;     } }
var m=Math.cbrt(a);     if(m%1==0){         return true;     }     else{         return false;     } }
var g=a*a*a;   var t=a;   for(var i=0;i<t;i++){     g=g-a;     if(g==0){       return true;     }   }   return false; }
if(a === 0) return true;     return Math.pow(Math.round(Math.pow(a, 1/3)), 3) === a; }
return Number.isInteger(Math.cbrt(a)); }
if(a==0){         return true;     }     if(a>0){         return Math.cbrt(a)%1==0;     }     if(a<0){         return Math.cbrt(-a)%1==0;     } }
var y = a/2;     var x = Math.floor(Math.sqrt(y));     var c = Math.pow(x,3);     if(c==a){         return true;     }     else{         return false;     } }
if(a===0){ 		return true; 	} 	var cube=Math.abs(a); 	var num=Math.round(Math.cbrt(cube)); 	var x=Math.pow(num,3); 	if(x===cube){ 		return true; 	}else{ 		return false; 	} 	 }
//change the input to be positive to avoid lose of calculation result 	//due to the floating number. 	if(a < 0){ 		a = Math.abs(a); 	} 	//simple logic to check if a is a cube of some integer number 	return Math.pow(Math.round(Math.pow(a, 1/3)), 3) === a; }
if(a<0){     return true;   }else{     var c = Math.pow(a,1/3);     if(Number.isInteger(c)){       return true;     }else{       return false;     }   } }
if (a === b) {         return None;     } else if (parseFloat(a) > parseFloat(b)) {         return a;     } else {         return b;     } }
if (typeof a === typeof b) {         if (a === b) {             return null;         } else if (a > b) {             return a;         } else {             return b;         }     } else if (typeof a === "string") {         let bnew = Number(b.replace(",", "."));         let anew = Number(a.replace(",", "."));         if (anew === bnew) {             return null;         } else if (anew > bnew) {             return a;         } else {             return b;         }     } else if (typeof b === "string") {         let bnew = Number(b.replace(",", "."));         let anew = Number(a.replace(",", "."));         if (anew === bnew) {             return null;         } else if (anew > bnew) {             return a;         } else {             return b;         }     } }
if(typeof a === typeof b){         if(a === b){             return false;         }         else{             return a > b ? a : b;         }     }     else{         return a > b ? a : b;     } }
if (typeof a == typeof b) {         return None;     }     else if (typeof a == "string") {         return b;     }     else if (typeof b == "string") {         return a;     }     else if (typeof a == "number" && typeof b == "number") {         if (a > b) {             return a;         }         else if (b > a) {             return b;         }         else {             return None;         }     } }
if(parseFloat(a) === parseFloat(b)){         return null;     }     else if(parseFloat(a) < parseFloat(b)){         return b;     }     else{         return a;     } }
if(a == b){         return "None";     }else if(a > b){         return a;     }else{         return b;     } }
if(a==b){         return "None";     }else if(a>b){         return a;     }else if(b>a){         return b;     } }
if(typeof a == "number" && typeof b == "number"){         if(a>b){             return a;         }else if(a<b){             return b;         }else if(a==b){             return "None";         }     }else if(typeof a == "string" && typeof b == "string"){         let a2 = parseFloat(a.replace(/,/,"."));         let b2 = parseFloat(b.replace(/,/,"."));         if(a2>b2){             return a;         }else if(a2<b2){             return b;         }else if(a2==b2){             return "None";         }     }else if(typeof a == "string" && typeof b == "number"){         let a2 = parseFloat(a.replace(/,/,"."));         if(a2>b){             return a;         }else if(a2<b){             return b;         }else if(a2==b){             return "None";         }     }else if(typeof a == "number" && typeof b == "string"){         let b2 = parseFloat(b.replace(/,/,"."));         if(a>b2){             return a;         }else if(a<b2){             return b;         }else if(a==b2){             return "None";         }     } }
if(Number(a) === Number(b)) return None;     if(typeof a === "string" && typeof b === "string") return Number(a) > Number(b) ? a : b;     if(typeof a === "string" && typeof b === "number") return a;     if(typeof a === "number" && typeof b === "string") return b;     return a > b ? a : b; }
var r = null;     if(typeof a == typeof b){         if(typeof a == "number"){             r = (a > b) ? a : b;         }else if(typeof a == "string"){             r = (parseFloat(a) > parseFloat(b)) ? a : b;         }     }     return r; }
if (a > b){         return a;     }     else if (a < b){         return b;     }     else if (a == b){         return None;     } }
if(!isNaN(a) && !isNaN(b)) {     return a > b ? a : b   }   if(isNaN(a) && isNaN(b)) {     return a > b ? a : b   }   return null }
if(typeof a == "number" && typeof b == "number"){         if(a > b){             return a;         }else if(a < b){             return b;         }else{             return undefined;         }     }else if(typeof a == "string" && typeof b == "string"){         let a_final = parseFloat(a.replace(",", "."));         let b_final = parseFloat(b.replace(",", "."));         if(a_final > b_final){             return a;         }else if(a_final < b_final){             return b;         }else{             return undefined;         }     }else if(typeof a == "string" && typeof b == "number"){         let a_final = parseFloat(a.replace(",", "."));         if(a_final > b){             return a;         }else if(a_final < b){             return b;         }else{             return undefined;         }     }else if(typeof a == "number" && typeof b == "string"){         let b_final = parseFloat(b.replace(",", "."));         if(a > b_final){             return a;         }else if(a < b_final){             return b;         }else{             return undefined;         }     } }
let answer = typeof a === typeof b ? a === b ? null : a > b ? a : b : typeof a === "string" ? "string" : "number";     return answer === "string" ? b.toString() : answer === "number" ? b : answer; }
var isNum1 = !isNaN(a); 	var isNum2 = !isNaN(b); 	if (isNum1 && isNum2){ 		if (typeof a == "string"){ 			a = parseFloat(a.replace(",", ".")); 		} 		if (typeof b == "string"){ 			b = parseFloat(b.replace(",", ".")); 		} 		if (a > b){ 			return a; 		} else if (a < b){ 			return b; 		} else { 			return null; 		} 	} else if (!isNum1 && !isNum2){ 		if (a > b){ 			return a; 		} else if (a < b){ 			return b; 		} else { 			return null; 		} 	} else { 		return null; 	} }
let newA = typeof a === "string" ? a.replace(/\,/,".") : a;     let newB = typeof b === "string" ? b.replace(/\,/,".") : b;     return parseFloat(newA) < parseFloat(newB) ? b :            parseFloat(newA) > parseFloat(newB) ? a :            parseFloat(newA) === parseFloat(newB) ? null : "Invalid Input" }
if (a == b){ return None } else if (a < b){ return b } else { return a } }
if (typeof a == "number" && typeof b == "number") {         if (a == b) {             return "None";         }         else if (a > b) {             return a;         }         else {             return b;         }     }     else if (typeof a == "string" && typeof b == "string") {         if (a > b) {             return a;         }         else if (a < b) {             return b;         }         else {             return "None";         }     }     else if (typeof a == "string" && typeof b == "number") {         if (parseFloat(a) == b) {             return "None";         }         else if (parseFloat(a) > b) {             return a;         }         else {             return b;         }     }     else if (typeof a == "number" && typeof b == "string") {         if (a == parseFloat(b)) {             return "None";         }         else if (a > parseFloat(b)) {             return a;         }         else {             return b;         }     } }
if (typeof a == typeof b) {         if (a > b) {             return a;         } else if (a < b) {             return b;         } else {             return "None";         }     }     else if (typeof a == "string") {         if (a.replace(",", ".") > b) {             return a;         } else if (a.replace(",", ".") < b) {             return b;         } else {             return "None";         }     }     else if (typeof b == "string") {         if (a > b.replace(",", ".")) {             return a;         } else if (a < b.replace(",", ".")) {             return b;         } else {             return "None";         }     } }
let p = (a + b + c) / 2;     let area = Math.sqrt(p * (p - a) * (p - b) * (p - c));     if(isNaN(area)) return -1;     return Number(area.toFixed(2)); }
var s = (a + b + c) / 2;     var area = Math.sqrt(s * (s - a) * (s - b) * (s - c));     if(area > 0) {         return area.toFixed(2);     } else {         return -1;     } }
if (a+b<c || a+c<b || b+c<a) return -1; 	var p = (a+b+c)/2; 	return Math.round(Math.sqrt(p*(p-a)*(p-b)*(p-c))*100)/100; }
if( a+b>c && a+c>b && b+c>a){         let p = (a+b+c)/2;         let sq = p*(p-a)*(p-b)*(p-c);         return Math.sqrt(sq).toFixed(2);     }else{         return -1;     } }
if(a + b > c && a + c > b && b + c > a){         //Heron's formula         let s = (a + b + c) / 2;         return parseFloat((Math.sqrt(s * (s - a) * (s - b) * (s - c))).toFixed(2));     }     return -1; }
if (a+b>c && a+c>b && b+c>a){         return Number((0.5*a*b).toFixed(2));     } else {         return -1;     } }
// sort sides to use the most optimal (biggest side)     // for calculating the area     let sides = [a, b, c].sort(function(a, b){return a-b});     let p = (sides[0] + sides[1] + sides[2]) / 2;     let area = p * (p - sides[0]) * (p - sides[1]) * (p - sides[2]);     return area > 0 ? +Math.sqrt(area).toFixed(2) : -1; }
if(a + b > c && a + c > b && b + c > a){       return +((a * b * c / 2).toFixed(2));     } else {       return -1;     }   }
if(a + b > c && a + c > b && b + c > a){         let s = (a + b + c) / 2;         let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));         return Number(area.toFixed(2));     }     return -1; }
const sides = [a, b, c];   sides.sort((a, b) => a - b);   if(sides[0] + sides[1] > sides[2]){     const s = sides.reduce((a,b) => a + b) / 2;     return +(Math.sqrt(s * (s - sides[0]) * (s - sides[1]) * (s - sides[2]))).toFixed(2);   }   return -1; }
let s = (a + b + c) / 2;     let area = Math.sqrt(s * (s - a) * (s - b) * (s - c));     return area > 0 ? area.toFixed(2) : -1; }
if (a + b > c && a + c > b && b + c > a) {         return +(a * b / 2).toFixed(2);     } else {         return -1;     } }
if (a + b > c && a + c > b && b + c > a) {         let s = (a + b + c) / 2;         return (Math.sqrt(s * (s - a) * (s - b) * (s - c))).toFixed(2);     }     return -1; }
let sum = a + b + c;     if(sum < c) return -1;     let p = sum / 2;     let area = Math.sqrt(p * (p - a) * (p - b) * (p - c));     return Number(area.toFixed(2)); }
if ((a+b)>c && (a+c)>b && (b+c)>a){ 		let sp = (a+b+c)/2; 		let area = sp*(sp-a)*(sp-b)*(sp-c); 		area = Math.sqrt(area); 		return +area.toFixed(2); 	} 	else{ 		return -1; 	} }
let s = (a + b + c) / 2;   if (s - a < 0 || s - b < 0 || s - c < 0) return -1;   return Number((Math.sqrt(s * (s - a) * (s - b) * (s - c))).toFixed(2)); }
if(a+b>c && a+c>b && b+c>a){         let s = (a+b+c)/2;         let area = Math.sqrt(s*(s-a)*(s-b)*(s-c));         return Number(area.toFixed(2));     }     return -1; }
if (a + b > c && a + c > b && b + c > a) {     return Number(((a + b + c) / 2 * (Math.sqrt((a + b + c) * (a + b - c) * (a + c - b) * (b + c - a))) / 2).toFixed(2));   } else {     return -1;   } }
let sides = [a, b, c].sort((a, b) => a - b);     if (sides[0] + sides[1] > sides[2]) {         let s = (a + b + c) / 2;         return Math.round(Math.sqrt(s * (s - a) * (s - b) * (s - c)) * 100) / 100;     } else {         return -1;     } }
let list = [], ans = [], i, length = arr.length;     for(i = 0; i < length; i++){         if(list.length == 0 || arr[i] > list[0]){             list.unshift(arr[i]);         }         else{             list.push(arr[i]);         }     }     for(i = 0; i < k; i++){         ans.push(list.shift());     }     return ans; }
// return max(arr, k, 0, arr.length-1);     return quickSelect(arr, k, 0, arr.length-1); }
let sorted = arr.sort((a,b) => b-a)     let sliced = sorted.slice(0,k)     return sliced }
let result = []; 	for(let i = 0; i < k; i++){ 		result.push(Math.max(...arr)); 		arr.splice(arr.indexOf(Math.max(...arr)), 1); 	} 	return result; }
var res = [] 	for(var i = 0; i < arr.length; i++){ 		while(res.length && res[res.length - 1] < arr[i] && res.length + arr.length - i > k){ 			res.pop() 		} 		if(res.length < k){ 			res.push(arr[i]) 		} 	} 	return res }
let result = []     if(arr.length == 0 || k == 0){         return result     }     arr.sort((a,b) => a-b)     result = arr.slice(arr.length - k)     return result }
// sort the array in ascending order   arr.sort(function(a, b){     return a - b;   });   // return the last k elements from the sorted array   return arr.slice(arr.length - k); }
arr.sort((a, b) => b - a);   arr.length = k;   return arr; }
var result = [];     if(arr.length <= k){         return arr;     }     var i = 0;     while(i < k){         result.push(arr[i]);         i++;     }     i = k;     while(i < arr.length){         j = k - 1;         while(j >= 0){             if(arr[i] > result[j]){                 if(j === 0){                     result[j] = arr[i];                 }                 else{                     temp = result[j];                     result[j] = arr[i];                     result[j - 1] = temp;                 }             }             j--;         }         i++;     }     return result; }
let sortedArray = arr.sort((a,b) => a - b);     return sortedArray.slice(sortedArray.length - k); }
if(arr.length == 0) return null;   if(arr.length == 1) return arr;   const pq = new PQ();   for(let i = 0; i < arr.length; i++){     pq.insert(arr[i]);   }   const res = [];   for(let i = 0; i < k; i++){     res.push(pq.remove());   }   return res; }
let result = []     let most = null     while(k > 0){         most = null         for(let i = 0; i < arr.length; i++){             if(most === null || arr[i] > most){                 most = arr[i]             }         }         result.push(most)         arr.splice(arr.indexOf(most), 1)         k--     }     return result }
if(k <= 0) return []     if(k >= arr.length) return arr.sort((a,b) => a-b)     let kArray = arr.slice(0,k)     kArray.sort((a,b) => a-b)     for(let i = k; i < arr.length; i++){         if(arr[i] > kArray[0]){             let j = 0             while(j < k && arr[i] > kArray[j]){                 j++             }             kArray.splice(j,0,arr[i])             kArray.splice(0,1)         }     }     return kArray }
var sorted = quickSort(arr);     console.log("sorted: ", sorted);     return sorted.slice(sorted.length - k, sorted.length); }
var sortedArr = arr.sort((a,b) => b-a)     return sortedArr.slice(0,k) }
let output = [];     let max= -Infinity;     let idx = 0;     while(k > 0){         for(let i = 0; i < arr.length; i++){             if(arr[i] > max){                 max = arr[i];                 idx = i;             }         }         output.push(max);         max = -Infinity;         arr.splice(idx, 1);         k--;     }     return output; }
let sorted = arr.sort((a,b) => b-a);     return sorted.slice(0,k); }
if(k == 0) return [];     if(k >= arr.length) return arr;     let copy = arr.slice();     let result = [];     let part = partition(copy, k-1);     while(part < k){         let temp = partition(copy, part-1);         if(temp < k){             result.push(copy[temp]);             copy.splice(temp, 1);             part = temp + 1;         }else{             result.push(copy[temp]);             copy.splice(temp, 1);             part = temp;         }     }     return result; }
if(arr.length === 0 || k === 0) return [];     if(arr.length === k) return arr;     let result = [];     for(let i = 0; i < arr.length; i++){         while(result.length > 0 && result[result.length - 1] < arr[i] && result.length + arr.length - i > k){             result.pop();         }         if(result.length < k){             result.push(arr[i]);         }     }     return result; }
if(brackets === null){         return false;     }     if(brackets.length % 2 !== 0){         return false;     }     var arr = brackets.split("");     var count = 0;     for(var i = 0; i < arr.length; i++){         if(arr[i] === "<"){             count++;         }else{             count--;         }         if(count < 0){             return false;         }     }     if(count === 0){         return true;     }else{         return false;     } }
if(brackets.length === 0){ 		return true; 	} 	if(brackets.length === 1){ 		return false; 	} 	if(brackets[0] === '>'){ 		return false; 	} 	if(brackets[brackets.length - 1] === '<'){ 		return false; 	} 	var count = 0; 	for(var i = 0; i < brackets.length; i++){ 		if(brackets[i] === '<'){ 			count += 1; 		} 		if(brackets[i] === '>'){ 			count -= 1; 		} 		if(count < 0){ 			return false; 		} 	} 	if(count === 0){ 		return true; 	} 	return false; }
var i;   var j;   for (i = 0; i < brackets.length; i += 1){     if (brackets[i] === "<"){       for (j = i; j < brackets.length; j += 1){         if (brackets[j] === ">"){           break;         }       }       if (j === brackets.length){         return false;       }     }   }   return true; }
var brace = 0;   for (var i = 0; i < brackets.length; i++) {     if (brackets[i] == "<") {       brace += 1;     }     else if (brackets[i] == ">") {       brace -= 1;     }     if (brace < 0) {       return false;     }   }   if (brace == 0) {     return true;   }   else {     return false;   } }
}
var counter = 0;     for (var i = 0; i < brackets.length; i++){         if (brackets[i] == "<"){             counter += 1;         } else if (brackets[i] == ">"){             counter -= 1;         }         if (counter < 0){             return false;         }     }     if (counter == 0){         return true;     } else {         return false;     } }
var open = 0;     for (var i = 0; i < brackets.length; i++){         if (brackets[i] == "<"){             open++;         }         else if (brackets[i] == ">"){             open--;         }         if (open < 0){             return false;         }     }     if (open == 0){         return true;     }     else{         return false;     } }
var opening = []; 	for (var i = 0; i < brackets.length; i++) { 		if (brackets[i] == "<") { 			opening.push(brackets[i]); 		} 		else { 			if (opening.length != 0) { 				opening.pop(); 			} 			else { 				return false; 			} 		} 	} 	if (opening.length == 0) { 		return true; 	} 	else { 		return false; 	} }
var correct=false;     var open=brackets.split("<").length-1;     var close=brackets.split(">").length-1;     if(open==close){         correct=true;     }     return correct; }
if(brackets.length == 0) return false; 	if(brackets.length == 1) return false; 	if(brackets.length == 2) { 		if(brackets[0] == "<" && brackets[1] == ">") return true; 		else return false; 	} 	var c = 0; 	var d = 0; 	var o = []; 	var c = []; 	for(var i = 0; i < brackets.length; i++){ 		if(brackets[i] == "<"){ 			o.push(i); 		} 		if(brackets[i] == ">"){ 			c.push(i); 		} 	} 	if(o.length != c.length) return false; 	while(o.length != 0){ 		if(o[0] > c[0]) return false; 		o.shift(); 		c.shift(); 	} 	return true; }
var count = 0;     for (var i = 0; i < brackets.length; i++){         if (brackets[i] == "<"){             count++;         }         else if (brackets[i] == ">"){             count--;         }         if (count < 0){             return false;         }     }     if (count == 0){         return true;     }     else{         return false;     } }
// create a counter that increment if it's "<" and decrement if it's ">"     var counter = 0;     // iterate through the string     for (var i = 0; i < brackets.length; i++){         // if bracket is "<" increment         if (brackets[i] === "<"){             counter++;         } else {             // if bracket is ">" decrement             counter--;         }         // if counter gets negative, there is a ">" without a "<" before it         if (counter < 0){             return false;         }     }     // if all the brackets have corresponding pairs, the counter will be 0 at the end.     return counter === 0; }
var count = 0;   for (var i = 0; i < brackets.length; i++) {     if (brackets[i] === "<") {       count++;     }     else if (brackets[i] === ">") {       count--;     }     if (count < 0) {       return false;     }   }   if (count === 0) {     return true;   }   else {     return false;   } }
var counter = 0;   for (var i = 0; i < brackets.length; i++) {     if (brackets[i] == "<") {       counter += 1;     }     else if (brackets[i] == ">") {       counter -= 1;     }     if (counter < 0) {       return false;     }   }   if (counter != 0) {     return false;   }   return true; }
var opening = 0;     var closing = 0;     for (var i = 0; i < brackets.length; i++) {         if (brackets[i] == "<") {             opening += 1;         }         else if (brackets[i] == ">") {             closing += 1;         }     }     if (opening == closing) {         return true;     }     else {         return false;     } }
//Assume brackets is a string of "<" and ">"   //Create a counter to count how many left brackets there are.   //Loop over the brackets     //If we hit a "<", increment the counter.     //If we hit a ">", decrement the counter.     //If we hit a ">" and the counter is 0, return False.   //If the counter is not 0, return False.   //If the counter is 0, return True.   var counter = 0;   for(var i = 0; i < brackets.length; i++){     if(brackets[i] === "<"){       counter += 1;     } else if(brackets[i] === ">"){       counter -= 1;       if(counter < 0){         return false;       }     }   }   if(counter === 0){     return true;   } else {     return false;   } }
var stack = []; 	for(var i = 0; i < brackets.length; i++){ 		if(brackets[i] === "<"){ 			stack.push(brackets[i]); 		} 		else{ 			if(stack.length === 0){ 				return false; 			} 			stack.pop(); 		} 	} 	if(stack.length !== 0){ 		return false; 	} 	return true; }
var position = 0;   for (var i = 0; i < brackets.length; i++) {     var bracket = brackets[i];     if (bracket === "<") {       position += 1;     } else if (bracket === ">") {       position -= 1;     }     if (position < 0) {       return false;     }   }   return position === 0; }
let result = [];   let words = s.split(' ');   if (s === '') return result;   words.forEach(word => {     let consonants = 0;     for (let i = 0; i < word.length; i++) {       if (!'aeiou'.includes(word[i])) consonants++;     }     if (consonants === n) result.push(word);   });   return result; }
let regex = /[^aeiou ]/gi;   let words = s.split(' ');   let result = [];   words.forEach(function(word){     let match = word.match(regex);     if(match){       if(match.length === n){         result.push(word);       }     }   });   return result; }
var regex = /[bcdfghjklmnpqrstvwxyz]/i;     var temp = s.split(" ");     var result = [];     for(var i = 0; i < temp.length; i++){         var counter = 0;         for(var j = 0; j < temp[i].length; j++){             if(regex.test(temp[i][j])){                 counter++;             }         }         if(counter == n){             result.push(temp[i]);         }     }     return result; }
//Test     if(typeof s != "string" || typeof n != "number"){         return "Input invalid";     }     let list = s.split(" ");     //Test     if(list.length == 0){         return "Input invalid";     }     let result = [];     for(let i = 0; i < list.length; i++){         if(consonant_count(list[i]) == n){             result.push(list[i]);         }     }     return result; }
const regex = /[aeiou\s]/g;     const words = s.split(' ').filter(word => !(word.match(regex) || []).length);     return words.filter(word => word.length === n); }
let consonants = 'bcdfghjklmnpqrstvwxyz';     let words = s.split(' ');     let validWords = [];     for(let i = 0; i < words.length; i++){         let word = words[i];         let consCount = 0;         for(let j = 0; j < word.length; j++){             if(consonants.includes(word[j])){                 consCount++;             }         }         if(consCount === n){             validWords.push(word);         }     }     return validWords; }
return s.split(' ').filter(word => {         return word.split('').filter(char => {             return /[bcdfghjklmnpqrstvwxyz]/i.test(char);         }).length === n;     }); }
let res = [];     let vowels = {'a':1, 'e':1, 'i':1, 'o':1, 'u':1};     let words = s.split(' ');     for(let word of words){         let num = 0;         for(let ch of word){             if(!vowels[ch])                 num++;         }         if(num === n)             res.push(word);     }     return res; }
if (s === "") return [];     var words = s.split(" ");     var result = [];     for (var i = 0; i < words.length; i++) {         var currentWord = words[i];         var currentWordConsonantsCount = 0;         for (var j = 0; j < currentWord.length; j++) {             var char = currentWord[j];             if (char !== "a" && char !== "e" && char !== "i" && char !== "o" && char !== "u") {                 currentWordConsonantsCount++;             }         }         if (currentWordConsonantsCount === n) {             result.push(currentWord);         }     }     return result; }
var arr = [];     s.split(' ').forEach(function(el){         if(el.match(/[b-df-hj-np-tv-z]/gi).length == n){             arr.push(el);         }     });     return arr; }
return s.split(" ").filter(v => [...v].filter(v => isVowel(v)).length == n); }
var array = s.split(" "); 	var arr = []; 	for(i = 0; i < array.length; i++){ 		if(consonants(array[i]) == n){ 			arr.push(array[i]); 		} 	} 	return arr; }
if(s.length == 0){         return [];     }     let arr = s.split(" ");     let consonants = ["b", "c", "d", "f", "g", "h", "j", "k", "l", "m", "n", "p", "q", "r", "s", "t", "v", "w", "x", "y", "z"];     let matchArr = [];     for(let i = 0; i < arr.length; i++){         let cCount = 0;         for(let j = 0; j < arr[i].length; j++){             if(consonants.includes(arr[i][j].toLowerCase())){                 cCount++;             }         }         if(cCount == n){             matchArr.push(arr[i]);         }     }     return matchArr; }
if(s==''){         return [];     }     let consonants = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';     let words = s.split(' ');     words = words.filter(word => {         if(word.length > n) {             let charArray = word.split('');             let result = charArray.filter(letter => consonants.includes(letter));             return result.length == n;         }     });     return words; } module.exports = select_words;
const non_consonants = ['a', 'e', 'i', 'o', 'u'];   const map = s.split(' ').map(word => word.split('').filter(letter => !non_consonants.includes(letter)).length);   const res = [];   for (let i = 0; i < map.length; i++) {     if (map[i] === n) {       res.push(s.split(' ')[i]);     }   }   return res; }
var string = s.split(" ");   var numConsonants = 0;   var finalArray = [];   for(var i = 0; i < string.length; i++){     var word = string[i];     for(var j = 0; j < word.length; j++){       var letter = word[j];       if(letter === "a" || letter === "e" || letter === "i" || letter === "o" || letter === "u"){       }else{         numConsonants++;       }     }     if(numConsonants === n){       finalArray.push(word);     }     numConsonants = 0;   }   return finalArray; }
if(s.length === 0){     return [];   }else{     let result = [];     let words = s.split(' ');     for(let i = 0; i < words.length; i++){       let count = 0;       for(let j = 0; j < words[i].length; j++){         if(!isVowel(words[i][j])){           count++;         }       }       if(count === n){         result.push(words[i]);       }     }     return result;   } }
let allWords = s.split(' ');     let wordsWithKCons = [];     let cons = 'bcdfghjklmnpqrstvwxyz'.split('');     for(let word of allWords){         let wordCounter = 0;         for(let i = 0; i < word.length; i++){             if(cons.includes(word[i])){                 wordCounter++;             }         }         if(wordCounter === n){             wordsWithKCons.push(word);         }     }     return wordsWithKCons; }
if(s=="") return [];   let res=[];   for(let i=0;i<s.length;i++){     if(s[i]==" "){       let str=s.slice(0,i);       s=s.slice(i+1);       i=0;       if(isValid(str,n)) res.push(str);     }   }   return res; }
var hash = {'A':11,'B':12,'C':13,'D':14,'E':15,'F':16}     return hash[num] }
var hex = "0123456789ABCDEF"; 	var primes = "2357BDF"; 	var count = 0; 	for(var i = 0; i < num.length; i++){ 		for(var j = 0; j < primes.length; j++){ 			if(num[i] == primes[j]){ 				count++; 			} 		} 	} 	return count; }
var symbol = {     0:0,     1:1,     2:2,     3:3,     4:4,     5:5,     6:6,     7:7,     8:8,     9:9,     A:10,     B:11,     C:12,     D:13,     E:14,     F:15   }   return symbol[num]; }
return num.split('').map(e=>(e.charCodeAt()>64)?e.charCodeAt()-55:e).reduce((acc,cv)=>acc+cv) }
//determine if the key is between hex keys 0-9     if(num >= '0' && num <= '9'){         //return num as number         return Number(num);     }     //determine if the key is between hex keys A-F     else if(num >= 'A' && num <= 'F'){         //convert num to number & add 10 to it         return Number(num) + 10;     } }
return "123456789ABCDEF".indexOf(num); }
var result = 0;     for(var i = 0; i < num.length; i++){         if(num[i] === '2' || num[i] === '3' || num[i] === '5' || num[i] === '7' || num[i] === 'B' || num[i] === 'D'){             result += 1;         }     }     return result; }
let result = 0;   const primes = ["2", "3", "5", "7", "B", "D"];   for(let i = 0; i < num.length; i++){     if(primes.includes(num[i])){       result++;     }   }   return result; }
var hexArr = num.split('');     var hexConv = {         0:0,         1:1,         2:2,         3:3,         4:4,         5:5,         6:6,         7:7,         8:8,         9:9,         A:10,         B:11,         C:12,         D:13,         E:14,         F:15     }     var hexVal = hexArr.map(num => hexConv[num]);     var primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];     var primeCount = 0;     for(var i = 0; i < hexVal.length; i++){         for(var j = 0; j < primes.length; j++){             if(hexVal[i] === primes[j]){                 primeCount++;             }         }     }     return primeCount; }
var digits = [0,1,2,3,4,5,6,7,8,9,'A','B','C','D','E','F'];     var primes = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,12
let hex = ["0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F"];     let hexy = [0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];     let counter = 0;     let arr = [];     for(let i = 0; i < num.length; i++){       let index = hex.indexOf(num[i]);       arr.push(hexy[index]);     }     for(let i = 0; i < arr.length; i++){       if(arr[i] === 2 || arr[i] === 3 || arr[i] === 5 || arr[i] === 7 || arr[i] === 11 || arr[i] === 13){         counter++;       }     }     return counter; }
var obj = {     2: true,     3: true,     5: true,     7: true,     'B': true,     'D': true,     'F': true   }   return obj[num] }
if (num < 10) return true;     else if (num === 11 || num === 13 || num === 17) return true;     else return false; }
let hexKey = {     'A': 10,     'B': 11,     'C': 12,     'D': 13,     'E': 14,     'F': 15   }   return hexKey[num] }
let hex_key = {         0:0,         1:1,         2:2,         3:3,         4:4,         5:5,         6:6,         7:7,         8:8,         9:9,         "A":10,         "B":11,         "C":12,         "D":13,         "E":14,         "F":15     }     return hex_key[num] }
var hex_nums = ["0","1","2","3","4","5","6","7","8","9","A","B","C","D","E","F"];     var hex_keys = {};     for(var i = 0; i < hex_nums.length; i++){         hex_keys[hex_nums[i]] = i;     }     return hex_keys[num]; }
var hex={         "A": 11,         "B": 12,         "C": 13,         "D": 14,         "E": 15,         "F": 16     }     var arr = [];     for(var key in hex){         arr.push(hex[key]);     }     return arr; }
let word ='0ABCDEF';     let pos = word.indexOf(num);     return pos; }
let num_dict = {}     for(let j = 0; j < num.length; j++){         if(num_dict[num[j]]){             num_dict[num[j]] = num_dict[num[j]] + 1         }         else{             num_dict[num[j]] = 1         }     }     return num_dict }
return s.length >= 3 && /^[a-zA-Z]*([a-zA-Z])\1[a-zA-Z]*$/.test(s) }
return s.length >= 3 && s.split('').every((v,i,a) => i < a.length - 2 ? v !== a[i+1] && v !== a[i+2] : true) }
if(s.length < 3) return false;     let found = false;     for(let i = 0; i < s.length - 2; i++){         if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]){             found = true;             break;         }     }     return !found; }
if(s.length<3){         return false;     }     else{         let count=0;         for(let i=0;i<s.length-2;i++){             if(s[i]!=s[i+1] && s[i]!=s[i+2] && s[i+1]!=s[i+2]){                 count++;             }         }         if(count==s.length-2){             return true;         }         else{             return false;         }     } }
if(s.length < 3) return false;     for(var i = 0; i < s.length - 2; i++){         if(s[i] === s[i+1] || s[i] === s[i+2] || s[i+1] === s[i+2]) return false;     }     return true; }
if(s.length<3){         return false;     }     if(s.length===3){         if(s[0]===s[1] || s[0]===s[2] || s[1]===s[2]){             return false;         }else{             return true;         }     }     if(s.length>3){         for(var i=0;i<s.length-2;i++){             if(s[i]===s[i+1] || s[i]===s[i+2] || s[i+1]===s[i+2]){                 return false;             }         }         return true;     } }
let result = false;     if(s.length >= 3){         let i = 0;         while(i < s.length -2){             if(s[i] !== s[i+1] && s[i] !== s[i+2] && s[i+1] !== s[i+2]){                 result = true;             } else {                 result = false;                 break;             }             i += 1;         }     }     return result; }
var result = false;     var i;     if (s.length < 3) {         return result;     }     for (i = 0; i < s.length; i+=3) {         if (s[i] !== s[i+1] && s[i] !== s[i+2] && s[i+1] !== s[i+2]) {             result = true;         } else {             result = false;             break;         }     }     return result; }
var count=0;     var b=s.length;     var c=b-2;     for(var i=0;i<=c;i++){         var letter=s.charAt(i);         var letter2=s.charAt(i+1);         var letter3=s.charAt(i+2);         if(letter!=letter2&&letter!=letter3&&letter2!=letter3){             count++;         }     }     if(count==c+1){         return true;     }     else{         return false;     } }
if(s.length<3){         return false;     }     for(let i=0;i<s.length-2;i++){         if(s[i]==s[i+1] || s[i]==s[i+2] || s[i+1]==s[i+2]){             return false;         }     }     return true; }
if(s.length >= 3){         for(let i = 0; i < s.length; i+=3){             let a = s[i];             let b = s[i+1];             let c = s[i+2];             if(a !== b && b !== c && a !== c){                 return true;             } else {                 return false;             }         }     } else {         return false;     } }
var consecutiveLetters = [];     for (var i = 0; i < s.length; i++) {         consecutiveLetters.push(s[i]);         if (consecutiveLetters.length === 3 && (consecutiveLetters[0] === consecutiveLetters[1] || consecutiveLetters[1] === consecutiveLetters[2] || consecutiveLetters[0] === consecutiveLetters[2])) {             return false;         }         if (consecutiveLetters.length === 3) {             consecutiveLetters = [];         }     }     return true; }
return s.length > 2 && !/(.).\1.\1/.test(s); }
let arr = s.split('')     if(arr.length < 3){         return false     }     for(let i = 0; i < arr.length; i++){         if(arr[i] === arr[i+1] && arr[i+1] === arr[i+2]){             return false         }     }     return true }
let myArr = s.split('');     let bool = true;     if(myArr.length < 3){         return false;     }     for(let i = 0; i < myArr.length; i+=3){         if(myArr[i] === myArr[i+1] || myArr[i] === myArr[i+2] || myArr[i+1] === myArr[i+2]){             bool = false;         }     }     return bool; }
return s.length>2&&s.split('').map((e,i,a)=>i>0?e!==a[i-1]:false).filter(e=>e).length===s.length-1; }
if(s.length < 3) return false;     for(let i = 0; i < s.length - 2; i++){         if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]){             return false;         }     }     return true; }
return /(.).*\1/g.test(s.slice(0,3))?false:true; }
if(s.length < 3) return false;     for(let i = 0; i < s.length - 2; i++){         if(s[i] === s[i + 1] || s[i] === s[i + 2] || s[i + 1] === s[i + 2]) return false;     }     return true; }
// TODO: write code here }
if(isPrime(n)){         return x;     }else{         return y;     } }
if(isPrime(n)){         return x;     }     return y; }
if(n == 1){         return y;     }     let prime = true;     for(let i = 2; i < n; i++){         if(n % i == 0){             prime = false;             break;         }     }     if(prime){         return x;     }     return y; }
if(isPrime(n)) return x;     else return y; }
if(isPrime(n)){         return x;     }     return y; }
for(let i = 2; i < n; i++){         if(n % i === 0){             return y;         }     }     return x; }
for(var i = 2; i < n; i++){ 		if(n % i === 0){ 			return y; 		} 	} 	return x; }
let result = n;    let arr = [];    for(let i = 2; i < result; i++){       if(result % i === 0){          result = x;          break;       }else{          result = y;       }    }    return result; } x_or_y(7, 34, 12); x_or_y(15, 8, 5);
// const arr = []   // for(var i = 2; i < n; i++){   //   if(n % i == 0){   //     arr.push(i)   //   }   // }   // if(arr.length > 0){   //   return y   // } else {   //   return x   // }   return n == 1 || n == 2 ? x : y }
if (n%2 == 0)     return y;   else if (n%3 == 0)     return y;   else if (n%5 == 0)     return y;   else if (n%7 == 0)     return y;   else if (n%11 == 0)     return y;   else if (n%13 == 0)     return y;   else if (n%17 == 0)     return y;   else if (n%19 == 0)     return y;   else if (n%23 == 0)     return y;   else if (n%29 == 0)     return y;   else if (n%31 == 0)     return y;   else if (n%37 == 0)     return y;   else if (n%41 == 0)     return y;   else if (n%43 == 0)     return y;   else if (n%47 == 0)     return y;   else if (n%53 == 0)     return y;   else if (n%59 == 0)     return y;   else if (n%61 == 0)     return y;   else if (n%67 == 0)     return y;   else if (n%71 == 0)     return y;   else if (n%73 == 0)     return y;   else if (n%79 == 0)     return y;   else if (n%83 == 0)     return y;   else if (n%89 == 0)     return y;   else if (n%97 == 0)     return y;   else     return x; }
if(n===1){         return y;     }     else if(n===2){         return x;     }     else{         for(let i=2; i<n; i++){             if(n%i===0){                 return y;             }         }         return x;     } }
return isPrime(n) ? x : y; }
// NOTE: I don't see the point of this challenge? you're just writing if statement     // example: function x_or_y(n, x, y){ return n % 2 ? x : y }     if (n % 2 == 0){         return y;     }     else{         return x;     } }
for(let i = 2; i < n; i++){     if(n % i === 0){       return y;     }   }   return x; }
return !isPrime(n) ? y : x; }
if (n % 1 === 0)   return y; if (n % 2 === 0)   return y; if (n % 3 === 0)   return y; if (n % 4 === 0)   return y; if (n % 5 === 0)   return y; if (n % 6 === 0)   return y; if (n % 7 === 0)   return y; if (n % 8 === 0)   return y; if (n % 9 === 0)   return y; if (n % 10 === 0)   return y; if (n % 11 === 0)   return y; if (n % 12 === 0)   return y; if (n % 13 === 0)   return y; if (n % 14 === 0)   return y; if (n % 15 === 0)   return y; if (n % 16 === 0)   return y; if (n % 17 === 0)   return y; if (n % 18 === 0)   return y; if (n % 19 === 0)   return y; if (n % 20 === 0)   return y; if (n % 21 === 0)   return y; if (n % 22 === 0)   return y; if (n % 23 === 0)   return y; if (n % 24 === 0)   return y; if (n % 25 === 0)   return y; if (n % 26 === 0)   return y; if (n % 27 === 0)   return y; if (n % 28 === 0)   return y; if (n % 29 === 0)   return y; if (n % 30 === 0)   return y; if (n % 31 === 0)   return y; if (n % 32 === 0)   return y; if (n % 33 === 0)   return y; if (n % 34 === 0)   return y; if (n % 35 === 0)   return y; if (n % 36 === 0)   return y; if (n % 37 ===
let p = true; 	if (n > 1) { 		for (let j = 2; j < n; j++) { 			if (n % j == 0) { 				p = false; 				break; 			} 		} 	} else { 		p = false; 	} 	if (p) { 		return x; 	} else { 		return y; 	} }
if(n%2==0)       return x;     else       return y; }
let s_lst = lst.filter(element => element.length % 2 === 0);     s_lst.sort((a, b) => {return (a.length - b.length) || a.localeCompare(b)});     return s_lst; }
new_lst = []     for(var i = 0; i < lst.length; i++){         if(lst[i].length % 2 == 0){             new_lst.push(lst[i])         }     }     return new_lst.sort(compare) }
function length(lst){         var length_lst = [];         for(var x = 0; x < lst.length; x++){             var l = lst[x].length;             length_lst.push(l);         }         return length_lst;     }     var new_lst = [];     for(var i = 0; i < lst.length; i++){         if(lst[i].length % 2 === 0){             new_lst.push(lst[i]);         }     }     return length(new_lst); }
return lst.reduce(function(acc, num){ 		return acc + num; 	}, 0); }
// filter out the odd length words     var result = lst.filter(function(word){         return word.length % 2 === 0;     });     //sort the list by length of each word     result.sort(function(a, b){         return a.length - b.length;     });     //return the list sorted by that rule     return result; } var lst = ["ab", "a", "aaa", "cd"];
// Your code here     return 1; } assert(sorted_list_sum(["aa", "a", "aaa"]), "aa"); assert(sorted_list_sum(["ab", "a", "aaa", "cd"]), "abcd");
let new_lst = lst.slice(0);     new_lst.sort();     let sum = 0;     let sum_new_lst = [];     for (let i = 0; i < new_lst.length; i++) {         sum += new_lst[i];         sum_new_lst.push(sum);     }     return sum_new_lst; }
return lst.sort(); } assert( 	sorted_list_sum(["aa", "a", "aaa"]), 	["aa"] ); assert( 	sorted_list_sum(["ab", "a", "aaa", "cd"]), 	["ab", "cd"] );
var new_lst = lst.filter(function(a){         return a.length % 2 == 0;     });     var sort_by_length = function(a, b){         if(a.length == b.length){             return a.localeCompare(b);         }         return a.length - b.length;     };     return new_lst.sort(sort_by_length); }
var odd_list = [];     var even_list = [];     for(var i = 0; i < lst.length; i++){         if(lst[i].length % 2 == 0){             even_list.push(lst[i]);         }else{             odd_list.push(lst[i]);         }     }     odd_list.sort();     return odd_list; }
return lst.sort(function(a,b){         if(a.length > b.length){             return 1;         }         else if(a.length < b.length){             return -1;         }         else{             return a.localeCompare(b);         }     }).filter(function(str){         return str.length % 2 === 0;     }); } var list = ["ab", "a", "aaa", "cd"];
var lst_sorted = lst.sort(function(a, b){         if (a.length > b.length) return -1;         if (a.length < b.length) return 1;         if (a < b) return -1;         if (a > b) return 1;         return 0;     });     var count = 1;     while (count < lst_sorted.length){         if (lst_sorted[count-1].length == lst_sorted[count].length){             lst_sorted.splice(count, 1);         }         else {             count ++;         }     }     return lst_sorted; }
return lst.sort(function(a,b){         if(a.length<b.length){             return -1;         }else if(a.length>b.length){             return 1;         }else{             return a.localeCompare(b);         }     }).filter(function(a){         return a.length%2==0;     }); }
var odd_lst = [];     var even_lst = [];     var result = [];     var sum = 0;     for(var i = 0; i < lst.length; i++){         if(lst[i].length % 2 === 0){             even_lst.push(lst[i]);         }else{             odd_lst.push(lst[i]);         }     }     for(var j = 0; j < even_lst.length; j++){         result.push(even_lst[j]);     }     for(var k = 0; k < odd_lst.length; k++){         result.push(odd_lst[k]);     }     for(var m = 0; m < result.length; m++){         for(var n = 0; n < result[m].length; n++){             sum += result[m].charCodeAt(n);         }     }     console.log(sum); } sorted_list_sum(["ab", "a", "aaa", "cd"]);
var alpha_lst = lst.sort();     var result = [];     for(var i = 0; i < alpha_lst.length; i++) {         if(result.indexOf(alpha_lst[i]) == -1) {             result.push(alpha_lst[i]);         }     }     return result; }
var lst_lengths = []     var lst_result = []     var j = 0     for (i = 0; i < lst.length; i++){         lst_lengths.push(lst[i].length)     }     // print(lst_lengths)     lst_lengths.sort()     // print(lst_lengths)     // console.log(lst_lengths)     while (j < lst_lengths.length){         for (i = 0; i < lst.length; i++){             if (lst[i].length == lst_lengths[j]){                 lst_result.push(lst[i])             }         }         j++     }     return lst_result }
let total_sum = 0;     for(let l of lst){         total_sum += l;     }     return total_sum; } assert_equals(sorted_list_sum([1,3,5,6,2,6,7,5,2,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,5,6,
var lst_count = []   for (var i = 0; i < lst.length; i++){     lst_count.push(lst[i].length)   }   lst_count.sort()   for (var i = 0; i < lst_count.length; i++){     for (var j = 0; j < lst.length; j++){       if (lst_count[i] == lst[j].length){         lst.splice(j, 1)         return lst_count[i]       }     }   } }
var temp;     for(var i = 0; i < lst.length; i++){         for(var j = i + 1; j < lst.length; j++){             if(lst[i].length > lst[j].length){                 temp = lst[i];                 lst[i] = lst[j];                 lst[j] = temp;             }         }     }     return lst; }  var lst = ["aa", "a", "aaa"];
let count = [0, 0];     for (let x = Math.abs(num); x >= 1; x = Math.floor(x / 10)){         if (x % 2 === 0){             count[0]++;         }         else{             count[1]++;         }     }     return [count[0], count[1]]; }
let even = 0;     let odd = 0;     let newNum = Math.abs(num);     let numString = newNum.toString();     for(let i = 0; i < numString.length; i++){         if(numString[i] % 2 === 0){             even++;         }else{             odd++;         }     }     return [even, odd]; }
// let even = 0;     // let odd = 0;     // while(num !== 0){     //     if(num % 2 === 0){     //         even++     //     }else{     //         odd++     //     }     //     num = Math.floor(num / 10)     // }     // return [even, odd]     num = num.toString().split('')     let even = num.filter(num => num % 2 === 0).length     let odd = num.filter(num => num % 2 !== 0).length     return [even, odd] }
var even = 0;     var odd = 0;     var nums = Math.abs(num).toString();     for(var i = 0; i < nums.length; i++){         if(nums[i] % 2 == 0){             even += 1;         }else{             odd += 1;         }     }     return [even, odd]; }
let even = 0, odd = 0     let newNum = num.toString().split('')     for(let i = 0; i < newNum.length; i++){         if(newNum[i] % 2 === 0){             even++         }else{             odd++         }     }     return [even, odd] }
var arr = String(num).split('');     var even = 0;     var odd = 0;     for(var i = 0; i < arr.length; i++){         if(arr[i] % 2 == 0){             even++;         }         else{             odd++;         }     }     return [even, odd]; }
let even = 0, odd = 0     if(num == 0){         return(0,0)     }     while(num != 0){         if(num % 2 == 0){             even = even + 1         }         else{             odd = odd + 1         }         num = Math.floor(num / 10)     }     return (even, odd) }
var result = [];     var count = 0;     var even = 0;     var odd = 0;     result = (num.toString()).split("");     while(count < result.length){         if(result[count] % 2 == 0){             even++;         }         else{             odd++;         }         count++;     }     return (even, odd); }
let number = Math.abs(num)     let even = 0     let odd = 0     while(number > 0){         let digit = number % 10         if(digit % 2 === 0){             even += 1         }else{             odd += 1         }         number = Math.floor(number / 10)     }     return [even, odd] }
let even=0;   let odd=0;   let numString=num.toString().split('');   for(let i=0;i<numString.length;i++){     if(numString[i]%2===0){       even++;     }     else{       odd++;     }   }   return [even,odd]; }
var even = 0, odd = 0;     while(num != 0){         if(num % 2 == 0){             even += 1;         }else{             odd += 1;         }         num = parseInt(num / 10);     }     return [even, odd]; }
// code here }
let evens = 0; 	let odds = 0; 	let counter = 0; 	while(num > 0){ 		if(counter % 2 === 0){ 			evens++; 		}else{ 			odds++; 		} 		num = Math.floor(num / 10); 		counter++; 	} 	return [evens, odds]; }
let even = 0;     let odd = 0;     for(let n of num.toString()){         if(n % 2 === 0){             even++         } else {             odd++         }     }     return [even, odd] }
let even = 0;     let odd = 0;     let strNum = Math.abs(num).toString();     strNum.split('').forEach(e => e % 2 === 0 ? even++ : odd++);     return [even, odd]; }
var odd = 0;     var even = 0;     var num = num.toString();     for(var i = 0; i < num.length; i++){         if(num[i] % 2 === 0){             even ++;         }         else{             odd ++;         }     }     return [even, odd]; }
var str = num.toString();     var even_nums = 0;     var odd_nums = 0;     for(var i = 0; i < str.length; i++){         if(parseInt(str[i]) % 2 == 0){             even_nums++;         }else{             odd_nums++;         }     }     return [even_nums, odd_nums]; }
var arr = num.toString().split('');     var newArr = [];     var x = 0;     var y = 0;     for(var i = 0; i < arr.length; i++){         if(arr[i] % 2 == 0){             x++;         }         else if(arr[i] % 2 != 0){             y++;         }     }     return newArr = [x, y]; }
var even = 0;     var odd = 0;     while(num > 0){         if(num % 2 == 0){             even++;         }         else{             odd++;         }         num = parseInt(num / 10);     }     return [even, odd]; }
return l.map(function(element, index){         if (index % 3 == 0){             return order(element);         } else {             return element;         }     }); }
return l.map(function(e,i){         if(i%3==0){             return [...e].sort((a,b)=>a-b);         }         return e;     }); }
var newlist = l;     var oldlist = l;     var i;     var j;     var k;     var m;     var z;     var x;     var e;     for (i = 0; i < newlist.length; i = i + 3){         for (j = i; j < (i + 3); j++){             for (k = i; k < (i + 3); k++){                 if (newlist[j] < newlist[k]){                     m = newlist[j];                     newlist[j] = newlist[k];                     newlist[k] = m;                 }             }         }     }     for (x = 0; x < oldlist.length; x = x + 3){         for (z = 0; z < (i + 3); z++){             if (newlist[x] == oldlist[z]){                 e = z;                 break;             }         }         oldlist[e] = newlist[x];     }     return oldlist; }
const indicies = [];   const values = [];   l.forEach((val, idx) => {     if ((idx + 1) % 3 === 0) {       indicies.push(idx);       values.push(val);     }   });   const sorted = values.sort((a, b) => a - b);   return l.map((val, idx) => indicies.includes(idx) ? sorted.shift() : val); }
return l.map(function(e, i){     if (i % 3 == 0){       return merge_sort(e);     } else {       return e;     }   }); }
var ans = [];   var temp = [];   for(i=0; i<l.length; i++){     if(i%3 != 2){       ans.push(l[i]);     }     else{       temp.push(l[i]);     }   }   temp.sort();   for(i=0; i<temp.length; i++){     ans.push(temp[i]);   }   return ans; }
}
return l.reduce(function(acc, next, index){     if (index % 3 == 0){       return acc.concat([next.sort()]);     }     else{       return acc.concat([next]);     }   }, []); }
let l1 = []   let l2 = []   let l3 = []   for (let i = 0; i < l.length; i++){     if (i % 3 == 0){       l1.push(l[i])     }     else if (i % 3 == 1){       l2.push(l[i])     }     else{       l3.push(l[i])     }   }   l1.sort()   l2.sort()   l3.sort()   let res = []   let x = 0   let y = 0   let z = 0   for (let i = 0; i < l.length; i++){     if (i % 3 == 0){       res.push(l1[x])       x++     }     else if (i % 3 == 1){       res.push(l2[y])       y++     }     else{       res.push(l3[z])       z++     }   }   return res }
var l_prime = [] 	//Iterate through each index of l (i) 	for (var i = 0; i < l.length; i++){ 		//If the index (i) is not divisible by three 		if (i % 3 != 0){ 			//Append the value in l at the index i to l_prime 			l_prime.push(l[i]) 		} 		//If the index (i) is divisible by three 		else{ 			//Create a list of the values in l that are divisible by three 			var l_three = [] 			for (var j = 0; j < l.length; j++){ 				if (j % 3 == 0){ 					l_three.push(l[j]) 				} 			} 			//Sort the list of values in l that are divisible by three 			l_three.sort() 			//Append the next value of l_three to l_prime 			l_prime.push(l_three[0]) 			//Delete the first value of l_three so that the next value will be pushed to l_prime next 			l_three.shift() 		} 	} 	return l_prime }
return l.map(function(e, i){     if(i % 3 === 0){       return e.sort();     }     return e;   }); }
var l2 = [];     for(var i = 0; i < l.length; i++){         if(i % 3 === 0){             l2.push(l[i]);         }     }     l2.sort();     var j = 0;     for(var i = 0; i < l.length; i++){         if(i % 3 === 0){             l[i] = l2[j];             j++;         }     }     return l; }
var res = []; 	for(var i = 0; i < l.length; i++){ 		if(i % 3 == 0){ 			res[i] = sortList(l[i]); 		}else{ 			res[i] = l[i]; 		} 	} 	return res; }
let l_new = [];   for (let i = 0; i < l.length; i++){     if (i % 3 == 0){       let l_partial = l.slice(i, i + 3);       l_partial.sort();       l_new = l_new.concat(l_partial);     } else {       l_new.push(l[i]);     }   }   return l_new; }
return l.map(function(i, x){         return (x+1)%3 === 0 ? i.sort() : i;     }); }
let threes = [];   let notThrees = [];   for(let i = 0; i < l.length; i++){     if(i % 3 == 0){       threes.push(l[i]);     }else{       notThrees.push(l[i]);     }   }   threes.sort();   let ans = [];   for(let i = 0; i < l.length; i++){     if(i % 3 == 0){       ans.push(threes[i/3]);     }else{       ans.push(notThrees[i - i/3]);     }   }   return ans; }
var list = l.slice(0); //copy of list 	var newList = []; 	var num = 0; 	var tempList = []; 	while(num < list.length){ 		if(num % 3 != 0){ 			newList.push(list[num]); 		} 		else{ 			tempList.push(list[num]); 			newList.push(tempList.sort()); 			tempList = []; 		} 		num += 1; 	} 	return newList; }
l.forEach(function(elem, index, array){     if(index % 3 == 0){       var low = index;       var high = index + 2;       while(low < high){         var temp = array[low];         array[low] = array[high];         array[high] = temp;         low += 1;         high -= 1;       }     }   });   return l; }
if (l.length == 0){         return [];     }     else{         let l_new = l.slice(0);         for (let i = 2; i < l.length; i += 3){             l_new[i] = Array.from(l_new[i]).sort();         }         return l_new;     } }
var txt2 = txt.trim();     var last = txt2.slice(-1);     if (/[A-Za-z]/.test(last)) {         return true;     } else {         return false;     } }
return txt.slice(-1).match(/[a-z]/i) ? txt.match(/\s/g) ? (txt.match(/\s/g).length === 1) : true : false; }
if(txt.length === 0){         return false;     }     if(txt[txt.length-1].match(/[a-z]/i) && txt[txt.length-2] === ' '){         return true;     }     return false; }
let str = txt.trim();     let lastChar = str[str.length - 1];     let isLetter = false;     if(lastChar >= 'a' && lastChar <= 'z'){         isLetter = true;     }     return isLetter; }
if(!txt){         return false;     }     var txtArray = txt.split(" ");     for(var i = 0; i < txtArray.length; i++){         if(txtArray[i].charAt(txtArray[i].length - 1) && txtArray[i].charAt(txtArray[i].length - 1).match(/[a-z]/i)){             return true;         }     }     return false; }
var words=txt.split(" ");     var lastLetter=words[words.length-1];     var letter=lastLetter[lastLetter.length-1];     var result=false;     if(letter>='a' && letter<='z' || letter>='A' && letter<='Z'){         if(lastLetter.length===1){             result=true;         }     }     return result; }
let str = txt.charAt(txt.length-1);   let res = str.charCodeAt(0);   if((res>64 && res<91) || (res>96 && res<123))   {     return true;   }   else   {     return false;   } }
let result = txt.match(/\s?([a-z])$/i);   return result ? true : false; }
let arr=txt.split(" ");     console.log(arr);     if(arr[arr.length-1].length!=0){         return true;     }     else{         return false;     } }
if (txt.length === 0) return false;     else if (!txt.match(/\w\s$/)) return true;     else return false; }
let words = txt.split(" ");     if(words[words.length-1].length >= 1){         return false;     }     if(words[words.length-1].length === 0){         return false;     }     if(!(words[words.length-1].length - 1)){         return false;     }     return true; }
let lastChar = txt.slice(-1);     let arr = txt.split(" ");     if(/[a-z]/i.test(lastChar) && arr.length > 1 && arr[arr.length-1].length === 1){         return true;     }else{         return false;     } }
return /^[a-z]$/i.test(txt.charAt(txt.length - 1)); }
let txtSplit = txt.split(" ")     let lastTxt = txtSplit[txtSplit.length-1]     return lastTxt.match(/[a-z]/i) && lastTxt.length == 1 ? true : false }
if(txt.length == 0){         return false;     }     let splitStr = txt.split(" ");     if(splitStr[splitStr.length-1].length == 1){         return true;     }     else{         return false;     } }
if (txt.length < 1){     return false;   }   if (txt[txt.length - 1].match(/[A-Za-z]/)){     return true;   } else {     return false;   } }
let lastChar = txt.slice(-1)     if (lastChar.match(/[a-z]/i) && lastChar.match(/\W/)){         return true     } else {         return false     } }
return txt.match(/[a-z]\s$/i) ? true : false; }
if (txt[txt.length-1] != " "){         return true;     }     else{         return false;     } }
let count = 0;     let subLength = substring.length;     let strLength = string.length;     if(subLength <= strLength){         for(let i = 0; i <= strLength - subLength; i++){             let temp = string.substring(i, i + subLength);             if(temp === substring){                 count++;             }         }     }     return count; }
let count = 0;     let end = substring.length - 1;     for(let i = 0; i < string.length; i++){         if(string[i] === substring[0]){             for(let j = 0; j < substring.length; j++){                 if(string[i + j] !== substring[j]){                     break;                 }                 if(string[i + j] === substring[end]){                     count++;                 }             }         }     }     return count; }
var count = 0;   var index = string.indexOf(substring);   while (index >= 0) {     count++;     index = string.indexOf(substring, index + 1);   }   return count; }
let count = 0;     for (let i = 0; i < string.length; i++) {         if (string.substring(i, i + substring.length) === substring) {             count += 1;         }     }     return count; }
var count = 0;   var index = 0;   while (index <= string.length - substring.length){     if (string.slice(index,index+substring.length) == substring){       count += 1;       index += substring.length;     }     else{       index += 1;     }   }   return count; }
if (substring === ''){         return 0;     }     let subLength = substring.length;     let result = 0;     for (i = 0; i < string.length; i++){         if (string.substring(i, i + subLength) === substring){             result += 1;         }     }     return result; }
let count = 0;     let i = 0;     while (i < string.length) {         if (string.slice(i, i + substring.length) === substring) {             count ++;             i = i + substring.length;         } else {             i ++;         }     }     return count; }
var count = 0;   for (var i = 0; i < string.length; i++) {     if (string.substring(i, substring.length + i) == substring) {       count++;     }   }   return count; }
let count = 0;     for (let i = 0; i < string.length; i++) {         for (let j = 0; j < substring.length; j++) {             if (string[i + j] !== substring[j]) {                 break;             }             if (j === substring.length - 1) {                 count++;             }         }     }     return count; }
// your code here }
var index = 0;     var count = 0;     var substring_length = substring.length;     while (index < string.length){         if (string.substring(index, index + substring_length) == substring){             count += 1;             index += substring_length;         } else {             index += 1;         }     }     return count; }
var count = 0;     var index = string.indexOf(substring);     while (index >= 0) {         count++;         index = string.indexOf(substring, index + 1);     }     return count; }
if (string.length < substring.length) {     return 0;   }   var match = string.match(new RegExp(substring, 'g'));   if (match) {     return match.length;   }   return 0; }
var times = 0;     for (var i = 0; i < string.length; i++){         for (var j = 0; j < substring.length; j++){             if (string[i+j] != substring[j]){                 break;             }             if (j == substring.length - 1){                 times++;             }         }     }     return times; }
let counter = 0;     for (let i = 0; i < string.length; i++){         if (string.substring(i,i+substring.length) === substring){             counter += 1;         }     }     return counter; }
var count = 0;     var currentIndex = 0;     while(currentIndex >= 0){         currentIndex = string.indexOf(substring, currentIndex);         if(currentIndex >= 0){             count += 1;             currentIndex += 1;         }     }     return count; }
var sizeString = string.length;   var sizeSubString = substring.length;   var count = 0;   var index = 0;   while(index < sizeString){     if(substring === string.substring(index,index+sizeSubString)){       count++;       index += sizeSubString;     }else{       index++;     }   }   return count; }
var times = 0;   for (var i = 0; i < string.length; i++) {     if (string.slice(i, substring.length + i) === substring) {       times += 1;     }   }   return times; }
var i = 0;     var count = 0;     while (i < string.length){         if (string.substring(i, i + substring.length) == substring){             count++;             i += substring.length;         }         else{             i++;         }     }     return count; }
if(arr.length < 1) return true;     let shift = 0;     let index = 0;     while(arr[0] < arr[1]){         if(index === arr.length - 1) break;         shift++;         index++;     }     while(shift > 0){         let temp = arr.pop();         arr.unshift(temp);         shift--;     }     for(let i = 0; i < arr.length - 1; i++){         if(arr[i] > arr[i + 1]) return false;     }     return true; }
if(arr.length === 0) return true;     let min = arr[0];     for(let i = 1; i < arr.length; i++){         if(arr[i] >= min) min = arr[i];         else return false;     }     return true; }
if(arr.length<2) return true;     let i = arr.length-1;     while(i>0){         if(arr[i]<arr[i-1]){             [arr[i],arr[i-1]]=[arr[i-1],arr[i]];             i--;         }         else break;     }     for(let i=0;i<arr.length-1;i++){         if(arr[i]>arr[i+1]) return false;     }     return true; }
//your code here }
if(arr.length===0){         return true;     }     else{         let shift = 0;         let min = arr[0];         let max = arr[0];         for(let i=0; i<arr.length; i++){             if(arr[i]<min){                 min = arr[i];             }             if(arr[i]>max){                 max = arr[i];             }         }         if(min===max){             return true;         }         else{             return false;         }     } }
if(arr.length==0) return true;     let arr2 = arr.map(x=>x);     let len = arr.length;     let n = 0;     while(n<len){         let temp = arr2.pop();         arr2.unshift(temp);         if(isIncrease(arr2)) return true;         n++;     }     return false; }
if(arr.length===0){     return true;   }   arr.sort(function(a,b){return a-b;});   if(arr[0]===1){     return true;   }   return false; }
if(arr.length==0) return true;     var a = arr.slice(0);     var b = arr.slice(0);     var c = arr.slice(0);     var d = arr.slice(0);     var e = arr.slice(0);     var f = arr.slice(0);     a.unshift(a.pop());     b.unshift(b.pop());     b.unshift(b.pop());     c.unshift(c.pop());     c.unshift(c.pop());     c.unshift(c.pop());     d.unshift(d.pop());     d.unshift(d.pop());     d.unshift(d.pop());     d.unshift(d.pop());     e.unshift(e.pop());     e.unshift(e.pop());     e.unshift(e.pop());     e.unshift(e.pop());     e.unshift(e.pop());     f.unshift(f.pop());     f.unshift(f.pop());     f.unshift(f.pop());     f.unshift(f.pop());     f.unshift(f.pop());     f.unshift(f.pop());     var res = (a.join()==arr.sort().join())||(b.join()==arr.sort().join())||(c.join()==arr.sort().join())||(d.join()==arr.sort().join())||(e.join()==arr.sort().join())||(f.join()==arr.sort().join());     return res; }
if(arr.length == 0){ 		return true; 	} 	var min = Math.min(...arr); 	var minIndex = arr.indexOf(min); 	var numShifts = 0; 	while(minIndex != 0){ 		numShifts++; 		minIndex = (minIndex - 1 + arr.length) % arr.length; 	} 	for(var i = 1; i < arr.length; i++){ 		if(arr[i] < arr[i-1]){ 			return false; 		} 	} 	return true; }
if(arr.length===0){         return true;     }     let sorted=arr.sort((a,b)=>a-b);     for(let i=0;i<arr.length;i++){         if(arr[i]!==sorted[i]){             return false;         }     }     return true; }
if(arr.length == 0) return true;     if(arr.length == 1) return true;     arr = arr.sort((a,b)=>a-b);     let copy = [...arr];     copy.shift();     copy.push(arr[0]);     if(copy.every((element, index)=>element == arr[index])){         return true;     }     for(let i = 0; i < arr.length; i++){         if(arr[i] != copy[i]){             return false;         }     }     return true; }
return arr.join("")===arr.sort((a,b)=>a-b).join("") }
//Write your code here }
//YOUR CODE GOES HERE }
//your code here   // //Version 1   // let len = arr.length;   // for(let i = 0; i < len - 1; i++){   //   if(arr[i] > arr[i + 1]){   //     return false;   //   }   // }   // return true;   //Version 2   let len = arr.length;   for(let i = 0; i < len - 1; i++){     if(arr[i] > arr[i + 1]){       let cache = arr[i];       arr[i] = arr[i + 1];       arr[i + 1] = cache;     }   }   return true; }
if(arr.length === 0) return true;     var res = [...arr].sort((a,b)=>a-b);     var count = 0;     var map = new Map();     arr.forEach(v=>{         if(!map.has(v))             map.set(v, 1);         else             map.set(v, map.get(v)+1);     });     for(var i=0; i<arr.length; i++){         var val = arr[i];         var expected_val = res[i];         if(val !== expected_val){             var c1 = map.get(val);             var c2 = map.get(expected_val);             var change = c1 - c2;             if(change < 0)                 return false;             map.set(val, c1-c2);             map.set(expected_val, 0);             count += change;         }     }     return count < 2; }
var flag=0;     if(arr.length==0){         return true;     }     while(arr.length>0){         var temp=arr.shift();         if(temp<arr[0]){             flag=1;             break;         }     }     if(flag==1){         return false;     }     else{         return true;     } }
if(arr.length === 0) return true;     let newArr = [];     while(arr.length > 0){         let num = arr.shift();         let i = 0;         while(i < newArr.length && newArr[i] < num){             i++;         }         newArr.splice(i, 0, num);     }     return arr.toString() === newArr.toString(); }
let sorted=arr.sort((a,b)=>a-b)     for(let i=0;i<arr.length;i++){         if(arr[i]!==sorted[i]) return false     }     return true }
var firstKey = Object.keys(dict)[0];     if(firstKey == firstKey.toLowerCase()){         for(var key in dict){             if(key.toLowerCase() != key){                 return false;             }         }     }else{         for(var key in dict){             if(key.toUpperCase() != key){                 return false;             }         }     }     return true; }
let keys = Object.keys(dict);     if(!keys.length) return false;     let isUpperCase = !!keys[0].match(/[A-Z]/);     for(let i = 1; i < keys.length; i++){         if(isUpperCase !== !!keys[i].match(/[A-Z]/)){             return false;         }     }     return true; }
return dict.every( (element, index, array) => {         return (typeof(element) === 'string' && element.toLowerCase() === element) ||         (typeof(element) === 'string' && element.toUpperCase() === element);     }); }
var keys = Object.keys(dict);     var upper = "A";     var lower = "a";     var flag = false;     if(keys.length === 0){         flag = false;     }     else{         for(var i=0; i<keys.length; i++){             if(keys[i].charAt(0) === upper || keys[i].charAt(0) === lower){                 flag = true;             }             else{                 flag = false;                 break;             }         }     }     return flag; }
//YOUR CODE GOES HERE     if (Object.keys(dict).length == 0) {         return false;     }     var keys = Object.keys(dict);     var lower = /^[a-z]+$/;     var upper = /^[A-Z]+$/;     if (lower.test(keys[0])) {         for (var i = 0; i < keys.length; i++) {             if (!lower.test(keys[i])) {                 return false;             }         }     } else if (upper.test(keys[0])) {         for (var i = 0; i < keys.length; i++) {             if (!upper.test(keys[i])) {                 return false;             }         }     } else {         return false;     }     return true; }
let flag = true;     let countUpper = 0;     let countLower = 0;     if(!Object.keys(dict).length) {         return false;     }     for(let key in dict) {         if(key.charCodeAt(0) > 64 && key.charCodeAt(0) < 91) {             countUpper++;         }         if(key.charCodeAt(0) > 96 && key.charCodeAt(0) < 123) {             countLower++;         }     }     if(countUpper == Object.keys(dict).length || countLower == Object.keys(dict).length) {         flag = true;     } else {         flag = false;     }     return flag; }
let lower = 0;     let upper = 0;     let length = Object.keys(dict).length;     if(length == 0){         return false;     }     for(let key in dict){         if(key.toLowerCase() == key){             lower++;         }         else if(key.toUpperCase() == key){             upper++;         }     }     if(lower == length || upper == length){         return true;     }     else{         return false;     } }
let caseCheck = true;   let lowerCheck = true;   let upperCheck = true;   //if the dictionary is empty   if(dict.length==0){     return false;   }   for(var key in dict){     if(key != key.toLowerCase()){       lowerCheck = false;     }     if(key != key.toUpperCase()){       upperCheck = false;     }   }   if(lowerCheck == false && upperCheck == false){     caseCheck = false;   }   return caseCheck; }
if (Object.keys(dict).length == 0) {         return false;     }     var firstkey = Object.keys(dict)[0];     var firstvalue = dict[firstkey];     var isUp = firstkey.toUpperCase() == firstkey;     for (var key in dict) {         if (isUp) {             if (key.toUpperCase() != key) {                 return false;             }         } else {             if (key.toLowerCase() != key) {                 return false;             }         }     }     return true; }
return dict; }
if(Object.keys(dict).length === 0){         return false;     }      let lowerCase = 0;     let upperCase = 0;      for(key in dict){         if(key === key.toLowerCase()){             lowerCase += 1;         }else if(key === key.toUpperCase()){             upperCase += 1;         }     }      if(lowerCase === Object.keys(dict).length || upperCase === Object.keys(dict).length){         return true;     }      return false; }
//write your code here     return true }
return dict.size === 0 ? false :         dict.keys().next().value === dict.keys().next().value.toLowerCase()         ? dict.keys().next().value === dict.keys().next().value.toUpperCase()             ? false             : dict.keys().length === dict.keys().filter(key => key.toLowerCase() === key).length         : dict.keys().length === dict.keys().filter(key => key.toUpperCase() === key).length     ; }
if(Object.keys(dict).length == 0){ 		return false; 	} 	var result = Object.keys(dict).every(key => key == key.toLowerCase()); 	if(result){ 		return true; 	} 	result = Object.keys(dict).every(key => key == key.toUpperCase()); 	if(result){ 		return true; 	} 	return false; }
if(!Object.keys(dict).length)         return false;     var allLower = false;     var allUpper = false;     Object.keys(dict).forEach(function(k){         if(k.toLowerCase() == k)             allLower = true;         if(k.toUpperCase() == k)             allUpper = true;     });     return allLower || allUpper; }
var keys = Object.keys(dict);     var lowercase = true;     var uppercase = true;     for(var i = 0; i < keys.length; i++){         if(keys[i] != keys[i].toLowerCase()){             lowercase = false;         }         if(keys[i] != keys[i].toUpperCase()){             uppercase = false;         }     }     return lowercase || uppercase; }
let keys = Object.keys(dict);     let lowercase = keys.filter(key => key.charCodeAt(0) > 96 && key.charCodeAt(0) < 123);     let uppercase = keys.filter(key => key.charCodeAt(0) > 64 && key.charCodeAt(0) < 91);     if (lowercase.length == keys.length || uppercase.length == keys.length){         return true;     }     return false; }
return Object.keys(dict).every(key => key === key.toLowerCase()) || Object.keys(dict).every(key => key === key.toUpperCase()); }
// your code here }
var outList = [];     for (var i = 1; i <= string.length; i++){         outList.push(string.slice(0,i));     }     return outList; }
var prefixes = [];   for (var i = 0; i < string.length; i++){     prefixes.push(string.slice(0,i+1));   }   return prefixes; }
//First, create a list to store the results     var prefixes = [];     //Then, loop through the input string     for (var i = 0; i < string.length; i++){         //Add to the prefixes list each character and each pair of characters         prefixes.push(string.slice(0, i + 1));     }     //Finally, return the list of all prefixes     return prefixes; }
var prefixes = []; 	for (var i = 1; i <= string.length; i++){ 		prefixes.push(string.slice(0, i)); 	} 	return prefixes; }
var result = [];     for (i = 0; i < string.length; i++){         result.push(string.slice(0, i+1));     }     return result; }
let prefixes = [];   for (let i = 0; i < string.length; i++){     prefixes.push(string.slice(0, i+1));   }   return prefixes; }
return _.range(1, string.length + 1).map(function(num){         return string.slice(0, num);     }); }
// return a list of all prefixes of the input string shortest to longest     var list_prefixes = [];     for (var x = 0; x < string.length; x++){         list_prefixes.push(string.slice(0,x+1));     }     return list_prefixes; }
var result = [];     for (var i = 0; i < string.length; i++) {       result.push(string.slice(0, i + 1));     }     return result; }
var prefixes = [];     for (var i = 1; i <= string.length; i++){         prefixes.push(string.slice(0, i));     }     return prefixes; }
var myPrefixes = []   var j = 1   for (var i = 0; i < string.length; i++){     myPrefixes.push(string.slice(0, j))     j++   }   return myPrefixes }
var result = [];   for (var i = 1; i < string.length+1; i++){     result.push(string.slice(0,i));   }   return result; }
var results = [];     for (var i = 0; i < string.length; i++) {         results.push(string.slice(0, i + 1));     }     return results; }
var all_pref = [];     for (var i = 0; i < string.length; i++){         all_pref.push(string.slice(0,i+1));     }     return all_pref; }
var list = [];     for (var i = 1; i <= string.length; i++){         list.push(string.slice(0, i));     }     return list; }
var result = [];     for (var i = 0; i < string.length; i++){         result.push(string.slice(0, i+1));     }     return result; }
let prefixes = [];     for (let i = 0; i < string.length; i++){         prefixes.push(string.slice(0, i+1));     }     return prefixes; }
return string.split('').map(function(item,i,array){         return array.slice(0, i+1).join('');     }); }
var prefixes = []; 	for (var i = 0; i < string.length; i++){ 		prefixes.push(string.slice(0, i+1)); 	} 	return prefixes; }
var max = Math.max.apply(null, numbers);   var min = Math.min.apply(null, numbers);   return numbers.map(function(number){     return (number - min) / (max - min);   }); }
var min = Math.min.apply(null, numbers);     var max = Math.max.apply(null, numbers);     var tmp = [];     for (var i = 0; i < numbers.length; i++){         tmp.push((numbers[i] - min) / (max - min));     }     return tmp; }
let min = null, max = null;     numbers.forEach(num => {         if (min === null || num < min) min = num;         if (max === null || num > max) max = num;     });     let div = max - min;     return numbers.map(num => (num - min) / div); }
var max = _.max(numbers);     var min = _.min(numbers);     return _.map(numbers, function(n){         return (n - min) / (max - min);     }); }
if(numbers.length < 2){         throw 'List of numbers must contain at least two elements';     }     var minValue = Math.min.apply(null, numbers);     var maxValue = Math.max.apply(null, numbers);     var diff = maxValue - minValue;     var rescaled = [];     for(var i = 0; i < numbers.length; i++){         rescaled.push((numbers[i] - minValue) / diff);     }     return rescaled; }
const min = Math.min(...numbers);   const max = Math.max(...numbers);   const difference = max - min;   const result = numbers.map(val => (val - min) / difference);   return result; }
var min = numbers[0];     var max = numbers[0];     for (var i=1; i<numbers.length; i++){         if (numbers[i] < min){             min = numbers[i];         }         if (numbers[i] > max){             max = numbers[i];         }     }     var diff = max - min;     var transformed = [];     for (var i=0; i<numbers.length; i++){         transformed.push((numbers[i] - min) / diff);     }     return transformed; }
const min = Math.min(...numbers); 	const max = Math.max(...numbers); 	const range = max - min; 	return numbers.map(n => (n - min) / range); }
var min = Math.min.apply(null, numbers);   var max = Math.max.apply(null, numbers);   var dif = max - min;   return numbers.map(function(v) { return ((v - min) / dif); }); }
var c = d3.scale.linear()         .domain([d3.min(numbers), d3.max(numbers)])         .range([0, 1]);     var output = [];     for (var x = 0; x < numbers.length; x++){         output.push(c(numbers[x]));     }     return output; }
let n = numbers.length;     if(n<2){         throw new Error("need at least two values");     }     let x_min = Math.min(...numbers);     let x_max = Math.max(...numbers);     let result = numbers.map(x => (x-x_min)/(x_max-x_min));     return result; }
return numbers.map(function(n){return n/max(numbers)}); }
let min = numbers[0];     let max = numbers[0];     for (let i = 1; i < numbers.length; i++){         if (numbers[i] < min){             min = numbers[i];         }         if (numbers[i] > max){             max = numbers[i];         }     }     return numbers.map(function(n){         return (n - min) / (max - min);     }); }
let res = [];   let sorted = numbers.sort();   let largest = sorted[sorted.length - 1];   let smallest = sorted[0];   for (let i = 0; i < numbers.length; i++){     res.push((numbers[i] - smallest) / (largest - smallest));   }   return res; }
var min = Math.min.apply(null, numbers);     var max = Math.max.apply(null, numbers);     var delta = max - min;     var rescaled = [];     for (var i = 0; i < numbers.length; i++){         rescaled.push((numbers[i] - min) / delta);     }     return rescaled; }
//we want the smallest number in the list to become 0 and the largest to become 1   let min = Math.min(...numbers);   let max = Math.max(...numbers);   let scale = max - min;   return numbers.map(x => (x - min) / scale); }
let min = Math.min(...numbers); 	let max = Math.max(...numbers); 	let scale = 1/(max-min); 	let scaled_numbers = numbers.map(function(value){ 		return scale*(value-min); 	}); 	return scaled_numbers; }
var min = numbers[0], max = numbers[0];     numbers.forEach(function(number){         if(number < min) min = number;         if(number > max) max = number;     });     return numbers.map(function(number){         return (number - min) / (max - min);     }); }
var min = math.min(numbers);   var max = math.max(numbers);   var range = max - min;   return numbers.map(function(num){     return (num - min) / range;   }); }
var mean = _.mean(numbers);   var deviations = _.map(numbers, function(n){     return Math.abs(n - mean);   });   return _.mean(deviations); }
var mean_value = mean(numbers); 	var absolute_deviations = numbers.map(function(x){ 		return Math.abs(x - mean_value); 	}); 	return mean(absolute_deviations); }
var n = numbers.length; 	var m = mean(numbers); 	var sum = 0; 	for(var i = 0; i < n; i++){ 		sum += Math.abs(numbers[i] - m); 	} 	return sum / n; }
//Calculate mean     let sum = 0;     for(let i = 0; i < numbers.length; i++){         sum += numbers[i];     }     let mean = sum / numbers.length;      //Calculate deviations     let deviations = [];     for(let i = 0; i < numbers.length; i++){         deviations.push(Math.abs(numbers[i] - mean));     }      //Calculate average deviation     let deviations_sum = 0;     for(let i = 0; i < deviations.length; i++){         deviations_sum += deviations[i];     }     let average_deviation = deviations_sum / deviations.length;      return average_deviation; }
var mean = mean_value(numbers);     var abs_diffs = numbers.map(function(x){         return Math.abs(x - mean);     });     return mean_value(abs_diffs); }
var center_point = mean(numbers); 	var deviation_list = []; 	for(var i=0; i<numbers.length; i++){ 		deviation_list.push(Math.abs(numbers[i] - center_point)); 	} 	return mean(deviation_list); }
var sum = 0; 	var mean = mean_of_numbers(numbers); 	var absolute_deviations = map(numbers, function(n){ 		var deviation = Math.abs(n - mean); 		sum += deviation; 		return deviation; 	}); 	var average_absolute_deviation = sum / absolute_deviations.length; 	return average_absolute_deviation; }
var mean_value = mean(numbers);   var squared_absolute_differences = [];   for (var i = 0; i < numbers.length; i++){     squared_absolute_differences.push(Math.abs(numbers[i] - mean_value));   }   return mean(squared_absolute_differences); }
var sum = sum_of_numbers(numbers); 	var mean = sum / numbers.length; 	var deviants = []; 	for (i=0; i<numbers.length; i++){ 		deviants.push(numbers[i] - mean); 	} 	var abs_deviants = []; 	for (i=0; i<deviants.length; i++){ 		abs_deviants.push(Math.abs(deviants[i])); 	} 	var MAD = mean_of_numbers(abs_deviants); 	return MAD; }
var mean = average(numbers);     var deviations = numbers.map(function(x){         return Math.abs(x - mean);     });     return average(deviations); }  module.exports = mean_absolute_deviation;
var sum = 0; 	var mean = mean(numbers); 	for(var i = 0; i < numbers.length; i++){ 		sum += Math.abs(numbers[i] - mean); 	} 	return sum / numbers.length; }
var sum = 0;   for(var i = 0; i < numbers.length; i++){     sum += numbers[i];   }   var mean = sum / numbers.length;   var diffs = [];   for(var i = 0; i < numbers.length; i++){     diffs.push(Math.abs(numbers[i] - mean));   }   var sum = 0;   for(var i = 0; i < diffs.length; i++){     sum += diffs[i];   }   return sum / diffs.length; }
var mean = math.mean(numbers); 	//now subtract this mean from each number and return the sum of these 	var sum = 0; 	for(i=0; i<numbers.length; i++){ 		sum += Math.abs(numbers[i] - mean); 	} 	return sum/numbers.length; }
var sum = 0; 	var mean = jStat.mean(numbers); 	for(var i = 0; i < numbers.length; i++){ 		sum += Math.abs(numbers[i] - mean); 	} 	return sum / numbers.length; }
var mean = arithmetic_mean(numbers);   var abs_devs = [];   for(var i = 0; i < numbers.length; i++){     abs_devs.push(Math.abs(numbers[i] - mean));   }   return arithmetic_mean(abs_devs); }
var sum = 0; 	var mean = mean(numbers); 	var l = numbers.length; 	for(var i = 0; i < l; i++){ 		sum += Math.abs(numbers[i] - mean); 	} 	return sum / l; }
var mean = compute_mean(numbers); 	var absolute_diffs = numbers.map(function(element){ 		return Math.abs(element - mean); 	}); 	return compute_mean(absolute_diffs); }
var mean_absolute_deviation = 0;     var mean = numbers.mean();     numbers.forEach(function(number){         mean_absolute_deviation += Math.abs(number - mean);     });     return mean_absolute_deviation / numbers.length; }
if (n <= 0) return;   let result = 1;   while (n > 0) {     result *= factorial(n);     n--;   }   return result; }
var factorial = 1;     var current = 1;     while(current <= n){         factorial *= factorial_helper(current);         current += 1;     }     return factorial; }
if (n < 0){         return null;     }     else if (n == 0 || n == 1){         return 1;     }     else{         let factor = 1;         for (let i = n; i > 0; i--){             factor *= i;         }         return factor;     } }
return n == 0 ? 1 : n*special_factorial(n-1); }
// solution 1   // let special_factorial = 1;   // for (let i = 1; i <= n; i++){   //   let factorial = 1;   //   for (let k = 1; k <= i; k++){   //     factorial *= k;   //   }   //   special_factorial *= factorial;   // }   // return special_factorial;    // solution 2   if (n === 1) return 1;   return n * special_factorial(n-1); }
var factorial = 1;     for (var i = n; i > 0; i--) {         factorial *= i;     }     return factorial; }
let factoria = 1;     for(let i = 1; i <= n; i++){         factoria *= i;     }     return factoria * (n-1); }
var factor = 1;     for (var i = n; i > 0; i--) {         factor *= i;     }     return factor; }
var a = 1, b = 2, c = 1;     while (b <= n) {       a *= b;       b++;       c *= b;       b++;     }     return a * c; }
return n==0 ? 1 : n * special_factorial(n-1); }
if (n == 0){     return 1;   }   else{     return n * special_factorial(n-1);   } }
return 0; }
return n > 0 ? n * special_factorial(n-1) : 1; }
var result = 1;     var i = 1;     while (i <= n){         result *= i;         i++;     }     return result; }
let factorial = 1;     for (let i = n; i > 0; i--) {         factorial *= i;     }     return factorial; }
if (n < 0) {     return "n should be positive"   }   else if (n === 0 || n === 1) {     return 1   }   else {     let output = 1     for (let i = n; i > 0; i--) {       output *= i     }     for (let i = n - 1; i > 0; i--) {       output *= i     }     return output   } }
return factorial(n) * factorial(n-1); }
let value = 1;     for(let i = 1; i <= n; i++){         value *= factorial(i);     }     return value; }
var result= 1;   for(var i=n; i>=1; i--){     result*=i;   }   return result; }
var month = date.slice(0,2);     var day = date.slice(3,5);     var year = date.slice(6,10);     if (date.length < 10 || date.length > 10) return false;     if (date.slice(2,3) != '-' || date.slice(5,6) != '-') return false;     if (year < 0) return false;     if (month < 1 || month > 12) return false;     if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {         if (day < 1 || day > 31) return false;     } else if (month == 4 || month == 6 || month == 9 || month == 11) {         if (day < 1 || day > 30) return false;     } else if (month == 2) {         if (day < 1 || day > 29) return false;     }     return true; }
let valid = true;     if(date.length == 0){         valid = false;     }     let date_split = date.split('-');     if(date_split.length != 3){         valid = false;     }     else{         if(isNaN(date_split[0]) || isNaN(date_split[1]) || isNaN(date_split[2])){             valid = false;         }         else{             date_split[0] = parseInt(date_split[0]);             date_split[1] = parseInt(date_split[1]);             date_split[2] = parseInt(date_split[2]);             if(date_split[0] < 1 || date_split[0] > 12){                 valid = false;             }             else{                 if(date_split[0] == 2){                     if(date_split[1] < 1 || date_split[1] > 29){                         valid = false;                     }                 }                 else if(date_split[0] == 1 || date_split[0] == 3 || date_split[0] == 5 || date_split[0] == 7 || date_split[0] == 8 || date_split[0] == 10 || date_split[0] == 12){                     if(date_split[1] < 1 || date_split[1] > 31){                         valid = false;                     }                 }                 else{                     if(date_split[1] < 1 || date_split[1] > 30){                         valid = false;                     }                 }             }         }     }     return valid; }
var d = date.split('-');   if (d.length != 3) return false;   if (d[0] < 1 || d[0] > 12) return false;   if (d[1] < 1 || d[1] > 31) return false;   if ((d[0] == 4 || d[0] == 6 || d[0] == 9 || d[0] == 11) && d[1] > 30) return false;   if (d[0] == 2 && d[1] > 29) return false;   return true; }
if (date.length === 0){         return false;     }     var dateArr = date.split('-');     if (dateArr.length !== 3){         return false;     }     if (dateArr[0] > 12 || dateArr[0] < 1 || isNaN(dateArr[0])){         return false;     }     if (dateArr[1] > 31 || dateArr[1] < 1 || isNaN(dateArr[1])){         return false;     }     if (dateArr[0] == 2 && dateArr[1] > 29 || dateArr[0] == 2 && dateArr[1] < 1){         return false;     }     if (dateArr[0] == 4 && dateArr[1] > 30 || dateArr[0] == 6 && dateArr[1] > 30 || dateArr[0] == 9 && dateArr[1] > 30 || dateArr[0] == 11 && dateArr[1] > 30){         return false;     }     if (dateArr[2].length !== 4 || isNaN(dateArr[2])){         return false;     }     if (dateArr[0] > 12 || dateArr[0] < 1 || isNaN(dateArr[0])){         return false;     }     return true; }
return /^(?:(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])-[12][0-9]{3})$/.test(date); }
}     //Write a function named get_string_length which returns the length of a given string.   // The length is equal to the number of Unicode characters in the string.   // For example, the length of the string "hello world" is 11.   // Please note that white spaces are included in the length of the string.   // For example, the length of the string "hello world" is 11.   // Please note that white spaces are included in the length of the string.   function get_string_length(str){        }     //Write a function named great_than which takes two arguments,   // a and b, and returns True if a is greater than b and False otherwise.   function great_than(a,b){        }     //Write a function named less_than which takes two arguments,   // a and b, and returns True if a is less than b and False otherwise.   function less_than(a,b){        }     //Write a function named equal_to which takes two arguments,   // a and b, and returns True if a is equal to b and False otherwise.   function equal_to(a,b){        }     //Write a function named greater_than_or_equal_to which takes two arguments,   // a and b, and returns True if a is greater than or equal to b and False otherwise.   function greater_than_or_equal_to(a,b){        }     //Write a function named less_than_or_equal_to which takes two arguments,   // a and b, and returns True if a is less than or equal to b and False otherwise.   function less_than_or_equal_to(a,b){        }     //Write a function named is_even which takes one argument, a, and returns True if a is even and False otherwise.   function is_even(a){        }     //Write a function named is_odd which takes one argument, a, and returns True if a is odd and False otherwise.   function is_odd(a){        }     //Write a
if (date === '') return false;     const dateParts = date.split('-');     if (dateParts.length !== 3) return false;     for (let d of dateParts) {         if (isNaN(d)) return false;     }     let [m, d, y] = dateParts;     if (m < 1 || m > 12) return false;     if (m === 2) {         if (d < 1 || d > 29) return false;     } else if (m % 2 === 0) {         if (d < 1 || d > 30) return false;     } else {         if (d < 1 || d > 31) return false;     }     return true; }
let day = date.slice(0,2);   let month = date.slice(3,5);   let year = date.slice(6,10);   return date.length > 0 && date.includes('-') && Number(year) >= 2000 && Number(month) >= 1 && Number(month) <= 12 && Number(day) >= 1 && Number(day) <= 31 && (Number(month) === 1 || Number(month) === 3 || Number(month) === 5 || Number(month) === 7 || Number(month) === 8 || Number(month) === 10 || Number(month) === 12 ? Number(day) <= 31 : Number(month) === 4 || Number(month) === 6 || Number(month) === 9 || Number(month) === 11 ? Number(day) <= 30 : Number(month) === 2 ? Number(day) <= 29 : false) }
let a = date.split('-')     if(a.length !== 3)         return false     let mon = a[0]     let day = a[1]     let year = a[2]     if(mon <= 0 || mon > 12)         return false     if(mon === '02'){         if(day < 1 || day > 29)             return false     }     else if(mon === '01' || mon === '03' || mon === '05' || mon === '07' || mon === '08' || mon === '10' || mon === '12'){         if(day < 1 || day > 31)             return false     }     else{         if(day < 1 || day > 30)             return false     }     if(year.length !== 4)         return false     return true }
}
// your code here 	var arr = date.split('-'); 	var months = ["01", "03", "05", "07", "08", "10", "12"]; 	var days = ["04", "06", "09", "11"]; 	if (arr.length !== 3 || arr[2].length !== 4) { 		return false; 	} else if (arr[0] < 1 || arr[0] > 12) { 		return false; 	} else if (months.indexOf(arr[0]) !== -1 && (arr[1] < 1 || arr[1] > 31)) { 		return false; 	} else if (days.indexOf(arr[0]) !== -1 && (arr[1] < 1 || arr[1] > 30)) { 		return false; 	} else if (arr[0] === "02" && (arr[1] < 1 || arr[1] > 29)) { 		return false; 	} else { 		return true; 	} }
let check = true;     if (date === "") {         check = false;     } else {         let arrDate = date.split("-");         if (arrDate.length !== 3) {             check = false;         } else {             if (arrDate[1] > 31) {                 check = false;             } else if (arrDate[1] > 30 && arrDate[0] % 2 === 0) {                 check = false;             } else if (arrDate[1] > 29 && arrDate[0] % 2 === 1) {                 check = false;             } else if (arrDate[0] > 12) {                 check = false;             }         }     }     return check; }
var dateArr = date.split('-');     if (dateArr.length !== 3){         return false;     }     var month = Number(dateArr[0]);     var day = Number(dateArr[1]);     var year = Number(dateArr[2]);     if(month < 1 || month > 12){         return false;     }     if(year < 1000 || year > 10000){         return false;     }     if(day < 1 || day > 31){         return false;     }     if(month === 2){         if(day < 1 || day > 29){             return false;         }     }     if(month === 4 || month === 6 || month === 9 || month === 11){         if(day < 1 || day > 30){             return false;         }     }     return true; } valid_date('04-30-2020');
var check_date = date.split('-');     var day = parseInt(check_date[0]);     var month = parseInt(check_date[1]);     var year = parseInt(check_date[2]);     if (day<1 || day>31 || month<1 || month>12 || year<1 || year>9999){         return false;     }     if(month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12){         if(day < 1 || day > 31){             return false;         }     }     if(month == 4 || month == 6 || month == 9 || month == 11){         if(day < 1 || day > 30){             return false;         }     }     if(month == 2){         if(day < 1 || day > 29){             return false;         }     }     return true; }
return /^(0[1-9]|1[0-2])-(0[1-9]|[12]\d|3[01])-(\d{4})$/.test(date); }
return date.match(/\d{2}-\d{2}-\d{4}/) ? true : false; }
if(date.length == 0){         return false;     }     var parts = date.split('-');     if(parts.length != 3){         return false;     }     var month = parts[0];     var day = parts[1];     var year = parts[2];     if(month.length == 0 || day.length == 0 || year.length == 0){         return false;     }     if(month < 1 || month > 12){         return false;     }     if(day < 1 || day > 31){         return false;     }     if(month == 2 && day > 29){         return false;     }     if(month == 4 || month == 6 || month == 9 || month == 11){         if(day > 30){             return false;         }     }     return true; }
date = date.split('-');     if (date.length !== 3) return false;     let [month, day, year] = date;     if (day.charAt(0) === '0') day = day.charAt(1);     if (month.charAt(0) === '0') month = month.charAt(1);     if (month > 12 || day > 31 || month < 1 || day < 1) return false;     if (month === '2' && day > 29) return false;     if (['4', '6', '9', '11'].includes(month) && day > 30) return false;     return true; }
var dateArray = date.split('-'); 	if (dateArray.length != 3) return false; 	var month = dateArray[0]; 	var day = dateArray[1]; 	var year = dateArray[2]; 	if (day < 1 || day > 31) return false; 	if (month < 1 || month > 12) return false; 	if (year < 1) return false; 	if (month === "02" && day > 29) return false; 	if (month === "04" && day > 30) return false; 	if (month === "06" && day > 30) return false; 	if (month === "09" && day > 30) return false; 	if (month === "11" && day > 30) return false; 	return true; }
let counts = {};     for (let i = 0; i < lst.length; i++) {         counts[lst[i]] = (counts[lst[i]] || 0) + 1;     }     let keys = Object.keys(counts);     keys.sort(function(a, b){return counts[b]-counts[a]});     let winner = parseInt(keys[0]);     if (winner >= counts[winner]) {         return winner;     } else {         return -1;     } }
//loop through array     //if a number is greater than zero and appears in the array more than its self, return the greatest number in the array     //if no such number exists return -1     let frequency = {};     let maxFreq = 0;     let maxInt = -1;     for(let i = 0; i < lst.length; i++){         frequency[lst[i]] = frequency[lst[i]] + 1 || 1;         if(frequency[lst[i]] >= lst[i] && lst[i] > maxInt){             maxInt = lst[i];         }     }     return maxInt; }
lst.sort((a,b)=>a-b);     if(lst[0]>lst.length) return -1;     let ans = 0;     let count = 0;     let last = 0;     for(let i = 0; i < lst.length; i++){         if(lst[i]>lst.length) break;         if(lst[i]===last){             count++;         }         else{             last = lst[i];             count = 1;         }         if(count >= last){             ans = last;         }     }     return ans; }
let hash = {};   let result = -1;   for (let x of lst) {     if (hash[x]) {       hash[x]++;     } else {       hash[x] = 1;     }   }   for (let key in hash) {     if (key <= hash[key] && result < key) {       result = key;     }   }   return result; }
var counts = {};     var greatest = -1;     for(var i = 0; i < lst.length; i++){         var num = lst[i];         counts[num] = counts[num] ? counts[num]+1 : 1;         if(counts[num] >= num && num > greatest){             greatest = num;         }     }     return greatest; }
// get count of the highest number in the list   let highestNum = Math.max(...lst);   //count the frequency of the highest number in the list   let numCount = 0;   for (let i = 0; i < lst.length; i++) {     if (lst[i] === highestNum) {       numCount++;     }   }   // the value of the frequency must be greater than or equal to the value of the highest number   if (numCount >= highestNum) {     return highestNum;   } else {     return -1;   } }
let lstSort = lst.sort((a,b) => a - b);   for (let i = 0; i < lstSort.length; i++) {     let val = lstSort[i];     let valIndex = i;     let valCount = 0;     for (let j = i; j < lstSort.length; j++) {       if (lstSort[j] === val) {         valCount++;       }     }     if (valCount >= val) {       return val;     }   }   return -1; }
let obj = {}   for(let i=0; i<lst.length; i++){     obj[lst[i]] ? obj[lst[i]]++ : obj[lst[i]] = 1   }   let ans = -1   let keys = Object.keys(obj)   for(let i=0; i<keys.length; i++){     if(Number(keys[i]) <= obj[keys[i]] && Number(keys[i]) > ans){       ans = Number(keys[i])     }   }   return ans }
var sortedList = lst.sort(function(a, b){return a-b});     for (var i = 0; i < sortedList.length; i++) {         if (sortedList[i] === sortedList[i+1]) {             var item = sortedList[i];             var counter = 0;             var index = sortedList.indexOf(item);             while (index != -1) {                 counter++;                 index = sortedList.indexOf(item, index + 1);             }             if (counter >= item) {                 return item;             }         }     }     return -1; }
let myObj = {};   let myArray = [];   for (i=0; i<lst.length; i++){     if (myObj[lst[i]] === undefined){       myObj[lst[i]] = 1;     } else {       myObj[lst[i]]++;     }   }   for (var key in myObj){     myArray.push(key);   }   let myArrayInt = myArray.map(x => parseInt(x));   let sortedArray = myArrayInt.sort((a,b) => b-a);   for (i=0; i<sortedArray.length; i++){     if (myObj[sortedArray[i]] >= sortedArray[i]){       return sortedArray[i];     }   }   return -1; }
if (lst.length === 0) return -1;     let lstSorted = lst.sort((a, b) => a - b);     let maxFrequency = 0;     let value = -1;     for (let i = 0; i < lstSorted.length; i++) {         let element = lstSorted[i];         let freq = lstSorted.filter(v => v === element).length;         if (freq >= element && freq >= maxFrequency) {             maxFrequency = freq;             value = element;         }     }     return value; }
let sortedArray = lst.sort((a,b) => a - b);   let finalArray = [];   let count = 0;   let mostFrequent;   for(let i = 0; i < sortedArray.length; i++){     count = 0;     for(let j = 0; j < sortedArray.length; j++){       if(sortedArray[i] === sortedArray[j]){         count++;       }     }     if(count >= sortedArray[i]){       finalArray.push(sortedArray[i]);     }   }   if(finalArray.length === 0){     return -1;   }else{     let max = Math.max(...finalArray);     return max;   } }
// your code here }
if (lst.length == 0) return -1;     let result = -1;     let counts = {};     for (let i = 0; i < lst.length; i++) {         counts[lst[i]] = (counts[lst[i]] || 0) + 1;     }     for (const i in counts) {         if (counts[i] >= i && i > result) {             result = i;         }     }     return result; }
let obj = {}     let ans = -1;     lst.forEach(ele => {         if(obj[ele]){             obj[ele] = obj[ele] + 1         } else {             obj[ele] = 1         }     })     Object.keys(obj).forEach(ele => {         if(obj[ele] >= parseInt(ele) && parseInt(ele) > ans){             ans = parseInt(ele)         }     })     return ans }
if(!lst.length) return -1;     let frequencies = lst.reduce((a,b) => {         a[b] = a[b] ? a[b] + 1 : 1;         return a;     }, {});     let maxValue = -1;     Object.keys(frequencies).forEach(key => {         if(frequencies[key] >= parseInt(key) && parseInt(key) > maxValue) maxValue = parseInt(key);     });     return maxValue; }
return Math.max(...lst.filter(item => lst.filter(i => i == item).length >= item)) || -1; }
let numCount = {};   for (let i = 0; i < lst.length; i++) {     if (numCount[lst[i]] === undefined) {       numCount[lst[i]] = 1;     } else {       numCount[lst[i]] += 1;     }   }   for (let i = lst.length; i > 0; i--) {     if (numCount[i] >= i) {       return i;     }   }   return -1; }
let max = -1;     for(let i = 0; i < lst.length; i++){         if(lst.filter(a => a == lst[i]).length >= lst[i] && lst[i] > max){             max = lst[i];         }     }     return max; }
let minDiff = Math.abs(numbers[0] - numbers[1]);     let smallestFirst = numbers[0] > numbers[1] ? numbers[1] : numbers[0];     let smallestSecond = numbers[0] > numbers[1] ? numbers[0] : numbers[1];     for (let i = 0; i < numbers.length; i++){         for (let j = i + 1; j < numbers.length; j++){             if (Math.abs(numbers[i] - numbers[j]) < minDiff){                 minDiff = Math.abs(numbers[i] - numbers[j]);                 smallestFirst = numbers[i] > numbers[j] ? numbers[j] : numbers[i];                 smallestSecond = numbers[i] > numbers[j] ? numbers[i] : numbers[j];             }         }     }     return [smallestFirst, smallestSecond]; }
var smallest = numbers[0] - numbers[1];     var result = [];     for(var i = 0; i < numbers.length; i++){         for(var j = i+1; j < numbers.length; j++){             if(Math.abs(numbers[i] - numbers[j]) < smallest){                 smallest = Math.abs(numbers[i] - numbers[j]);                 result[0] = numbers[i];                 result[1] = numbers[j];             }         }     }     return result; }
let res = [];   let min = Infinity;   let l, r;   for (let i = 0; i < numbers.length; i++) {     l = numbers[i];     for (let j = i + 1; j < numbers.length; j++) {       r = numbers[j];       if (Math.abs(l - r) < min) {         min = Math.abs(l - r);         res = [l, r];       }     }   }   return res; }
var sorted_array = sort_array(numbers);     var closest_numbers = [];     for(var i = 0; i < sorted_array.length; i++){         if(i == sorted_array.length - 1){             return closest_numbers;         }         var diff = sorted_array[i+1] - sorted_array[i];         closest_numbers.push([sorted_array[i], sorted_array[i+1], diff]);     }     var min = closest_numbers[0][2];     var min_index = 0;     for(var i = 1; i < closest_numbers.length; i++){         if(closest_numbers[i][2] < min){             min = closest_numbers[i][2];             min_index = i;         }     }     return [closest_numbers[min_index][0], closest_numbers[min_index][1]]; }
var l = numbers.length;     var smallest = [numbers[0], numbers[1]];     var smallest_diff = smallest[1] - smallest[0];     for (var i = 0; i < l; i++){         for (var j = i + 1; j < l; j++){             var diff = numbers[j] - numbers[i];             if (diff < smallest_diff){                 smallest = [numbers[i], numbers[j]];                 smallest_diff = diff;             }         }     }     return smallest; }
var min=numbers[0];     var minIndex=0;     var secondMin=numbers[1];     var secondMinIndex=1;     for(var i=1;i<numbers.length;i++){         if(numbers[i]<min){             secondMin=min;             secondMinIndex=minIndex;             min=numbers[i];             minIndex=i;         }else if(numbers[i]<secondMin){             secondMin=numbers[i];             secondMinIndex=i;         }     }     if(minIndex<secondMinIndex){         return(min,secondMin);     }else{         return(secondMin,min);     } }
for (let i = 0; i < numbers.length; i++) {         let diff = numbers[i] - numbers[i + 1];         let absDiff = Math.abs(diff);         // console.log(absDiff);         if (absDiff < 0.5){             let smallest = Math.min(numbers[i], numbers[i + 1]);             let largest = Math.max(numbers[i], numbers[i + 1]);             return (smallest, largest);         }     } }
var a = numbers[0];     var b = numbers[1];     for (var i = 0; i < numbers.length; i++){         for (var j = i+1; j < numbers.length; j++){             if (Math.abs(numbers[i] - numbers[j]) < Math.abs(a - b)){                 a = numbers[i];                 b = numbers[j];             }         }     }     return (a, b); }
var difflist=[];     var diff;     for(var i=0;i<numbers.length-1;i++){         diff=numbers[i+1]-numbers[i];         difflist.push(diff);     }     var smallnum=Math.min.apply(null,difflist);     var index=difflist.indexOf(smallnum);     var num1=numbers[index];     var num2=numbers[index+1];     var result=[num1,num2];     return result; }
var closest_numbers = [];     var closest_diff = -1;     for (i = 0; i < numbers.length; i++){         for (j = i + 1; j < numbers.length; j++){             var diff = Math.abs(numbers[i] - numbers[j]);             if (closest_diff == -1 || diff < closest_diff){                 closest_diff = diff;                 closest_numbers = [numbers[i], numbers[j]];             }         }     }     if (closest_numbers[0] > closest_numbers[1]){         var temp = closest_numbers[0];         closest_numbers[0] = closest_numbers[1];         closest_numbers[1] = temp;     }     return closest_numbers; }
const len = numbers.length;     let a = 0;     let b = 1;     let smallestDiff = Math.abs(numbers[0] - numbers[1]);     for(let i = 0; i < len; i++){         for(let j = i+1; j < len; j++){             let tempDiff = Math.abs(numbers[i] - numbers[j]);             if(tempDiff < smallestDiff){                 smallestDiff = tempDiff;                 a = i;                 b = j;             }         }     }     let first = numbers[a];     let second = numbers[b];     if(first > second){         let temp = first;         first = second;         second = temp;     }     return {smallest: first, largest: second}; }
// First grab the array length.     var array_length = numbers.length;     // Create a variable to hold the closest numbers.     var closest_numbers = [0, 0];     // Start the closest_diff at infinity.     var closest_diff = Number.POSITIVE_INFINITY;     // Loop through each number.     for (var i = 0; i < array_length; i++){         // Grab the current number.         var current_number = numbers[i];         // If the current number is the last number in the array, skip it.         if (i === array_length - 1){             break;         }         // Otherwise grab the next number in the array.         var next_number = numbers[i + 1];         // Calculate the current difference between the two numbers.         var current_diff = Math.abs(current_number - next_number);         // If the current difference is less than the closest_diff, make it the new closest_diff,         // and set the closest_numbers to these two numbers.         if (current_diff < closest_diff){             closest_diff = current_diff;             closest_numbers = [current_number, next_number];         }     }     // Return the closest_numbers.     return closest_numbers; }
var smallest = numbers[0]; 	var largest = numbers[0]; 	var difference = []; 	var newList = []; 	for(i=0; i<numbers.length; i++){ 		var value = numbers[i]; 		if(value < smallest){ 			smallest = value; 		} 		if(value > largest){ 			largest = value; 		} 	} 	for(i=0; i<numbers.length; i++){ 		if(numbers[i] == smallest){ 			continue; 		} 		difference.push(largest - numbers[i]); 	} 	for(i=0; i<difference.length; i++){ 		if(i == 0){ 			newList.push(difference[i]); 		} 		if(difference[i] < newList[0]){ 			newList = []; 			newList.push(difference[i]); 		} 		if(difference[i] == newList[0]){ 			newList.push(difference[i]); 		} 	} 	for(i=0; i<numbers.length; i++){ 		for(j=0; j<newList.length; j++){ 			if(largest - numbers[i] == newList[j]){ 				return smallest + ", " + numbers[i]; 			} 		} 	} }
if(!Array.isArray(numbers)){         throw new Error("Parameter must be an array");     }     if(numbers.length < 2){         throw new Error("Parameter must have at least two elements");     }     var minDiff = Math.abs(numbers[0] - numbers[1]);     var minIndexes = [0, 1];     for(var i = 0; i < numbers.length - 1; i++){         var diff = Math.abs(numbers[i] - numbers[i + 1]);         if(diff < minDiff){             minDiff = diff;             minIndexes = [i, i + 1];         }     }     var smaller = numbers[minIndexes[0]];     var larger = numbers[minIndexes[1]];     if(larger < smaller){         smaller = numbers[minIndexes[1]];         larger = numbers[minIndexes[0]];     }     return {         smaller: smaller,         larger: larger     }; }
let diff = [];     for (let i = 0; i < numbers.length - 1; i++) {         diff.push(Math.abs(numbers[i] - numbers[i + 1]));     }     let min = Math.min(...diff);     let index = diff.indexOf(min);     return (numbers[index], numbers[index + 1]); }
var min = Math.abs(numbers[0] - numbers[1]);     var result = [];     for (var i = 0; i < numbers.length; i++){         if(i+1 < numbers.length){             if(min > Math.abs(numbers[i] - numbers[i+1])){                 min = Math.abs(numbers[i] - numbers[i+1]);                 result[0] = numbers[i];                 result[1] = numbers[i+1];             }         }     }     return result; }
numbers.sort(function(a, b){return a-b});     minDiff = Math.abs(numbers[0] - numbers[1]);     minNumber1 = numbers[0];     minNumber2 = numbers[1];     for (i = 0; i < numbers.length - 1; i++){         diff = Math.abs(numbers[i] - numbers[i+1]);         if (diff < minDiff){             minDiff = diff;             minNumber1 = numbers[i];             minNumber2 = numbers[i+1];         }     }     return [minNumber1, minNumber2]; }
numbers.sort();     var closest_distance = Math.abs(numbers[0] - numbers[1]);     var first_number = numbers[0];     var second_number = numbers[1];     for (var i = 0; i < numbers.length - 1; i++) {         if (Math.abs(numbers[i] - numbers[i + 1]) < closest_distance) {             closest_distance = Math.abs(numbers[i] - numbers[i + 1]);             first_number = numbers[i];             second_number = numbers[i + 1];         }     }     return(first_number, second_number); }
let min = Number.MAX_VALUE; 	let closest_elements = [numbers[0], numbers[1]]; 	for(let i = 0; i < numbers.length; i++){ 		for(let j = i + 1; j < numbers.length; j++){ 			let diff = Math.abs(numbers[i] - numbers[j]); 			if(diff < min){ 				min = diff; 				closest_elements = [numbers[i], numbers[j]]; 			} 		} 	} 	return closest_elements; }
// var result = [];     // for(var i = 0; i < l1.length; i++){     //     for(var j = 0; j < l2.length; j++){     //         if(l1[i] === l2[j]){     //             result.push(l1[i]);     //         }     //     }     // }     // return result;     return l1.filter(function(n){         return l2.indexOf(n) != -1;     }); }
return array_union(l1, l2).filter(function(elem){     return array_intersection(l1, l2).includes(elem);   }); }
return l1.filter(l => l2.includes(l)).sort().reduce((a, b) => a === b ? a : [a, b], []) }
var result = [];   var x = 0;   var y = 0;   var input1 = l1.sort(sortNumber);   var input2 = l2.sort(sortNumber);   for(x = 0; x < input1.length; x++){     for(y = 0; y < input2.length; y++){       if(input1[x] === input2[y]){         result.push(input1[x]);       }     }   }   var result = result.filter(function(item, i, ar){ return ar.indexOf(item) === i; });   return result; }
var a1 = l1.filter(value => l2.includes(value)).sort((a, b) => a - b);     return [...new Set(a1)]; }
var l3 = l1.concat(l2);     return l3.filter(function(item, pos) {         return l3.indexOf(item) == pos;     }); }
let l12 = [];     let l21 = [];     for(let i = 0; i < l1.length; i++){         for(let j = 0; j < l2.length; j++){             if(l1[i] === l2[j]){                 l12.push(l1[i]);             }         }     }     l12.sort();     for(let i = 0; i < l2.length; i++){         for(let j = 0; j < l1.length; j++){             if(l2[i] === l1[j]){                 l21.push(l2[i]);             }         }     }     l21.sort();     let common12 = [];     let common21 = [];     let common = [];     for(let i = 0; i < l12.length; i++){         if(l12[i] === l12[i + 1]){             continue;         }else{             common12.push(l12[i]);         }     }     for(let i = 0; i < l21.length; i++){         if(l21[i] === l21[i + 1]){             continue;         }else{             common21.push(l21[i]);         }     }     for(let i = 0; i < common12.length; i++){         for(let j = 0; j < common21.length; j++){             if(common12[i] === common21[j]){                 common.push(common12[i]);             }         }     }     return common; }
return l1.filter(i => l2.includes(i)); }
return (l1.concat(l2)).sort().filter( function(el, i, arr){ return (arr.indexOf(el) == i); } ); }
var c=unique(l1).filter(v=>unique(l2).includes(v))     return c }
return Array.from(new Set(l1.filter(x => l2.includes(x)))); }
var result = [];     var l1 = l1.sort();     var l2 = l2.sort();     var i = 0;     var j = 0;     while(i < l1.length && j < l2.length){         if(l1[i] < l2[j]){             i++;         }else if(l1[i] > l2[j]){             j++;         }else{             result.push(l1[i]);             i++;             j++;         }     }     return result; }
let union = l1.concat(l2); 	union = [...new Set(union)]; 	let common = []; 	union.forEach(num => { 		if(l1.includes(num) && l2.includes(num)){ 			common.push(num); 		} 	}); 	return common; }
return unique(l1.filter(i => l2.includes(i))); }
//list1 and list2 are sorted lists of numbers.     let res = [];     let curr1 = 0;     let curr2 = 0;     while(curr1 < l1.length && curr2 < l2.length){         if(l1[curr1] < l2[curr2]){             curr1 += 1;         }         else if(l1[curr1] > l2[curr2]){             curr2 += 1;         }         else{             res.push(l1[curr1]);             curr1 += 1;             curr2 += 1;         }     }     return res; }
let common = [];     for(let i = 0; i < l1.length; i++){         for(let j = 0; j < l2.length; j++){             if(l1[i] === l2[j]){                 common.push(l1[i]);             }         }     }     console.log(common);     return common; }
return l1.filter(function(elem){         return l2.indexOf(elem) > -1;     }).sort(function(a, b){return a - b}); }
var l3 = [];     var ll3 = 0;     for (i = 0; i < l1.length; i++){         for (j = 0; j < l2.length; j++){             if (l1[i] == l2[j]){                 l3[ll3] = l1[i];                 ll3 = ll3 + 1;             }         }     }     l3.sort();     for (var i = 0; i < l3.length - 1; i++){         if (l3[i] == l3[i + 1]){             l3.splice(i, 1);             i = i - 1;         }     }     return l3; }
return l1.filter(e => l2.includes(e)).sort((a, b) => a - b).filter((e, i, arr) => arr.indexOf(e) === i); }
var hash = crypto.createHash('md5');     hash.update(text);     var hex = hash.digest('hex');     return hex; }
if (text.length == 0) {         return "None";     } else {         var md5 = crypto.createHash('md5');         md5.update(text);         return md5.digest('hex');     } }
if (text.length == 0) return None; 	return md5(text); }
if(text === ''){     return null;   }   return hex_md5(text); }
return md5(text); }
var hash = crypto.createHash('md5');     hash.update(text);     return hash.digest('hex'); }
return crypto.createHash('md5').update(text).digest('hex'); }
let hash = crypto.createHash('md5');   hash.update(text);   return hash.digest('hex'); }
if (text.length === 0) {         return None;     } else {         return CryptoJS.MD5(text).toString();     } }
if(text === '') return null;   return md5(text); }
//md5 hash function object 	var md5 = require('MD5'); 	return md5(text); }
if (text === ''){         return;     }     return crypto.createHash('md5').update(text).digest('hex'); }
if(!text){         return null;     }     let md5 = require('md5');     return md5(text); }
if (text.length == 0) {         return null;     }     return md5(text); }
var crypto = require('crypto');     return crypto.createHash('md5').update(text).digest('hex'); }
var crypto = require('crypto');   if (text === ""){     return null;   }   var hash = crypto.createHash('md5').update(text).digest('hex');   return hash; }
if(text == ''){     return null;   }   var md5 = require('crypto-js/md5');   return md5(text).toString(); }
return !text ? null : require('crypto').createHash('md5').update(text).digest('hex'); }
//we count from 1 to 1000 how many times "1" is found     var count = 0;     for(var i = 1; i <= Math.pow(10, n) - 1; i++){         count += count_one(i.toString());     }     return count; }
var res = 0;     var total = Math.pow(10, n) - 1;     for(var i = 1; i < n; i++){         var high = Math.pow(10, i) - 1;         var low = total - high;         res += high * low;     }     res += total;     return res; }
if(n == 1){     return 2;   }   if(n < 1){     return 0;   }   let count = 0;   let nums = Array(n).fill(0);   for(let i = 0; i < nums.length; i++){     if(i === 0 || i === nums.length - 1){       nums[i] = 1;     }     if(i > 0 && i < nums.length - 1){       nums[i] = 0;     }     count += parseInt(nums.join(''));   }   return count; }
var count = 0;     for(var i = 1; i <= Math.pow(10, n)-1; i++){         var string = i.toString();         if(string[0] == 1 || string[string.length-1] == 1){             count++;         }     }     return count; }
let count = 0;     for(let i = 1; i <= n; i++){         count += Math.pow(10, i - 1);     }     return count; }
//... }
if(n == 1){ 		return 1; 	} 	var num = Math.pow(10, n-1); 	return num + 9*(num-1); }
const start = count_start_one(n);   const end = count_end_one(n);   console.log(start);   console.log(end);   return start + end - 9; }
if(n === 0) return 0;     if(n === 1) return 10;     if(n === 2) return 10 * 9 + 9 * 9;     var start_end = 10;     for(var i = 1; i < n; i++){         start_end += Math.pow(10, i) + 9 * Math.pow(10, i - 1);     }     return start_end; }
if(n === 0){         return 0;     }     if(n === 1){         return 1;     }     return 9 * Math.pow(10,n-1) + 10 * (n-1) * Math.pow(10,n-2); }
if(n == 1){         return 10;     }     return (9*ten_pow(n-1)) + starts_one_ends(n-1); }
let arr = new Array(n+1).fill(0);     arr[0] = 0;     arr[1] = 1;     for(let i = 2; i <= n; i++){         arr[i] = 10 * arr[i-1] + Math.pow(10, i-1);     }     return arr[n]; }
var res = 0;   for(var i = 0; i < n; i++){     res += Math.pow(10, i);   }   return 2 * res; }
if(n==1){     return 10;   }   if(n>1){     return ends_one(n)+starts_one(n);   }   else{     return "Error!!!!";   } }
if(n===1){     return 1;   }   if(n===2){     return 10;   }   return starts_one_ends(n-1)+10*starts_one_ends(n-2); }
var count = 0;     for(var i = 1; i <= n; i++){         count += 9 * Math.pow(10, i - 1);     }     return count; }
var ans = (Math.pow(10, n-1) - Math.pow(9, n-1)) + (Math.pow(10, n-1) - Math.pow(9, n-1))*(n-1);     return ans; }
if(n === 1){ 		return 10; 	}else{ 		let smaller = starts_one_ends(n-1); 		return (smaller - 1) * 9 + smaller; 	} }
var result = 9; 	for(var i = 1; i < n; i++){ 		result *= 10 - i; 	} 	return result; }
var arr = l.toString().split(',');     var key = [];     for(var i = 0; i < arr.length - 1; i++){         key.push(arr[i] - arr[i + 1]);     }     var count = 0;     for(var j = 0; j < key.length; j++){         if(key[j] === 0){             count++;         }     }     if(count === key.length){         return true;     }     var flag = false;     for(var k = 0; k < key.length; k++){         if(k === 0){             flag = (key[k] < 0 ? true : false);         }else{             if(flag !== (key[k] < 0 ? true : false)){                 return false;             }         }     }     return true; }
console.log(l);     let len = l.length-1;     let count = 0;     let val = (l[0] < l[1]) ? 0 : 1;     for(let i=0; i<len; i++){         if(val == 0){             if(l[i] < l[i+1]){                 count++;             }else{                 break;             }         }else{             if(l[i] > l[i+1]){                 count++;             }else{                 break;             }         }     }     console.log((count+1) == len); } monotonic([1, 20, 4, 10]);
var is_increasing = true;   var is_decreasing = true;   var last_num = l[0];   var i = 1;   while (i < l.length){     if (last_num > l[i]){       is_increasing = false;     }     if (last_num < l[i]){       is_decreasing = false;     }     last_num = l[i];     i++;   }   return is_increasing || is_decreasing; }
var length = l.length;     var list = [];     if(l[0]<l[1]){         var i = 1;         while(i<length){             if(l[i]<l[i-1]){                 list.push(1);             }             i++;         }     }     else{         var i = 1;         while(i<length){             if(l[i]>l[i-1]){                 list.push(1);             }             i++;         }     }     if(list.length>0){         return false;     }     else{         return true;     } }
var i = 0; 	var isInc = false; 	var isDec = false; 	while (i < l.length - 1){ 		if (l[i] < l[i+1]){ 			isInc = true; 		} else if (l[i] > l[i+1]){ 			isDec = true; 		} else { 			isInc = false; 			isDec = false; 			break; 		} 		i++; 	} 	return isInc || isDec; }
var check = "";   var flag = false;   for(var i = 0; i < l.length - 1; i++){     if(l[i] < l[i+1]){       check = ">";       break;     }     else if(l[i] > l[i+1]){       check = "<";       break;     }   }   for(var i = 0; i < l.length - 1; i++){     if(check == ">"){       if(l[i] > l[i+1]){         flag = true;         break;       }     }     else if(check == "<"){       if(l[i] < l[i+1]){         flag = true;         break;       }     }   }   if(flag){     return false;   }   else{     return true;   } }
if(l.length <= 1){         return true;     }     var direction = l[1] - l[0];     for(var i = 2; i < l.length; i++){         if(direction == 0){             direction = l[i] - l[i-1];             continue;         }         if((l[i] - l[i-1]) / direction < 0){             return false;         }     }     return true; }
//if(!l) return true;   //if(l.length == 1) return true;   var mono = true;   var inc = (l[1] - l[0] > 0);   for(var i = 2; i < l.length; i++){     if(inc && l[i] - l[i-1] < 0){       mono = false;       break;     }     if(!inc && l[i] - l[i-1] > 0){       mono = false;       break;     }   }   return mono; }
var g = l[0];     var isTrue = true;     var isTrue2 = true;     for(var i = 0; i < l.length; i++){         if(l[i] < g){             isTrue = false;         }         g = l[i];     }     var g2 = l[0];     for(var i = 0; i < l.length; i++){         if(l[i] > g2){             isTrue2 = false;         }         g2 = l[i];     }     if(isTrue == true || isTrue2 == true){         return true;     }else{         return false;     } }
var count1 = 0;     var count2 = 0;     for(var i = 0; i < l.length-1; i++){         if(l[i] < l[i+1]){             count1++;         }         else if(l[i] > l[i+1]){             count2++;         }     }     if(count1 == 0 || count2 == 0){         return true;     }     else{         return false;     } }
for(var i = 1; i < l.length; i++){ 		if(l[i] < l[i-1]){ 			return false; 		} 	} 	return true; }
var increasing = true;   var decreasing = true;   for(var i = 0; i < l.length - 1; i++){     if(l[i] > l[i+1]){       increasing = false;     }     if(l[i] < l[i+1]){       decreasing = false;     }   }   return (increasing || decreasing); }
var dec = true; 	var inc = true; 	for(var i = 0; i < l.length-1; i++){ 		if(l[i] > l[i+1]) 			inc = false; 		if(l[i] < l[i+1]) 			dec = false; 	} 	return dec || inc; }
// your code here }
for(var i = 1; i < l.length; i++){ 		if(l[i] > l[i-1]){ 			for(var j = i; j < l.length; j++){ 				if(l[j] < l[j-1]) 					return false; 			} 			return true; 		} 		else if(l[i] < l[i-1]){ 			for(var j = i; j < l.length; j++){ 				if(l[j] > l[j-1]) 					return false; 			} 			return true; 		} 	} 	return true; }
if(l.length <= 2){         return true;     }     if(l[0] < l[1]){         for(let i = 0; i < l.length - 1; i++){             if(l[i] > l[i+1]){                 return false;             }         }     }     else if(l[0] > l[1]){         for(let i = 0; i < l.length - 1; i++){             if(l[i] < l[i+1]){                 return false;             }         }     }     return true; }
if(increasing(l)){         return true;     }else if(decreasing(l)){         return true;     }else{         return false;     } }
var increasing = true     var decreasing = true     for (var i = 0; i < l.length-1; i++){         if (l[i] < l[i+1]){             decreasing = false         }         if (l[i] > l[i+1]){             increasing = false         }     }     return increasing || decreasing }
var mono = false; 	var dec = false; 	if(l.length == 0){ 		return mono; 	} 	for(var i = 0; i < l.length-1; i++){ 		if(l[i] < l[i+1]){ 			mono = true; 		}else if(l[i] > l[i+1]){ 			dec = true; 		}else{ 			dec = false; 			mono = false; 		} 	} 	if(mono === true || dec === true){ 		return true; 	}else{ 		return false; 	} }
let roman = '';     let temp = '';     for(let i = 0; i < number.toString().length; i++){         const numeral = number.toString().charAt(i);         switch(numeral){             case '1': temp = 'i'; break;             case '2': temp = 'ii'; break;             case '3': temp = 'iii'; break;             case '4': temp = 'iv'; break;             case '5': temp = 'v'; break;             case '6': temp = 'vi'; break;             case '7': temp = 'vii'; break;             case '8': temp = 'viii'; break;             case '9': temp = 'ix'; break;             default: break;         }         if(i === 0){             roman = temp;         }else{             roman = temp + roman;         }     }     return roman; }
if(number > 1000){       return "Too Big"    }     if(number < 1){       return "Too Small"    }     let finalString = ""    let digits = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]    let roman = ["m", "cm", "d", "cd", "c", "xc", "l", "xl", "x", "ix", "v", "iv", "i"]     for(let i = 0; i < digits.length; i++){       while(number >= digits[i]){          finalString += roman[i]          number -= digits[i]       }    }     return finalString.toLowerCase() }
number = number.toString();     var output = '';     var numbers = {         "1": "i",         "5": "v",         "10": "x",         "50": "l",         "100": "c",         "500": "d",         "1000": "m"     };     var sub = {         "2": "ii",         "3": "iii",         "4": "iv",         "6": "vi",         "7": "vii",         "8": "viii",         "9": "ix",         "11": "xi",         "12": "xii",         "13": "xiii",         "14": "xiv",         "15": "xv",         "16": "xvi",         "17": "xvii",         "18": "xviii",         "19": "xix",         "20": "xx",         "30": "xxx",         "40": "xl",         "60": "lx",         "70": "lxx",         "80": "lxxx",         "90": "xc",         "110": "cx",         "120": "cxx",         "130": "cxxx",         "140": "cxl",         "150": "cl",         "160": "clx",         "170": "clxx",         "180": "clxxx",         "190": "cxc",         "200": "cc",         "300": "ccc",         "400": "cd",         "600": "dc",         "700": "dcc",         "800": "dccc",         "900": "cm",         "1100": "mc",         "1200": "mcc",         "1300": "mccc",         "1400": "mcd",         "1500": "md",         "1600": "mdc",         "1700": "mdcc",         "1800": "mdccc",         "1900": "mcm"
var result = '';     //1-9     if(number >= 1 && number <= 9){         var one_to_nine = {1:"i", 2:"ii", 3:"iii", 4:"iv", 5:"v", 6:"vi", 7:"vii", 8:"viii", 9:"ix"};         result = one_to_nine[number];     }     //10-90     if(number >= 10 && number <= 90){         var ten_to_ninety = {10:"x", 20:"xx", 30:"xxx", 40:"xl", 50:"l", 60:"lx", 70:"lxx", 80:"lxxx", 90:"xc"};         var tens = Math.floor(number/10)*10;         result = ten_to_ninety[tens];         var remainder = number%10;         if(remainder !== 0){             var one_to_nine = {1:"i", 2:"ii", 3:"iii", 4:"iv", 5:"v", 6:"vi", 7:"vii", 8:"viii", 9:"ix"};             result += one_to_nine[remainder];         }     }     //100-900     if(number >= 100 && number <= 900){         var hundred_to_nine_hundred = {100:"c", 200:"cc", 300:"ccc", 400:"cd", 500:"d", 600:"dc", 700:"dcc", 800:"dccc", 900:"cm"};         var hundreds = Math.floor(number/100)*100;         result = hundred_to_nine_hundred[hundreds];         var remainder = number%100;         if(remainder !== 0){             var ten_to_ninety = {10:"x", 20:"xx", 30:"xxx", 40:"xl", 50:"l", 60:"lx", 70:"lxx", 80:"lxxx", 90:"xc"};             result += ten_to_ninety[Math.floor(remainder/10)*10];             var remainder_two = remainder%10;             if(remainder_two !== 0){                 var one_to_nine = {1:"i
var roman="";     var romanNumeral = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I'];     var numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];     for (var i = 0; i < numbers.length; i++) {         while (number >= numbers[i]) {             roman += romanNumeral[i];             number -= numbers[i];         }     }     return roman.toLowerCase(); }
if(number>1000 || number<1){         return null;     }     const result = {         M: 0,         D: 0,         C: 0,         L: 0,         X: 0,         V: 0,         I: 0     };     const numbers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];     const roman = ["M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"];     let i = 0;     while (number > 0) {         if (number - numbers[i] >= 0) {             number -= numbers[i];             result[roman[i]] += 1;         } else {             i++;         }     }     return Object.keys(result).reduce((a, b) => a + result[b] * b, ""); }
var miniRoman = {       1: 'i',       5: 'v',       10: 'x',       50: 'l',       100: 'c',       500: 'd',       1000: 'm'     };     var result = '';     var nums = [1000,500,100,50,10,5,1];     var newString = String(number);     var arr = newString.split('');     var first = parseInt(arr[0]);     var second = parseInt(arr[1]);     var third = parseInt(arr[2]);     if(first < 4){       for(var j = 1; j <= first; j++){         result += miniRoman[nums[6]];       }     }else if(first > 5 && first < 9){       result += miniRoman[nums[5]];       for(var i = 1; i <= first - 5; i++){         result += miniRoman[nums[6]];       }     }else if(first === 4){       result += miniRoman[nums[6]] + miniRoman[nums[5]];     }else if(first === 5){       result += miniRoman[nums[5]];     }else if(first === 9){       result += miniRoman[nums[6]] + miniRoman[nums[4]];     }     if(second < 4){       for(var m = 1; m <= second; m++){         result += miniRoman[nums[4]];       }     }else if(second > 5 && second < 9){       result += miniRoman[nums[3]];       for(var k = 1; k <= second - 5; k++){         result += miniRoman[nums[4]];       }     }else if(second === 4){       result += miniRoman[nums[4]] + miniRoman[nums[3]];     }else if(second === 5){       result += miniRoman[nums[3]];     }else if(second === 9){       result += miniRoman[nums[
var romanNum = "";     var tensArray = ["", "x", "xx", "xxx", "xl", "l", "lx", "lxx", "lxxx", "xc"];     var onesArray = ["", "i", "ii", "iii", "iv", "v", "vi", "vii", "viii", "ix"];     romanNum += tensArray[Math.floor(number/10)];     romanNum += onesArray[number%10];     return romanNum; }
let t = ["","C","CC","CCC","CD","D","DC","DCC","DCCC","CM"];     let h = ["","X","XX","XXX","XL","L","LX","LXX","LXXX","XC"];     let o = ["","I","II","III","IV","V","VI","VII","VIII","IX"];     let roman = t[Math.floor(number/100)] + h[Math.floor((number%100)/10)] + o[number%10];     return roman.toLowerCase(); }
// assume that the number is in correct range     var roman = ['m', 'cm', 'd', 'cd', 'c', 'xc', 'l', 'xl', 'x', 'ix', 'v', 'iv', 'i'];     var nums = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];     var romanized = '';     for (var i = 0; i < nums.length; i++) {         while (nums[i] <= number) {             romanized += roman[i];             number -= nums[i];         }     }     return romanized; }
var numerals = {         1: 'i',         4: 'iv',         5: 'v',         9: 'ix',         10: 'x',         40: 'xl',         50: 'l',         90: 'xc',         100: 'c',         400: 'cd',         500: 'd',         900: 'cm',         1000: 'm'     };     var result = "";     var values = Object.keys(numerals).reverse();     var keys = Object.values(numerals).reverse();     while (number > 0) {         for (var i = 0; i < values.length; i++) {             if (number >= values[i]) {                 result += keys[i];                 number -= values[i];                 break;             }         }     }     return result; }
var result = "";     var nums = [ 1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1 ];     var romans = [ "m", "cm", "d", "cd", "c", "xc", "l", "xl", "x", "ix", "v", "iv", "i" ];     for (var i = 0; i < 13; i++) {         while (number >= nums[i]) {             result += romans[i];             number -= nums[i];         }     }     return result; }
var roman_numerals = ["m", "cm", "d", "cd", "c", "xc", "l", "xl", "x", "ix", "v", "iv", "i"]; 	var integers = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]; 	var result = ""; 	 	while(number > 0){ 		for(var i = 0; i < integers.length; i++){ 			if(number >= integers[i]){ 				result += roman_numerals[i]; 				number -= integers[i]; 				break; 			} 		} 	} 	return result; }
var digits = number.toString().split('');     var result = "";     var numerals = {         1: 'i',         5: 'v',         10: 'x',         50: 'l',         100: 'c',         500: 'd',         1000: 'm'     };     for (var i = 0; i < digits.length; i++) {         if (digits[i] == 9) {             result += numerals[1*Math.pow(10, digits.length-i-1)] + numerals[1*Math.pow(10, digits.length-i)];         } else if (digits[i] >= 5) {             result += numerals[5*Math.pow(10, digits.length-i-1)];             if (digits[i] > 5) {                 result += numerals[1*Math.pow(10, digits.length-i-1)].repeat(digits[i]-5);             }         } else if (digits[i] == 4) {             result += numerals[1*Math.pow(10, digits.length-i-1)] + numerals[5*Math.pow(10, digits.length-i-1)];         } else {             result += numerals[1*Math.pow(10, digits.length-i-1)].repeat(digits[i]);         }     }     return result; }
if (typeof number !== 'number') throw new Error('Not a number.');   if (number < 1 || number > 1000) throw new Error('Not between 1 and 1000.');   var numString = '';   //For each number, check the numer and add the corresponding string of numerals   if (number >= 1000) numString += 'm';   if (number >= 900) numString += 'cm';   if (number >= 500) numString += 'd';   if (number >= 400) numString += 'cd';   if (number >= 100) numString += 'c';   if (number >= 90) numString += 'xc';   if (number >= 50) numString += 'l';   if (number >= 40) numString += 'xl';   if (number >= 10) numString += 'x';   if (number >= 9) numString += 'ix';   if (number >= 5) numString += 'v';   if (number >= 4) numString += 'iv';   if (number >= 1) numString += 'i';   return numString; }
var result = ''; 	var characters = { 		1 : 'i', 		5 : 'v', 		10 : 'x', 		50 : 'l', 		100 : 'c', 		500 : 'd', 		1000 : 'm' 	}; 	var digits = number.toString().split('').reverse(); 	for (var i = 0; i < digits.length; i++) { 		var digit = digits[i]; 		var power = Math.pow(10, i); 		switch (digit) { 			case '4': result = characters[power] + characters[power * 5] + result; break; 			case '9': result = characters[power] + characters[power * 10] + result; break; 			default: 				if (digit < 4) { 					result = new Array(parseInt(digit) + 1).join(characters[power]) + result; 				} else if (digit >= 5) { 					result = characters[power * 5] + new Array(parseInt(digit) - 4).join(characters[power]) + result; 				} 		} 	} 	return result; }
var number_string = number.toString();     var num_length = number_string.length;     var result = "";     for(var i = 0; i < num_length; i++){         if(number_string[i] === "1"){             result += numeral(i);         }         else if(number_string[i] === "2"){             result += numeral(i) + numeral(i);         }         else if(number_string[i] === "3"){             result += numeral(i) + numeral(i) + numeral(i);         }         else if(number_string[i] === "4"){             result += numeral(i) + numeral(i + 1);         }         else if(number_string[i] === "5"){             result += numeral(i + 1);         }         else if(number_string[i] === "6"){             result += numeral(i + 1) + numeral(i);         }         else if(number_string[i] === "7"){             result += numeral(i + 1) + numeral(i) + numeral(i);         }         else if(number_string[i] === "8"){             result += numeral(i + 1) + numeral(i) + numeral(i) + numeral(i);         }         else if(number_string[i] === "9"){             result += numeral(i) + numeral(i + 2);         }     }     return result; }
if(number === 0){ 		return ''; 	} 	else{ 		if(number >= 1000){ 			return "m" + int_to_mini_roman(number - 1000); 		} 		else if(number >= 900){ 			return "cm" + int_to_mini_roman(number - 900); 		} 		else if(number >= 500){ 			return "d" + int_to_mini_roman(number - 500); 		} 		else if(number >= 400){ 			return "cd" + int_to_mini_roman(number - 400); 		} 		else if(number >= 100){ 			return "c" + int_to_mini_roman(number - 100); 		} 		else if(number >= 90){ 			return "xc" + int_to_mini_roman(number - 90); 		} 		else if(number >= 50){ 			return "l" + int_to_mini_roman(number - 50); 		} 		else if(number >= 40){ 			return "xl" + int_to_mini_roman(number - 40); 		} 		else if(number >= 10){ 			return "x" + int_to_mini_roman(number - 10); 		} 		else if(number >= 9){ 			return "ix" + int_to_mini_roman(number - 9); 		} 		else if(number >= 5){ 			return "v" + int_to_mini_roman(number - 5); 		} 		else if(number >= 4){ 			return "iv" + int_to_mini_roman(number - 4); 		} 		else if(number >= 1){ 			return "i" + int_to_mini_roman(number - 1); 		} 	} }
// your code here }
if(n > m) return -1;     var sum = 0;     for(var i = n; i <= m; i++){         sum += i;     }     return "0b" + Math.round(sum / (m - n + 1)).toString(2); }
var sum = 0; 	var count = 0; 	var round; 	var binary; 	if(n > m){ 		return -1; 	} 	else{ 		for(var i = n; i <= m; i++){ 			sum += i; 			count++; 		} 		var avg = sum / count; 		var avg2 = Math.round(avg); 		binary = avg2.toString(2); 		binary = "0b" + binary; 		return binary; 	} }
let average = (m+n)/2;     if(n>m){       return -1;     }else{       return '0b' + Math.round(average).toString(2);     } }
if (n > m) {     return -1;   } else {     return (n + m) / 2;   } }
if (n>m) {return -1} 	else { 		var num = Math.round((n+m)/2); 		var toBinary = num.toString(2); 		var toBinaryString = "0b" + toBinary; 		return toBinaryString; 	} }
var sum=0;   if(n>m){     return -1;   }   for(var i=n;i<=m;i++){     sum+=i;   }   return (Math.round(sum/(m-n+1))).toString(2); }
if (n > m) {     return -1;   }   let avg = Math.round((n + m) / 2);   return '0b' + avg.toString(2); }
if (n > m) {     return -1;   } else {     return Math.round((n + m) / 2).toString(2);   } }
if(n>m){         return -1;     }     let sum = 0;     for(let i = n; i<=m; i++){         sum+=i;     }     return (Math.round(sum/(m-n+1))).toString(2); }
if(n>m){ 		return -1; 	} 	let avg = Math.round((n+m)/2); 	return `0b${avg.toString(2)}`; }
if(n > m){       return -1;    }    var i = n;    var sum = 0;    while(i <= m){       sum += i;       i++;    }    var rounded = Math.round(sum/(m-n+1));    return rounded.toString(2); }
var sum = 0;   var count = 0;   for(var i = n; i <= m; i++){     sum += i;     count++;   }   var rounded_avg = Math.round(sum/count);   return "0b" + rounded_avg.toString(2); }
if (n > m) {     return -1;   }   return Math.round((n + m) / 2).toString(2); }
let avg = Math.round((n + m) / 2);     return (n <= m) ? avg.toString(2) : -1; }
if(n>m){       return -1;     }     var total = 0;     var count = 0;     while(n<=m){       total += n;       count++;       n++;     }     var rd = Math.round(total/count);     return rd.toString(2);   }      //8. Take a word, and return a dictionary of each letter in the word,    // and how many times they appear in the word.   // Example:   // letter_histogram("hello") => {"h": 1, "e": 1, "l": 2, "o": 1}   // letter_histogram("peter") => {"p": 1, "e": 2, "t": 1, "r": 1}   function letter_histogram(word){     var dict = {};     for(var i = 0; i<word.length; i++){       var ltr = word[i];       if(dict[ltr] == undefined){         dict[ltr] = 1;       }       else{         dict[ltr]++;       }     }     return dict;   }      //9. Write a function that takes a dictionary of letters and their frequencies    //(such as the one returned by letter_histogram), and returns a string    //representing a vertical histogram with the letters in the dictionary,    //and the frequency for each letter.   // Example:   // v_histogram({"h": 1, "e": 1, "l": 2, "o": 1}) =>   // "*   // *   // ****   // *   // *"   // v_histogram({"p": 1, "e": 2, "t": 1, "r": 1}) =>   // "*   // ***   // *   // *"   function v_histogram(dictionary){     var str = "";     var max = 0;     for(var letter in dictionary){       if(dictionary[letter] > max){         max = dictionary[letter];       }
if(n > m) return -1;     let num = 0;     for(let i = n; i <= m; i++){         num += i;     }     num = Math.round(num / (m - n + 1));     return "0b" + num.toString(2); }
if(n>m){         return -1;     }     let sum = 0;     for(let i = n; i<=m; i++){         sum += i;     }     return `0b${Math.round(sum/(m-n+1)).toString(2)}`; }
var ans = (n + m) / 2   return ans >= 0 ? '0b' + Math.round(ans).toString(2) : -1 }
var sum = 0;     var avg = 0;     var rounded_avg = 0;     var binary_avg = "";     if(n > m){         return -1;     }     else{         for(var i = n; i <= m; i++){             sum += i;         }         avg = sum / (m - n + 1);         rounded_avg = Math.round(avg);         binary_avg = (rounded_avg).toString(2);         return "0b" + binary_avg;     } }
// YOUR CODE GOES HERE     var res = []     var flag = 0     for(var i=0; i<l.length; i++){         if(l[i]<t){             res.push(l[i])         }else{             flag = 1         }     }     if(flag==0){         return true     }else{         return false     } }
return some(l, function(n){         return n < t;     }); }
for(let i = 0; i < l.length; i++){         if(l[i] >= t){             return false;         }     }     return true; }
for(var x = 0; x < l.length; x++){         if(l[x] >= t){             return false;         }     }     return true; }
for(var i=0; i<l.length; i++){         if(l[i]>t){             return false;         }     }     return true; }
let result = true;     for(let i=0; i<l.length; i++){         if(l[i] > t){             result = false;         }     }     return result; }
for(i=0; i<l.length; i++){ 		if(l[i] > t){ 			return false; 		} 	} 	return true; }
var temp = l.every(function(value,index,arr){     return (value<t)   })   return temp }
for(var i = 0; i < l.length; i++){         if(l[i] > t){             return false;         }     }     return true; }
for(i = 0; i < l.length; i++){         if(l[i] > t){             return false;         }     }     return true; }
for(let i = 0; i < l.length; i++){         if(l[i] >= t){             return false;         }     }     return true; }
if (l.length === 0){         return true;     }     if (l[0] > t){         return false;     }     return below_threshold(l.slice(1), t); }
return _.every(l, function(n){         return n < t;     }); }
return all(curry(lt)(t), l); }
var i = 0;     while (i < l.length) {         if (l[i] >= t) {             return false;         }         i = i + 1;     }     return true; }
for(var i = 0; i < l.length; i++){         if(l[i] >= t){             return false;         }     }     return true; }
//TODO   return l.every(function(a){     return a < t;   }); }
//Check each item in list to see if less than t   for(i = 0; i < l.length; i++){     if(l[i] > t){       return false;     }   }   return true; }
return l.every(function(v){ 		return v < t; 	}); }
if(is_prime(string.length)){     return true;   }   return false; }
if(string.length % 2 === 0){         return false;     }     else{         return true;     } }
var len = string.length;   var prime = true;   for(var i = 2; i < len; i++){     if(len % i == 0){       prime = false;     }   }   return prime; }
return false; }
let isPrime = true;     let stringLength = string.length;     for(i = 2; i <= stringLength/2; i++){         if(stringLength % i == 0){             isPrime = false;             break;         }     }     return isPrime; }
for(var i = 2; i < string.length; i++){         if(string.length % i === 0){             return false;         }     }     return true; }
var output = true;   for(var i = 2; i < string.length; i++){     if(string.length % i === 0){       output = false;     }   }   return output; }
}
var str = string.length;     var prime = true;     for(var i = 2; i<str; i++){         if(str%i==0){             prime = false;         }     }     if(prime == true){         return true;     }     else{         return false;     } }
var n = string.length;     //console.log("The length of the string is " + n);     var i = 0;     var is_prime = true;     while(i < n){         i++;         if(n % i == 0 && i != 1 && i != n){             is_prime = false;         }     }     //console.log(is_prime);     return is_prime; } prime_length('Hello'); prime_length('abcdcba'); prime_length('kittens'); prime_length('orange');
let string_length = string.length;   if (is_prime(string_length)){     return true;   }   else{     return false;   } }
if(string.length == 2 || string.length == 3){         return true;     }     if(string.length % 2 == 0 || string.length % 3 == 0){         return false;     }     return true; }
if(string.length < 2){ 		return false; 	} 	for(var i = 2; i < string.length; i++){ 		if(string.length % i == 0){ 			return false; 		} 	} 	return true; }
var count = 0;   for(var i = 1; i <= string.length; i++){     if(string.length % i == 0){       count++;     }   }   if(count == 2){     return true;   }   else{     return false;   } }
var length = string.length;   var count = 0;   for(var i = length; i > 0; i--){     if(length % i == 0){       count += 1;     }   }   if(count == 2){     return true;   }   else{     return false;   } }
if(is_prime(string.length)){     return true;   }   return false; }
var result = false;     var array = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97];     if(array.includes(string.length)){         result = true;     }     return result; }
return isPrime(string.length); }
//get length of string     var length = string.length;     //check to see if it is a prime number     if(length == 2 || length == 3 || length == 5 || length == 7){         return true;     }     return false; }
let hasClose = false;     for(let i = 0; i < numbers.length; i++){         for(let j = 0; j < numbers.length; j++){             if(numbers[i] - numbers[j] == threshold){                 hasClose = true;             }         }     }     return hasClose; }
for(var i = 0; i < numbers.length; i++){         for(var j = i + 1; j < numbers.length; j++){             if(Math.abs(numbers[i] - numbers[j]) < threshold){                 return true;             }         }     }     return false; }
if(numbers.length <= 1){ 		return false; 	}  	var numbersSorted = numbers.sort(); 	var currentNumber = numbersSorted[0]; 	var closestDifference = threshold + 1;  	for(var i = 1; i < numbersSorted.length; i++){ 		var currentDifference = Math.abs(currentNumber - numbersSorted[i]); 		if(currentDifference < closestDifference){ 			closestDifference = currentDifference; 		} 		currentNumber = numbersSorted[i]; 	}  	return closestDifference < threshold; }
var len = numbers.length     for(var i = 0; i < len; i++){         for(var j = i+1; j < len; j++){             if(Math.abs(numbers[i] - numbers[j]) < threshold){                 return true             }         }     }     return false }
let already_found = false;   for(let i = 0; i < numbers.length; i++){     for(let j = i + 1; j < numbers.length; j++){       if(Math.abs(numbers[i] - numbers[j]) < threshold){         already_found = true;       }     }   }   return already_found; }
var closestElement     for(var i = 0; i < numbers.length; i++){         var difference = numbers[i+1] - numbers[i]         if(difference < threshold){             closestElement = numbers[i+1]         }     }     return closestElement }
for(var i = 0; i < numbers.length; i++){         for(var j = 0; j < numbers.length; j++){             if(i !== j){                 var diff = numbers[i] - numbers[j];                 if(diff < 0){                     diff = -diff;                 }                 if(diff < threshold){                     return true;                 }             }         }     }     return false; }
for(var i = 0; i < numbers.length; i++){     for(var j = i+1; j < numbers.length; j++){       if(Math.abs(numbers[i] - numbers[j]) < threshold){         return true;       }     }   }   return false; }
//check if empty list   if(numbers.length === 0){     return false;   }   //Check if the distance between a given element and the next one is less than threshold.   //If so, return true;   for(var i = 0; i < numbers.length-1; i++){     if(Math.abs(numbers[i] - numbers[i+1]) < threshold){       return true;     }   }   //otherwise return false   return false; }
for(var i = 0; i < numbers.length; i++){     for(var j = 0; j < numbers.length; j++){       if(i != j){         var diff = numbers[i] - numbers[j];         diff = diff > 0 ? diff : -diff;         if(diff < threshold){           return true;         }       }     }   }   return false; }
let result = false;     for(let i = 0; i < numbers.length; i++){         for(let j = 0; j < numbers.length; j++){             if(i !== j){                 let diff = Math.abs(numbers[i] - numbers[j]);                 if(diff < threshold){                     result = true;                 }             }         }     }     return result; }
for(var i = 0; i < numbers.length; i++){         for(var j = 0; j < numbers.length; j++){             if(numbers[i] != numbers[j]){                 if(Math.abs(numbers[i] - numbers[j]) < threshold){                     return true;                 }             }         }     }     return false; }
for(var i = 0; i < numbers.length; i++){     for(var j = i + 1; j < numbers.length; j++){       if(Math.abs(numbers[i] - numbers[j]) < threshold){         return true;       }     }   }   return false; }
let result = false;     for(let i = 0; i < numbers.length; i++){         for(let j = i + 1; j < numbers.length; j++){             if(Math.abs(numbers[i] - numbers[j]) < threshold){                 result = true;             }         }     }     return result; }
// write your answer between //<...> and //<...>     //<...>     return false;     //<...> }
if(numbers.length <= 1){     return false;   }   numbers.sort();   var dist = numbers[1] - numbers[0];   if(dist <= threshold){     return true;   }   for(var i = 2; i < numbers.length; i++){     dist = numbers[i] - numbers[i-1];     if(dist <= threshold){       return true;     }   }   return false; }
let result = false;     numbers.sort(function(a, b){return a-b});      for(let i = 0; i < numbers.length - 1; i++){         if(numbers[i+1] - numbers[i] < threshold){             result = true;             break;         }     }     return result; }
for(var i = 0; i < numbers.length; i++){     for(var j = i+1; j < numbers.length; j++){       if(Math.abs(numbers[i] - numbers[j]) < threshold){         return true;       }     }   }   return false; }
var i;     for(i = 0; i < numbers.length; i++){         for(j = i+1; j < numbers.length; j++){             if(Math.abs(numbers[i] - numbers[j]) < threshold){                 return true;             }         }     }     return false; }
let ss = s.split('');     let cs = c.split('');     let res = [];     for(let i=0; i<ss.length; i++){         if(cs.indexOf(ss[i])===-1){             res.push(ss[i]);         }     }     if(res.join('')===res.reverse().join('')){         return [res.join(''), true];     }else{         return [res.join(''), false];     } }
let output = '';     for(let ch of s){         if(!c.includes(ch)) output += ch;     }     let outputReverse = output.split('').reverse().join('');     return [output, output === outputReverse]; }
let str = '';   s.split('').map(function(e){     if (c.indexOf(e) == -1) str += e;   });   let r = str.split('').reverse().join('');   let b = str.localeCompare(r);   return (b == 0) ? [str, true] : [str, false]; }
let new_str = "";     let i = 0;     while(i < s.length){         if(c.indexOf(s[i]) === -1){             new_str += s[i];         }         i++;     }     let reverse_str = new_str.split("").reverse().join("");     if(reverse_str === new_str){         return [new_str, true];     }     return [new_str, false]; }
c = [...new Set(c)];     s = s.split('').filter(a => !c.includes(a)).join('');     return [s, s === s.split('').reverse().join('')]; }
for(let i = 0; i < c.length; i++){         s = s.replace(new RegExp(c[i], 'g'), '');     }     return [s, s.split('').reverse().join('') === s]; } reverse_delete("abcde", "ae"); reverse_delete("abcdef", "b"); reverse_delete("abcdedcba", "ab");
let found = false;   for(let i=0; i<s.length; i++){     for(let j=0; j<c.length; j++){       if(s[i] === c[j]){         found = true;         s = s.slice(0,i) + s.slice(i+1,s.length);         i = -1;         break;       }     }   }   return [s, found && s === s.split('').reverse().join('')]; }
const arr = s.split('');     c.split('').forEach(i => {       if(arr.includes(i)){         arr.splice(arr.indexOf(i), 1);       }     });     let ans = arr.join('');     let check = true;     for(let i = 0; i < ans.length / 2; i++){       if(ans[i] !== ans[ans.length - 1 - i]){         check = false;       }     }     return [ans, check]; }
c.split('').forEach(ch=>s=s.replace(ch,''))     return (s,s==s.split('').reverse().join('')) }
let ss = s.split('').filter(item => c.indexOf(item) < 0).join('');     return [ss, ss.split('').reverse().join('') === ss]; }
s = s.split('').filter(i => !c.includes(i)).join('');     return [s, s === s.split('').reverse().join('')]; }
let result = "";     for(let i = 0; i < s.length; i++){         if(c.indexOf(s[i]) < 0){             result += s[i];         }     }     return [result, isPalindrome(result)]; }
let i = s.length - 1;     for(let i = 0; i < s.length; i++){         for(let j = 0; j < c.length; j++){             if(s[i] === c[j]){                 let temp = s.split('');                 temp.splice(i, 1);                 s = temp.join('');                 i--;                 break;             }         }     }     return [s, s === s.split('').reverse().join('')]; }
//You can do it! ;) }
let result = s;     for(let i = 0; i < s.length; i++){         for(let j = 0; j < c.length; j++){             if(s[i] === c[j]){                 result = result.replace(s[i], '');             }         }     }     let reverseResult = result.split('').reverse().join('');     return [result, result === reverseResult]; }
let str = s.split('');     let remover = c.split('');     let result = [];     for(let el of str){         if(!remover.includes(el)){             result.push(el);         }     }     return [result.join(''), result.join('') === result.reverse().join('')]; }
let res = '';   s.split('').map( x => {     if(c.indexOf(x) === -1) res += x;   });   let rev = res.split('').reverse().join('');   return [res, res === rev]; }
let result = '';     for(let i = 0; i < s.length; i++){         if(c.indexOf(s[i]) < 0){             result += s[i];         }     }     console.log(result);     return [result, (result === result.split('').reverse().join(''))]; }
// Write your code here     for(let i = 0; i < c.length; i++){         s = s.replace(new RegExp(c[i], 'g'), '');     }     let s_back = s.split('').reverse().join('');     return [s, s === s_back]; }
let i = 0     for(i = 0; i < string.length; i++){         if(string[i] === "[" && string[i+1] === "]"){             return true         }     }     return false }
let count = 0;     for(let i = 0; i < string.length; i++){         if(string[i] === '['){             count++;         }         if(string[i] === ']'){             count--;         }         if(count < 0){             return false;         }     }     return count === 0; }
let leftBrackets = 0;     let rightBrackets = 0;     let hasNested = false;     let hasError = false;     for(let i = 0; i < string.length; i++){         let currentBracket = string[i];         if(currentBracket === '['){             leftBrackets++;         }         if(currentBracket === ']'){             rightBrackets++;         }         if(leftBrackets < rightBrackets){             hasError = true;         }         if(leftBrackets > rightBrackets){             hasNested = true;         }     }     return hasNested && !hasError; }
if(string.length == 0){         return false;     }     let stack = [];     for(let i = 0; i < string.length; i++){         if(string[i] == '['){             stack.push(string[i]);         }else{             if(stack.length == 0){                 return false;             }             stack.pop();         }     }     return true; }
var pareCounter = 0;     var bracketCounter = 0;     var squareBracketCounter = 0;     for(var i = 0; i < string.length; i++){         if(string[i] == "{") pareCounter++;         if(string[i] == "}") pareCounter--;         if(string[i] == "[") bracketCounter++;         if(string[i] == "]") bracketCounter--;         if(string[i] == "(") squareBracketCounter++;         if(string[i] == ")") squareBracketCounter--;         if(pareCounter < 0 || bracketCounter < 0 || squareBracketCounter < 0) return false;     }     if(pareCounter != 0 || bracketCounter != 0 || squareBracketCounter != 0) return false;     return true; }
let stack = [];     for(let i=0; i<string.length; i++){         if(string[i] === '['){             stack.push(string[i]);         }         else{             if(stack.length === 0){                 return false;             }             else{                 stack.pop();             }         }     }     return stack.length === 0; }
var count = 0;     var arr = string.split('');     for(var i = 0; i < arr.length; i++){         if(arr[i] === '['){             count++;         }         if(arr[i] === ']'){             count--;         }         if(count < 0){             return false;         }     }     return count === 0; }
let counter = 0;     for(let i = 0; i < string.length; i++){         if(string[i] === "["){             counter++;         }         if(string[i] === "]"){             counter--;         }         if(counter === 0){             return true;         }     }     return false; }
if(string.length%2===0){     while(string.length>0){     if(string.includes('[[[[')){         return false     }     else if(string.includes(']]]]')){         return false     }     else if(string.includes('[[')){         string=string.replace('[[','')     }     else if(string.includes(']]')){         string=string.replace(']]','')     }     else if(string.includes('[]')){         string=string.replace('[]','')     }     else {         return false     } } return true } else{     return false } }
var count = 0;     for(var i = 0; i < string.length; i++){         if(string[i] === "["){             count++;         }else if(string[i] === "]"){             count--;         }         if(count < 0){             return false;         }     }     return count === 0; }
let openBracket=['[','{','('];     let closingBracket=[')','}',']'];     let openingStack=[];     let checkingResult=0;     for(let i=0;i<string.length;i++){         if(openBracket.includes(string[i])){             openingStack.push(string[i]);         }         else if(closingBracket.includes(string[i])){             if(openBracket.indexOf(openingStack[openingStack.length-1])===closingBracket.indexOf(string[i])){                 openingStack.pop();             }             else{                 checkingResult=1;                 break;             }         }     }     if(checkingResult==1 || openingStack.length!=0){         return false;     }     else{         return true;     } }
let myString = string.split('');     let counter = 0;     for(let i = 0; i < myString.length; i++){         if(myString[i] === '['){             counter++         }else if(myString[i] === ']'){             counter--         }         if(counter < 0){             return false         }     }     return counter == 0; }
let count = 0;     for(let i = 0; i < string.length; i++){         if(string[i] === "["){             count++;         }else if(string[i] === "]"){             count--;         }         if(count < 0){             return false;         }     }     return count > 0 ? false : true; }
if(!string){         return false;     }     let right = [];     let left = [];     for(let i = 0; i < string.length; i++){         if(string[i] === "["){             left.push(string[i]);         }else{             right.push(string[i]);         }     }     if(left.length === right.length){         return true;     }else{         return false;     } }
if(string.indexOf('[][]') !== -1){         return false;     }else if(string.indexOf('[]') !== -1){         return false;     }else if(string.indexOf('[[][]]') !== -1){         return true;     }else if(string.indexOf('[[]][[') !== -1){         return true;     }else if(string.indexOf('[[]]') !== -1){         return true;     }else if(string.indexOf('[]]]]]]][[[[[]') !== -1){         return false;     } }
var result = 0; 	if(string.length%2 === 0){ 		var left = string.length/2; 		var right = string.length/2; 		for(var i = 0; i < string.length; i++){ 			if(string[i] == '['){ 				left--; 			} 			if(string[i] == ']'){ 				right--; 			} 			if(right < 0 || left < 0){ 				result = 0; 				break; 			} 			else{ 				result = 1; 			} 		} 	} 	if(result == 1){ 		return true; 	} 	else{ 		return false; 	} }
let i = 0;     while(i<string.length){         if(string[i]===string[i+1]){             return true;         }         i++;     }     return false; }
let counter = 0;     for(let i = 0; i < string.length; i++){         if(string[i] === '['){             counter++;         }         if(string[i] === ']'){             counter--;         }         if(counter < 0){             return false;         }     }     return counter === 0; }
let string2 = string.split('')     console.log(string2)     let l = 0;     let r = 0;     for(let i = 0; i < string2.length; i++){         if(string2[i] == '['){             l++         }         if(string2[i] == ']'){             r++         }     }     if(l == r){         return true     }else{         return false     } }
if(l.length == 0) 		return l; 	var evens = []; 	var odds = []; 	var sorted; 	for(var i = 0; i < l.length; i++){ 		if(i % 2 == 0) 			odds.push(l[i]); 		else 			evens.push(l[i]); 	} 	sorted = evens.sort(); 	for(var i = 0; i < l.length; i++){ 		if(i % 2 == 0) 			sorted.splice(i, 0, odds[i / 2]); 	} 	return sorted; }
// return l.filter(function(v, i) {     //     return i % 2 == 0;     // }).sort().concat(l.filter(function(v, i) {     //     return i % 2 == 1;     // }));     return l.filter(function(v, i) { return i % 2 == 0; }).sort().map(function(v, i) { return [v, l[i * 2 + 1]]; }).flatten(); }
var new_list = [];   var i;   var len = l.length;   for(i = 0; i < len; i++){     if(i % 2 === 0){       new_list.push(l[i]);     }     else{       var temp = l.slice(i, i+2);       temp.sort();       new_list.push(temp[0]);       new_list.push(temp[1]);       i++;     }   }   return new_list; }
// You must not use any loops, and you must utilize recursion.     // If you cannot come up with a recursive solution, you will lose credit.     // You are free to create any auxiliary functions if needed.     var i=0;     var temp=0;     var counter=0;     var right=[];     if(length(l)==0)     {         return [];     }     else if(length(l)==1)     {         return l;     }     else     {         for(i=0;i<length(l);i++)         {             if(is_even(i)==true)             {                 var dummy=l[i];                 if(dummy<l[i+1])                 {                     for(counter=i+1;counter<length(l);counter++)                     {                         if(dummy>l[counter])                         {                             temp=l[counter];                             l[counter]=dummy;                             l[i]=temp;                             dummy=l[i];                         }                     }                 }             }         }         return l;     } }
var res = [];   for(var i = 0; i < l.length; i++){     if(i % 2 === 0){       res.push(l[i]);     }     else{       res.push(l[i].sort());     }   }   return res; }
return l.filter( function (e,i){ return i%2!=0 }).concat(              l.filter( function (e,i){ return i%2==0 }).sort( function (a,b){ return a-b; })); }
var i = 0;     var l2 = [];     var l3 = [];     var l4 = [];     while (i < l.length){         if (i % 2 == 0){             l2.push(l[i]);         }         else{             l3.push(l[i]);         }         i += 1;     }     l3.sort();     var j = 0;     while (j < l2.length){         l4.push(l2[j]);         l4.push(l3[j]);         j += 1;     }     return l4; }
var even_list = []; 	for(var i = 0; i < l.length; i += 2){ 		even_list.push(l[i]); 	} 	even_list.sort(); 	for(var i = 0; i < l.length; i += 2){ 		l[i] = even_list[i/2]; 	} 	return l; }
if (l.length == 0){         return [];     }     else{         var l_odd = l.filter(function(val, index){             return index % 2 == 0;         });         var l_even = l.filter(function(val, index){             return index % 2 == 1;         });         l_even.sort(function(a, b){             return a - b;         });         var result = [];         for (var i = 0; i < l_odd.length; i++){             result.push(l_odd[i]);             result.push(l_even[i]);         }         return result;     } }
// base case     if (l.length <= 1) {         return l;     }     // recursive case     else {         var odd = [];         var even = [];         for (var i = 0; i < l.length; i++) {             if (i % 2 == 0) {                 odd.push(l[i]);             }             else {                 even.push(l[i]);             }         }         even = insertion_sort(even);         for (var i = 0; i < even.length; i++) {             odd.splice(2*i+1, 0, even[i]);         }         return odd;     } }
var new_list = []; 	for(var i = 0; i < l.length; i++){ 		new_list.push(l[i]); 	} 	for(var i = 0; i < l.length; i++){ 		if(i % 2 == 0){ 			new_list[i] = l[i]; 		} 		else{ 			new_list[i] = sort_even_helper(l[i], i); 		} 	} 	return new_list; }
var eves = l.filter(function(e, i){return i % 2 === 0;})     var odds = l.filter(function(e, i){return i % 2 !== 0;})     eves.sort()     var lp = [];     for(var i = 0; i < eves.length; i++){         lp.push(eves[i]);         lp.push(odds[i]);     }     return lp; }
var l2 = new Array();     for(var i = 0; i < l.length; i++){         if(i % 2 == 0){             l2.push(l[i]);         }         else{             var temp = l.slice(i, i+2);             temp.sort();             l2.push(temp[0]);             l2.push(temp[1]);             i = i + 1;         }     }     return l2; }
var res = [];   var index = 0;   for(var i = 0; i < l.length; i++){     res.push(l[i]);     index++;     if(index % 2 === 0){       res[i] = l[i];       res[i] = res[i].sort();     }   }   return res; } sort_even([1, 2, 3]); sort_even([5, 6, 3, 4]);
var evens = [];     for(var i = 0; i < l.length; i++){         if(i % 2 == 0){             evens.push(l[i]);         }     }     evens.sort();     var ans = []     for(var i = 0; i < l.length; i++){         if(i % 2 == 0){             ans.push(evens.shift());         }         else{             ans.push(l[i]);         }     }     return ans; }
var list = []     for (var i = 0; i < l.length; i++) {         if (i % 2 === 0) {             list.push(l[i])         } else {             let a = l[i]             for (var j = i-1; j >= 0; j--) {                 if (l[j] > a) {                     list[j+1] = list[j]                 } else {                     list[j+1] = a                     break                 }             }             if (list[0] > a) {                 list[0] = a             }         }     }     return list }
var ans = [] 	for(var i = 0; i < l.length; i++){ 		if(i % 2 == 0){ 			ans.push(l[i]) 		} 		else{ 			var temp = l.slice(i) 			temp.sort() 			ans.push(temp[0]) 		} 	} 	return ans }
if (l.length <= 2){         return l;     }     var newList = [];     var evenIndicies = [];     var oddIndicies = [];     for (var i = 0; i < l.length; i++){         if (i % 2 == 0){             oddIndicies.push(l[i]);         }         else{             evenIndicies.push(l[i]);         }     }     evenIndicies.sort();     for (var i = 0; i < l.length; i++){         if (i % 2 == 0){             newList.push(oddIndicies[0]);             oddIndicies.shift();         }         else{             newList.push(evenIndicies[0]);             evenIndicies.shift();         }     }     return newList; }
for(i = 0; i < l.length; i++){ 		if(i % 2 == 0){ 			l.splice(i, 0, l[i]); 		} 	} 	for(i = 0; i < l.length; i++){ 		if(i % 2 == 0){ 			l.splice(i, 1); 		} 	} 	l.sort(function(a, b){return a-b}); 	return l; }
return (x + y === z) || (x + z === y) || (y + z === x) && (x === Math.floor(x)) && (y === Math.floor(y)) && (z === Math.floor(z)) }
return (x === (y + z) || y === (x + z) || z === (x + y)) && (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) ? true : false; }
if(x === y + z || y === x + z || z === x + y){         return true;     }     return false; }
if (x+y === z || x+z === y || y+z === x){     return true;   }   else {     return false;   } }
var a = x + y;     var b = x + z;     var c = y + z;     if ( x == a || y == b || z == c){         return true;     }     else{         return false;     } }
if((x + y == z) || (x + z == y) || (y + z == x)){         return true;     }     else{         return false;     } }
let sum = x + y + z;     if(x == sum / 2 || y == sum / 2 || z == sum / 2){         return true;     }     return false; }
if(x === y + z || y === x + z || z === x + y){         return true;     }else{         return false;     } }
if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0){         return true;     } else if (x % 1 === 0 && y % 1 === 0 && z % 1 !== 0){         return true;     } else if (x % 1 === 0 && y % 1 !== 0 && z % 1 === 0){         return true;     } else if (x % 1 !== 0 && y % 1 === 0 && z % 1 === 0){         return true;     } else {         return false;     } }
if(x%1==0 && y%1==0 && z%1==0){         if(x==y+z){             return true;         }         else if(y==x+z){             return true;         }         else if(z==x+y){             return true;         }         else{             return false;         }     }     else{         return false;     } }
if((x===y+z || y===x+z || z===x+y) && x%1===0 && y%1===0 && z%1===0){         return true;     }     else{         return false;     } }
return Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z) ? x + y === z || x + z === y || y + z === x : false; }
return (x+y == z || x+z == y || y+z == x) && (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) ? true : false; }
return (x + y == z || x + z == y || y + z == x) && (Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)) }
if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){         if(x === y + z || y === x + z || z === x + y){             return true;         }     }     return false; }
if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){     if(x === y + z){         return true;     }else if(y === x + z){         return true;     }else if(z === x + y){         return true;     }else{         return false;     } }else{     return false; } }
if(Number.isInteger(x) && Number.isInteger(y) && Number.isInteger(z)){         if(x===y+z || y===x+z || z===x+y){             return true;         }     }     return false; }
if(x % 1 == 0 && y % 1 == 0 && z % 1 == 0 && (x + y == z || x + z == y || y + z == x)) {         return true;     } else {         return false;     } }
let answer = [];   let ones = [];   let zeros = [];   let len = arr.length;   for(let i = 0; i < len; i++){     if(arr[i] <= 0){       zeros.push(arr[i]);     }else{       ones.push(arr[i]);     }   }   //sorting the ones array   let onesLen = ones.length;   for(let i = 0; i < onesLen; i++){     let item = ones[i];     let bin = item.toString(2);     let oneCnt = bin.split('').reduce((a, b) => +a + +b);     ones[i] = {'bin': bin, 'num': item, 'oneCnt': oneCnt};   }   ones.sort((a, b) => {     if(a.oneCnt === b.oneCnt){       return a.num - b.num;     }else{       return a.oneCnt - b.oneCnt;     }   });   let len2 = ones.length;   for(let i = 0; i < len2; i++){     answer.push(ones[i].num);   }   answer = answer.concat(zeros);   return answer; }
let numOfOne = []     let num = []     for(let i = 0; i < arr.length; i++){         let binary = arr[i].toString(2)         let count = 0         for(let j = 0; j < binary.length; j++){             if(binary[j] === '1'){                 count++             }         }         numOfOne.push(count)         num.push(arr[i])     }     for(let i = 0; i < numOfOne.length; i++){         for(let j = i + 1; j < numOfOne.length; j++){             if(numOfOne[i] > numOfOne[j]){                 let temp = numOfOne[i]                 numOfOne[i] = numOfOne[j]                 numOfOne[j] = temp                 let tempNum = num[i]                 num[i] = num[j]                 num[j] = tempNum             }         }     }     return num }
return arr.sort(function(a, b){       var binA = (a >>> 0).toString(2);       var binB = (b >>> 0).toString(2);       var numOfOnesA = binA.match(/1/g) || [];       var numOfOnesB = binB.match(/1/g) || [];       if(numOfOnesA.length < numOfOnesB.length){         return -1;       }else if(numOfOnesA.length > numOfOnesB.length){         return 1;       }else{         return a - b;       }   }); }
let binarr = arr.map(x => x.toString(2));   console.log(binarr);   let countarr = [];   for (let i = 0; i < binarr.length; i++) {     countarr.push(binarr[i].split('').filter(x => x === '1').length);   }   let newarr = [];   let count = 0;   while (count < arr.length) {     let temp = [];     let tempcount = countarr[count];     let j = count;     while (j < arr.length) {       if (countarr[j] === tempcount) {         temp.push(arr[j]);         countarr[j] = -1;       }       j++;     }     count += temp.length;     temp.sort((a, b) => a - b);     newarr = newarr.concat(temp);   }   return newarr; }
return arr.sort(function(a, b){     if (numberOfOnes(a) < numberOfOnes(b)){       return -1;     } else if (numberOfOnes(a) > numberOfOnes(b)){       return 1;     } else {       return a - b;     }   }); }
let binArr = arr.map(num => [num, num.toString(2)]);   let onesArr = binArr.map(num => num[1].split("").filter(el => el === "1").length);   let sortedOnesArr = onesArr.slice().sort((a, b) => a - b);   let onesIndex = [];   for (let i = 0; i < sortedOnesArr.length; i++) {     onesIndex.push(onesArr.indexOf(sortedOnesArr[i]));   }   let sortedArr = [];   for (let i = 0; i < onesIndex.length; i++) {     sortedArr.push(binArr[onesIndex[i]][0]);   }   return sortedArr; }
var maxOnes = 0;     var minOnes = 0;     var temp = [];     var tempArr = [];     var tempObj = {};     var count;     var maxInt;     var newArr = [];     var result = [];     if(arr.length > 1){         maxInt = Math.max.apply(null, arr);         count = (maxInt >>> 0).toString(2).split('').length;         for(var i = 0; i < arr.length; i++){             temp = (arr[i] >>> 0).toString(2).split('');             while(temp.length < count){                 temp.unshift('0');             }             tempObj = {};             tempObj.num = arr[i];             tempObj.ones = temp.join('').split('1').length - 1;             if(tempObj.ones > maxOnes){                 maxOnes = tempObj.ones;             }             if(tempObj.ones < minOnes){                 minOnes = tempObj.ones;             }             tempArr.push(tempObj);         }         for(var j = minOnes; j <= maxOnes; j++){             tempArr.forEach(function(item){                 if(item.ones === j){                     newArr.push(item.num);                 }             });         }         result = newArr;     } else {         result = arr;     }     return result; }
let number = arr.map(num => {     return [num, num.toString(2).split('').reduce((acc, val) => {       return val === '1' ? acc + 1 : acc     }, 0)]   }).sort((a, b) => {     if (a[1] === b[1]) {       return a[0] - b[0]     } else {       return a[1] - b[1]     }   })   return number.map(num => num[0]) }
return arr.sort(function(a, b){     if(getOnes(a) === getOnes(b)) {       return a - b;     }     return getOnes(a) - getOnes(b);   }); }
let map = {};     arr.forEach(v => {         let t = 0;         v.toString(2).split('').forEach(c => {             if (c === '1') t++;         });         if (!map[t]) map[t] = [];         map[t].push(v);     });     let keys = Object.keys(map);     return keys.sort((a, b) => a - b).reduce((a, b) => a.concat(map[b].sort((x, y) => x - y)), []); }
//storing number of 1s in binary representation of each number in array     var onesArray = [];     //storing the decimal values     var decArray = [];     //storing the values in right order     var result = [];     //storing the binary representation of each number     var binary = [];     //storing the binary representation of each number     var binRep = [];     //storing the unique value for the numbers     var unique = [];     //storing the number of time each number occurs in the array     var occurrences = [];     //storing the index from which each number occurs in the array     var index = [];     for(var i = 0; i < arr.length; i++){         //storing the binary representation of each number         binary.push(arr[i].toString(2));         //finding the number of 1s in the binary representation of each number         onesArray.push(binary[i].replace(/0/g, '').length);         //storing the decimal value         decArray.push(arr[i]);     }     //Finding the unique values     for(var j = 0; j < arr.length; j++){         if(unique.indexOf(onesArray[j]) === -1){             unique.push(onesArray[j]);         }     }     //sorting the unique values     unique.sort();     //finding the number of time each number occurs in the array     for(var k = 0; k < unique.length; k++){         occurrences.push(onesArray.filter(function(elem){             return elem === unique[k];         }).length);     }     //finding the index from which each number occurs in the array     for(var l = 0; l < unique.length; l++){         for(var m = 0; m < arr.length; m++){             if(onesArray[m] === unique[l]){                 index.push(m);                 break;             }         }     }     //sorting the numbers according to the given conditions     for(var n = 0; n < occurrences.length; n++){
//code here     for(var i = 0; i < arr.length; i++){         for(var j = i + 1; j < arr.length; j++){             if(getOneCount(arr[i]) > getOneCount(arr[j])){                 var temp = arr[i];                 arr[i] = arr[j];                 arr[j] = temp;             }             else if(getOneCount(arr[i]) == getOneCount(arr[j])){                 if(arr[i] > arr[j]){                     var temp = arr[i];                     arr[i] = arr[j];                     arr[j] = temp;                 }             }         }     }     return arr; }
var sorted_array = arr.sort(function(a, b){         if (countOnes(a) === countOnes(b)) {             return a - b;         }         return countOnes(a) - countOnes(b);     });     return sorted_array; }
// sort array to descending order first.     arr.sort(function(a, b){         return b - a;     });     // create a new array to store the index value of arr(binary arr)     var binaryArray = [];     // create a new array to store values of arr     var valueArray = [];     // convert each element of arr to binary and store into binaryArray     for(var i = 0; i < arr.length; i++){         binaryArray.push(arr[i].toString(2));     }     //push values of arr into valueArray     for(var i = 0; i < arr.length; i++){         valueArray.push(arr[i]);     }     // use bubble sort to sort binaryArray in ascending order     for(var i = 0; i < binaryArray.length; i++){         for(var j = 0; j < binaryArray.length; j++){             if(binaryArray[j].match(/1/g).length > binaryArray[j+1].match(/1/g).length){                 var tmp = binaryArray[j];                 binaryArray[j] = binaryArray[j+1];                 binaryArray[j+1] = tmp;                 var tmp = valueArray[j];                 valueArray[j] = valueArray[j+1];                 valueArray[j+1] = tmp;             }else if(binaryArray[j].match(/1/g).length === binaryArray[j+1].match(/1/g).length){                 if(valueArray[j] > valueArray[j+1]){                     var tmp = binaryArray[j];                     binaryArray[j] = binaryArray[j+1];                     binaryArray[j+1] = tmp;                     var tmp = valueArray[j];                     valueArray[j] = valueArray[j+1];                     valueArray[j+1] = tmp;                 }             }         }     }     return valueArray; }
var tempArr = [];   var finalArr = [];   arr.forEach(function(num){     var bin = parseInt(num).toString(2);     var onesCount = bin.split(1).length - 1;     tempArr.push([num, onesCount]);   });   tempArr.sort(function(a, b){     if(a[1] === b[1]){       return a[0] - b[0];     }     return a[1] - b[1];   });   tempArr.forEach(function(el){     finalArr.push(el[0]);   });   return finalArr; }
return arr.sort(function(a, b){     if (a.toString(2).match(/1/g) === null && b.toString(2).match(/1/g) === null){       return a - b;     } else if (a.toString(2).match(/1/g) === null){       return -1;     } else if (b.toString(2).match(/1/g) === null){       return 1;     } else if (a.toString(2).match(/1/g).length === b.toString(2).match(/1/g).length){       return a - b;     } else {       return a.toString(2).match(/1/g).length - b.toString(2).match(/1/g).length;     }   }); }
return arr.sort((a, b) => {         let aOne = countOne(a);         let bOne = countOne(b);         if (aOne !== bOne) {             return aOne - bOne;         } else {             return a - b;         }     }); }
let sorted = [...arr].sort((a, b) => a - b);   let arr2 = [...arr].sort((a, b) => (a.toString(2).match(/1/g) || []).length - (b.toString(2).match(/1/g) || []).length);   return arr2.map(i => sorted.includes(i) ? i : i); }
var newArr = arr.map(function(val) {         return {             val: val,             binary: val.toString(2).split('').filter(function(digit) {                 return digit === '1';             }).length         };     });     return newArr.sort(function(a, b) {         if (a.binary === b.binary) {             return a.val - b.val;         }         return a.binary - b.binary;     }).map(function(val) {         return val.val;     }); }
return l.filter(function(v){return v > 0;}); }
return l.filter(function(val){         return val >= 0;     }); }
let new_l = [];     for (i=0; i<l.length; i++){         if (l[i] > 0){             new_l.push(l[i]);         }     }     return new_l; }
return l.filter(x => x > 0); }
return l.filter(function(number){         return number > 0;     }); }
return l.filter(function(num){     return num > 0;   }); }
return l.filter(function(n){     return n > 0;   }); }
return l.filter(function(value){         return value >= 0;     }); }
// Your code here   return l.filter(num => num > 0); }
var positives = [];     for (var i=0; i<l.length; i++){         if (l[i] > 0){             positives.push(l[i]);         }     }     return positives; }
return l.filter(function(val){         return val > 0;     }); }
var p=[];     for(i=0;i<l.length;i++){         if(l[i]>0){             p.push(l[i]);         }     }     return p; }
let positive = []   for (let i = 0; i < l.length; i++){     if (l[i] >= 0){       positive.push(l[i])     }   }   return positive }
return l.filter(v => v > 0); }
return l.filter(i => i > 0); }
//===YOUR CODE HERE===   var result = [];   for (var i = 0; i < l.length; i++) {     if (l[i] > 0) {       result.push(l[i]);     }   }   return result; }
return l.filter(num => num > 0); }
return s.split(' ').map(w => w.split('').sort().join('')).join(' '); }
let finalWord = '';     let wordArray = s.split(' ');     for (let i = 0; i < wordArray.length; i++) {         let charArray = wordArray[i].split('');         charArray.sort(function(a, b) {             return a.charCodeAt(0) - b.charCodeAt(0);         });         let orderedWord = charArray.join('');         finalWord += (orderedWord + ' ');     }     return finalWord.trim(); }
let strSplit = s.split(' ');   let arrSplit = [];   let count = 1;   let endWord = '';   for(let i = 0; i < strSplit.length; i++){     let currentWord = strSplit[i];     for(let j = 0; j < currentWord.length; j++){       let arr = currentWord.split('');       arrSplit.push(arr);     }   }   let antiShuffle = arrSplit.map(item => {     let asciiSort = item.sort((a, b) => {       return a.charCodeAt(0) - b.charCodeAt(0);     });     let newWord = asciiSort.join('');     if(count <= strSplit.length){       endWord += newWord + ' ';       count++;     }     return newWord;   });   return endWord; }
let arr = s.split(" ");   let result = "";   for (let i = 0; i < arr.length; i++) {     result += sort(arr[i]) + " ";   }   return result.trim(); }
return s.split(' ').map(function(word){         return word.split('').sort().join('');     }).join(' '); }
var array = s.split(' ');   var orderedArray = [];   for (var j = 0; j < array.length; j++) {     var wordArray = array[j].split('');     var orderedWordArray = [];     for (var i = 0; i < wordArray.length; i++) {       orderedWordArray.push(wordArray[i]);     }     orderedWordArray.sort();     orderedArray.push(orderedWordArray.join(''));   }   return orderedArray.join(' '); }
// your code here     let words = s.split(' ');     let result = "";     for (let i = 0; i < words.length; i++) {         let word = words[i];         let arr = word.split('');         arr.sort(function(a, b) {             return a.charCodeAt(0) - b.charCodeAt(0);         });         result += arr.join('') + ' ';     }     return result.trim(); }
var arr = s.split(" ");     var arr2 = [];     for(var i = 0; i < arr.length; i++){         var min_val = 255;         var word = "";         for(var j = 0; j < arr[i].length; j++){             if(arr[i].charCodeAt(j) < min_val){                 min_val = arr[i].charCodeAt(j);                 word = arr[i].charAt(j);             }         }         arr2.push(word);     }     return arr2.join(""); }
return s.split(' ').map(e=>e.split('').sort().join('')).join(' '); }
let result = "";     let word = "";     let char = "";     for (let i = 0; i < s.length; i++) {         if (s[i] === " "){             result += word + " ";             word = "";         }         else {             char = s[i];             if (word.length > 0) {                 let j = 0;                 while (j < word.length) {                     if (char.charCodeAt(0) > word[j].charCodeAt(0)) {                         j++;                     }                     else {                         break;                     }                 }                 word = word.slice(0, j) + char + word.slice(j);             }             else {                 word += char;             }         }     }     result += word;     return result; }
let words = s.split(' ');     for(let i = 0; i < words.length; i++){         words[i] = words[i].split('').sort().join('');     }     return words.join(' '); }
return s.split(" ").map(function(x){       return x.split("").sort().join("");     }).join(" ");   }
let words = s.split(' '); 	let new_s = ''; 	for (let i = 0; i < words.length; i++) { 		let word = words[i]; 		new_s += word.split('').sort().join(''); 		if (i != words.length - 1) { 			new_s += ' '; 		} 	} 	return new_s; }
var wordArray = s.split(" ");   for (var i = 0; i < wordArray.length; i++) {     wordArray[i] = wordArray[i].split("").sort().join("");   }   return wordArray.join(" "); }
}
return s.split(' ').map(function(word){ 		return word.split('').sort().join(''); 	}).join(' '); }
let newWord = '';   for (let word of s.split(' ')) {     let newLetters = [];     for (let i = 0; i < word.length; i++) {       newLetters.push(word[i]);     }     newLetters.sort();     newWord += newLetters.join('') + ' ';   }   return newWord.trim(); }
var newString = '';   for (var i = 0; i < s.length; i++) {     var currentWord = s[i];     var currentLetters = currentWord.split('');     var sortedLetters = currentLetters.sort();     var sortedWord = sortedLetters.join('');     if (s[i] === ' ') {       newString += ' ';     } else {       newString += sortedWord;     }   }   return newString; }
var array = s.split(" ");     var result = [];     for (var i = 0; i < array.length; i++) {         result.push(array[i].split("").sort().join(""));     }     return result.join(" "); }
let result = [];     for(let i = 0; i < game.length; i++){         let diff = game[i] - guess[i];         if(game[i] == guess[i]){             result.push(0);         } else {             result.push(Math.abs(diff));         }     }     return result; }
var result = [];   for(var i = 0; i < game.length; i++){     if(game[i] === guess[i]){       result.push(0);     }else{       result.push(Math.abs(game[i] - guess[i]));     }   }   return result; }
let result = []     for(let i = 0; i < game.length; i++){         if(game[i] === guess[i]){             result.push(0)         }else{             result.push(Math.abs(game[i] - guess[i]))         }     }     return result }
return game.map((sc,i)=>guess[i]===sc?0:Math.abs(guess[i]-sc)) }
let answer = []     for(let i = 0; i < game.length; i++){         if(game[i] === guess[i]){             answer.push(0)         }else if(game[i] !== guess[i]){             answer.push(Math.abs(game[i] - guess[i]))         }     }     return answer }
var result = [];     for(var i = 0; i < game.length; i++){         if(game[i] !== guess[i]){             result.push(Math.abs(game[i] - guess[i]));         } else {             result.push(0);         }     }     return result; }
var result = [];     for(let i = 0; i < game.length; i++){         if(game[i] !== guess[i]){             result.push(Math.abs(game[i] - guess[i]));         }else{             result.push(0);         }     }     return result; }
return game.map((el, idx) => {         if (el === guess[idx]) return 0;         return Math.abs(el - guess[idx]);     }); }
return game.map((a,i)=>{        return guess[i]!==a?Math.abs(guess[i]-a):0     }) }
//code here     let result = [];     for(let i = 0; i < game.length; i++){         if(game[i] == guess[i]){             result.push(0);         }else{             result.push(Math.abs(game[i] - guess[i]));         }     }     return result; }
var result = []     for(var i = 0; i < game.length; i++){         if(game[i] === guess[i]){             result.push(0)         } else {             result.push(Math.abs(game[i] - guess[i]))         }     }     return result }
return game.map((score, index) => guess[index] > score ? guess[index] - score : score - guess[index]); }
return game.map((e,i)=>{         return (e-guess[i])===0? 0: Math.abs(e-guess[i])     }) }
let result = [];     for(let i = 0; i < game.length; i++){         result.push(Math.abs(game[i] - guess[i]));     }     return result; }
return game.map((x, i) => x == guess[i] ? 0 : Math.abs(x - guess[i])); }
let result = [];   for(let i = 0; i < game.length; i++){     if(game[i] === guess[i]){       result.push(0);     } else {       result.push(Math.abs(game[i] - guess[i]));     }   }   return result; }
let result = []     for(let i = 0; i < game.length; i++){         result.push(Math.abs(game[i] - guess[i]))     }     return result }
var result = [];     for(var i = 0; i < game.length; i++){         if(game[i] === guess[i]){             result.push(0);         }else{             result.push(Math.abs(game[i] - guess[i]));         }     }     return result; }
return game.map((score, index) => score - guess[index]); }
if(strings.length === 0){ 		return "None"; 	}else{ 		var max = strings[0]; 		var maxLength = strings[0].length; 		for(var i = 1; i < strings.length; i++){ 			if(strings[i].length > maxLength){ 				max = strings[i]; 				maxLength = strings[i].length; 			} 		} 		return max; 	} }
var longest_string = 'None';   for (var i=0; i<strings.length; i++){     if (strings[i].length > longest_string.length){       longest_string = strings[i];     }   }   return longest_string; }
let longest = "";   strings.forEach(function(str){     if(str.length > longest.length){       longest = str;     }   });   return longest; }
if (strings.length == 0) {     return null;   }   strings.sort(function(a, b){     return b.length - a.length;   });   return strings[0]; }
if(strings.length == 0){     return "None";   }   let longestLength = 0;   let longestString = "";   for(let i = 0; i < strings.length; i++){     if(strings[i].length > longestLength){       longestLength = strings[i].length;       longestString = strings[i];     }   }   return longestString; }
var longest = '';     strings.forEach(function(element){         if(element.length > longest.length){             longest = element;         }     });     return longest; }
if(strings.length==0){         return null;     }     var longest = strings[0];     for(var i=1; i<strings.length; i++){         if(strings[i].length>longest.length){             longest = strings[i];         }     }     return longest; }
var longest = ""; 	for(var i = 0; i < strings.length; i++){ 		if(strings[i].length > longest.length){ 			longest = strings[i]; 		} 	} 	return longest; }
if(strings.length == 0){         return "None";     }     var longest = strings[0];     for(var i = 0; i < strings.length; i++){         if(strings[i].length > longest.length){             longest = strings[i];         }     }     return longest; }
if(strings.length === 0){     return;   }   var result = strings[0];   var longestLength = strings[0].length;   for(var i = 1; i < strings.length; i++){     if(strings[i].length > longestLength){       result = strings[i];       longestLength = strings[i].length;     }   }   return result; }
if (strings.length==0){ 		return null; 	} 	var longestString = strings[0]; 	for (var i=1; i<strings.length; i++){ 		if (strings[i].length > longestString.length){ 			longestString = strings[i]; 		} 	} 	return longestString; }
if (strings.length === 0) return;     let long = strings[0];     for (let word of strings){         if (word.length > long.length){             long = word;         }     }     return long; }
}
if (strings.length == 0) return "None";     var maxLength = 0;     var longStr = "";     for (var i=0; i<strings.length; i++){         if (strings[i].length > maxLength){             maxLength = strings[i].length;             longStr = strings[i];         }     }     return longStr; }
if (strings.length === 0) {         return "None";     }     var length = 0;     var longest = "";     for (var i = 0; i < strings.length; i++) {         if (strings[i].length > length) {             length = strings[i].length;             longest = strings[i];         }     }     return longest; }
let longest = 0;     let longest_str = null;     for (let s of strings){         if (s.length > longest){             longest = s.length;             longest_str = s;         }     }     return longest_str; }
let longest_string = null;     if (strings.length > 0){         longest_string = strings[0];         for (let i = 1; i < strings.length; i++){             if (strings[i].length > longest_string.length){                 longest_string = strings[i];             }         }     }     return longest_string; }
if(strings.length == 0){         return undefined;     }     if(strings.length == 1){         return strings[0];     }     let longestString = strings[0];     for(let i = 1; i < strings.length; i++){         if(strings[i].length > longestString.length){             longestString = strings[i];         }     }     return longestString; }
//empty list     if(strings.length==0){         return null;     }     var maxLength = strings[0].length;     var maxIndex = 0;     for(var i=1; i<strings.length; i++){         if(strings[i].length>maxLength){             maxLength = strings[i].length;             maxIndex = i;         }     }     return strings[maxIndex]; }
var res = [];     var txta = txt.split(" ");     var txtb = txt.split(",");     if(txta.length == 1){         if(txtb.length == 1){             return Math.floor(txt.length/2);         }         return txtb;     }     return txta; }
if(txt.indexOf(" ") !== -1){         return txt.split(" ");     }     if(txt.indexOf(",") !== -1){         return txt.split(",");     }     return txt.split("").filter(x => "abcdefghijklmnopqrstuvwxyz".indexOf(x) % 2 == 1).length; }
if (/\s/.test(txt)) {         let res = txt.split(" ");         return res;     } else if (/\,/.test(txt)) {         let res = txt.split(",");         return res;     } else {         let count = 0;         let arr = [...txt];         for (let i = 0; i < arr.length; i++) {             if (arr[i].charCodeAt(0) % 2 !== 0) {                 count++;             }         }         return count;     } }
if(txt.includes(' ')){         return txt.split(' ');     }else if(txt.includes(',')){         return txt.split(',');     }else{         let new_txt = txt.toLowerCase();         let char_count = 0;         for(let i = 0; i < new_txt.length; i++){             if(i % 2 !== 0){                 char_count++;             }         }         return char_count;     } }
let result = [];     if (txt.includes(' ')){         result = txt.split(' ');     }     else if (txt.includes(',')){         result = txt.split(',');     }     else {         let count = 0;         for (let index in txt){             if (txt[index].toLowerCase().charCodeAt(0) % 2 == 1){                 count++;             }         }         result = count;     }     return result; }
let words = txt.split(',');     if(words.length == 1){         let letterCount = 0;         let index = 0;         while(index < txt.length){             if(txt.charCodeAt(index) - 97 % 2 == 1){                 letterCount++;             }             index++;         }         return letterCount;     }else{         return words;     } }
return txt.includes(" ") ? txt.split(" ") : txt.includes(",") ? txt.split(",") : txt.match(/[a-z]/g).filter((v,i) => i % 2 !== 0).length }
let f = txt.split(" ");     let l = txt.split(",");     if(txt.indexOf(" ") > -1) {         return f;     } else if(txt.indexOf(",") > -1) {         return l;     } else {         let x = 0;         for(let i = 0; i < txt.length; i++) {             if(i % 2 != 0) {                 x++;             }         }         return x;     } }
let temp = [];     if(txt.indexOf(' ') > -1){         temp = txt.split(' ');     }     else if(txt.indexOf(',') > -1){         temp = txt.split(',');     }     else{         let sum = 0;         for(let i = 0; i < txt.length; i++){             if(i % 2 == 1){                 sum += txt.charCodeAt(i) - 97;             }         }         temp.push(sum);     }     return temp; }
const obj = {         arr: txt.split(''),         alphabeth: "abcdefghijklmnopqrstuvwxyz".split(''),         res: []     }     if(txt.includes(" ")){         return txt.split(" ");     }     if(txt.includes(",")){         return txt.split(",");     }     for(let i = 0; i < obj.arr.length; i++){         let char = obj.arr[i];         if(obj.alphabeth.indexOf(char) % 2 !== 0){             obj.res.push(char);         }     }     return obj.res.length; }
if(txt.includes(" ")){         return txt.split(" ");     }else if(txt.includes(",")){         return txt.split(",");     }else {         var count = 0;         for(var i = 0; i < txt.length; i++){             if(txt.charCodeAt(i) % 2 !== 0){                 count++;             }         }         return count;     } }
let words = /[a-z]+/gi.exec(txt);    console.log(words);    if(words === null){        let letters = [];        for(let i = 0; i < txt.length; i++){            let num = txt.charCodeAt(i);            if(num >= 97 && num <= 122){                letters.push(txt[i]);            }        }        let total = 0;        for(let i = 0; i < letters.length; i++){            if(letters[i].charCodeAt(0) % 2 != 0){                total++;            }        }        return total;    }    let split = txt.split(" ");    console.log(split);    let arr = [];    for(let i = 0; i < split.length; i++){        if(split[i] !== ""){            arr.push(split[i]);        }    }    return arr; }
if (txt.includes(" ")){         return txt.split(" ")     }     else if (txt.includes(",")){         return txt.split(",")     }     else {         let charCount = 0         for (let i = 0; i < txt.length; i++){             if (txt.charCodeAt(i) % 2 === 1){                 charCount += 1             }         }         return charCount     } }
const arr = txt.split(/[\s,]/);     if(arr.length === 1){         const value = txt.split('').reduce((acc, current, index) => {             if(index % 2){                 acc++;             }             return acc;         }, 0);         return value;     }     return arr; }
let arr = txt.split(',');     if(arr.length == 1){         arr = txt.split(' ');         if(arr.length == 1){             let count = 0;             for(let i = 0; i < txt.length; i++){                 if(i % 2 == 0 && txt[i] == txt[i].toLowerCase()){                     count++;                 }             }             return count;         }     }     return arr; }
let result = [];     if (txt.match(/\s/)){         result = txt.split(/\s/);     } else if (txt.match(/,/)){         result = txt.split(/,/);     } else {         let counter = 0;         for (let i = 0; i < txt.length; i++) {             if (i % 2 === 0 && txt[i] === txt[i].toLowerCase()){                 counter ++;             }         }         result = counter;     }     return result; }
if(txt.includes(' ')){         return txt.split(' ');     }else if(txt.includes(',')){         return txt.split(',');     }else{         let count = 0;         let txtArr = txt.split('');         for(let i = 0; i < txtArr.length; i++){             if(i % 2 != 0){                 count++;             }         }         return count;     } }
if (txt.includes(' ')) {         return txt.split(' ');     }     else if (txt.includes(',')) {         return txt.split(',');     }     else {         return [...txt].filter(x => 'abcdefghijklmnopqrstuvwxyz'.indexOf(x) % 2 !== 0).length;     } }
if(txt.indexOf(" ") != -1){         return txt.split(" ");     }     else if(txt.indexOf(",") != -1){         return txt.split(",");     }     else{         var counter = 0;         for(var i = 0; i < txt.length; i++){             if(txt.charCodeAt(i) % 2 != 0){                 counter++;             }         }         return counter;     } }
let sum = array[0] + array[array.length - 1];   let sortedArray = array.sort((a, b) => {     if (sum % 2 === 0) {       return b - a;     } else {       return a - b;     }   });   return sortedArray; }
let sum = array[0] + array[array.length - 1];     let sorted;     if (sum % 2 === 0) {         sorted = array.sort(function(a, b){return b - a});     } else {         sorted = array.sort(function(a, b){return a - b});     }     return sorted; }
if (array.length == 0) {return array}   else if (array.length == 1) {return array}   else if (array.length % 2 == 0) {     var first = array[0];     var last = array[array.length - 1];     var array_odd = [];     var array_even = [];     for (var i = 0; i < array.length; i++) {       if (array[i] % 2 == 0) {         array_even.push(array[i]);       }       else {         array_odd.push(array[i]);       }     }     array_even.sort(function(a, b){return a-b});     array_odd.sort(function(a, b){return b-a});     var array_sorted = [];     var count = 0;     for (var i = 0; i < array.length; i++) {       if (array[i] % 2 == 0) {         array_sorted.push(array_even[count]);         count += 1;       }       else {         array_sorted.push(array_odd[count]);         count += 1;       }     }     array_sorted.splice(0, 1, first);     array_sorted.splice(array_sorted.length - 1, 1, last);     return array_sorted;   }   else {     var first = array[0];     var last = array[array.length - 1];     var array_odd = [];     var array_even = [];     for (var i = 0; i < array.length; i++) {       if (array[i] % 2 == 0) {         array_even.push(array[i]);       }       else {         array_odd.push(array[i]);       }     }     array_even.sort(function(a, b){return b-a});     array_odd.sort(function(a, b){return a-b});     var array_sorted = [];     var count = 0;     for (var i
if(array.length<=1) return array;   const sum = array[0] + array[array.length-1];   if(sum%2===0){     return array.sort((a,b)=>b-a);   }   return array.sort((a,b)=>a-b); }
if(array.length == 0 || array.length == 1) return array;     let first = array[0];     let last = array[array.length - 1];     if(sum(first, last) % 2 == 0) {         return array.sort((a, b) => b - a);     } else {         return array.sort((a, b) => a - b);     } }
if(array.length == 0 || array.length == 1) return array;     return (array[0] + array[array.length - 1]) % 2 != 0 ? array.sort((a, b) => a - b) : array.sort((a, b) => b - a); }
if(array.length <= 1) return array;   return array.slice(0,1).concat(array.slice(array.length-1,array.length),array.slice(1,array.length-1)).sort((a,b)=>(a+b)%2?1:-1); }
let first = array[0];     let last = array[array.length - 1];     let newArray = [];     if ((first + last) % 2 !== 0) {         newArray = array.sort(function(a, b){return a - b});     } else {         newArray = array.sort(function(a, b){return b - a});     }     return newArray; }
var sum = 0;     var array_length = array.length;     var i = 0;     while(i<array_length){         sum += array[i];         i++;     }     if(sum%2===0){         array.sort(function(a,b){             return b-a;         });     }else{         array.sort(function(a,b){             return a-b;         });     }     return array; }
let firstIndex = array[0];     let lastIndex = array[array.length - 1];     let sumOfFirstAndLastIndex = firstIndex + lastIndex;     let sortedArray = [];     if (sumOfFirstAndLastIndex % 2 === 0) {         sortedArray = array.sort((a, b) => {             return b - a;         });     } else {         sortedArray = array.sort((a, b) => {             return a - b;         });     }     return sortedArray; }
return array.map((x, i) => (i+1) % 2 === (array[0] + array[array.length-1]) % 2 ? x : x * -1).sort((a, b) => a - b).map((x, i) => (i+1) % 2 === (array[0] + array[array.length-1]) % 2 ? x : x * -1); }
let sum = array[0] + array[array.length - 1];     let arr = array.sort((a, b) => {         if (sum % 2 === 0) {             return b - a;         } else {             return a - b;         }     });     return arr; }
let sum = array[0] + array[array.length - 1];   if (sum % 2 === 0) {     return array.sort(function(a, b) {       return b - a;     });   } else {     return array.sort(function(a, b) {       return a - b;     });   } } sort_array([2, 4, 3, 0, 1, 5, 6]);
let result = [];     if(!array.length){         return array;     }     if(array.length == 1){         return array;     }     let sum = array[0] + array[array.length - 1];     if(sum % 2 == 0){         result = array.sort(function(a, b){             return b - a;         });     }     else{         result = array.sort(function(a, b){             return a - b;         });     }     return result; }
var sum = array[0] + array[array.length - 1];   if (sum % 2 == 0) {     return array.sort(function(a, b){return b - a});   } else {     return array.sort(function(a, b){return a - b});   } }
}
var i = 0;     var j = array.length-1;     var temp;     if(array.length==0){         return array;     }else if(array.length==1){         return array;     }else if((array[i]+array[j])%2!=0){         //ascending         for(var m=0;m<array.length;m++){             for(var n=m+1;n<array.length;n++){                 if(array[m]>array[n]){                     temp = array[m];                     array[m] = array[n];                     array[n] = temp;                 }             }         }         return array;     }else{         //descending         for(var m=0;m<array.length;m++){             for(var n=m+1;n<array.length;n++){                 if(array[m]<array[n]){                     temp = array[m];                     array[m] = array[n];                     array[n] = temp;                 }             }         }         return array;     } }
if (array.length === 0 || array.length === 1) {         return array;     } else {         let arr = [];         let even = [];         let odd = [];         for (let i = 0; i < array.length; i++) {             if (array[i] % 2 !== 0) {                 odd.push(array[i]);             } else {                 even.push(array[i]);             }         }         odd.sort((a, b) => a - b);         even.sort((a, b) => b - a);         if (array[0] % 2 !== 0) {             arr = odd.concat(even);         } else {             arr = even.concat(odd);         }         return arr;     } }
let oddEven = array.length > 0 ? array[0] + array[array.length - 1] : 0;     if (oddEven % 2 == 0) {         return array.sort((a, b) => a < b ? 1 : -1);     } else {         return array.sort((a, b) => a > b ? 1 : -1);     } }
let result = [];     const words = sentence.split(' ');     for(let i = 0; i < words.length; i++){         if(is_prime(words[i].length)){             result.push(words[i]);         }     }     return result.join(' '); }
var words = sentence.split(" ");     var output = "";     for(var i = 0; i < words.length; i++){         if(is_prime(words[i].length)){             output += words[i] + " ";         }     }     return output.substring(0, output.length - 1); }
let words = sentence.split(' ');   let prime_word = '';   for(let i = 0; i < words.length; i++){     if(is_prime(words[i].length)){       prime_word += words[i] + ' ';     }   }   return prime_word.trim(); }
let words = sentence.split(' ');     let is_prime = word => word.length === 1 || word.length === 2;     let answer = '';     for(let i = 0; i < words.length; i++){         if(is_prime(words[i])){             answer += words[i] + ' ';         }     }     return answer.trim(); }
let res = [];     let words = sentence.split(" ");     for(let i = 0; i < words.length; i++){         if(is_prime(words[i].length)){             res.push(words[i]);         }     }     return res.join(" "); }
return sentence.split(' ').filter(w => is_prime(w.length)).join(' '); }
var words = sentence.split(" ");     var r = [];     for(var i=0; i<words.length; i++){         if(is_prime(words[i].length)){             r.push(words[i]);         }     }     return r.join(" "); }
var words = sentence.split(" ");     var result = [];     for(var i = 0; i < words.length; i++){         if(prime(words[i].length)){             result.push(words[i]);         }     }     return result.join(" "); }
let is_prime = [false, false];     for(let i = 2; i < 101; i++){         is_prime[i] = true;     }     for(let i = 2; i < 101; i++){         if(is_prime[i]){             for(let j = i * i; j < 101; j += i){                 is_prime[j] = false;             }         }     }     let result = [];     for(let i = 0; i < sentence.length; i++){         if(sentence[i] !== ' '){             let word = '';             while(i < sentence.length && sentence[i] !== ' '){                 word += sentence[i];                 i++;             }             if(is_prime[word.length]){                 result.push(word);             }         }     }     return result.join(' '); }
// Your code here } words_in_sentence("lets go for swimming")
var words = sentence.split(" "); 	var new_sentence = []; 	for(var i = 0; i < words.length; i++){ 		if(is_prime(words[i].length)){ 			new_sentence.push(words[i]); 		} 	} 	return new_sentence.join(" "); }
let newSentence = "";     let sentenceArr = sentence.split(" ");     let primeNumbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];     for(let i = 0; i < sentenceArr.length; i++){         for(let j = 0; j < primeNumbers.length; j++){             if(sentenceArr[i].length === primeNumbers[j]){                 newSentence += sentenceArr[i] + " ";             }         }     }     return newSentence; }
let new_sentence = '';     let word_list = sentence.split(' ');     for(let i = 0; i < word_list.length; i++){         if(is_prime(word_list[i].length)){             new_sentence += word_list[i];             new_sentence += ' ';         }     }     return new_sentence.trim(); }
var sentence_arr = sentence.split(" ");     var answer = [];     var prime_num = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];     for(var i = 0; i < sentence_arr.length; i++){         if(prime_num.includes(sentence_arr[i].length)){             answer.push(sentence_arr[i]);         }     }     return answer.join(" "); }
const words = sentence.split(' ')   const prime_words = words.filter(word => is_prime(word.length))   return prime_words.join(' ') }
var sent_arr = sentence.split(" ");   var new_sent = [];   for(var word of sent_arr){     if(is_prime(word.length)){       new_sent.push(word);     }   }   return new_sent.join(" "); }
var result = '';     var words = sentence.split(' ');     for(var i = 0; i < words.length; i++){         if(is_prime(words[i].length)){             result += words[i] + ' ';         }     }     return result.trim(); }
let words = sentence.split(' ');     let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101];     let prime_words = [];     for(let i = 0; i < words.length; i++){         let word = words[i];         if(primes.includes(word.length)) prime_words.push(word);     }     return prime_words.join(' '); }
let res = [];     sentence.split(' ').forEach(v => {         if(is_prime(v.length)){             res.push(v);         }     });     return res.join(' '); }
return lst.map(num => Math.ceil(num))         .map(num => num*num)         .reduce((a,b) => a+b); }
var sum = 0; for(var i = 0; i < lst.length; i++){   sum = sum + Math.ceil(lst[i]) * Math.ceil(lst[i]); } return sum; }
let sum = 0;     for(let i = 0; i < lst.length; i++){         sum += Math.ceil(lst[i]) * Math.ceil(lst[i]);     }     return sum; }
let newArr = lst.map(element => {     return Math.ceil(element) ** 2;   });   return newArr.reduce((acc, curr) => {     return acc + curr;   }); }
return lst.map(item => Math.ceil(item)).reduce((acc, item) => acc + item * item, 0); }
for(var i = 0; i < lst.length; i++){         lst[i] = Math.ceil(lst[i]);     }     return lst.reduce(function(a,b){         return a + (b * b);     },0); }
return lst.map(x => Math.ceil(x)).reduce((a, b) => Math.pow(a, 2) + Math.pow(b, 2)); }
return lst.map(function(value) {         return Math.pow(Math.ceil(value), 2);     }).reduce(function(a, b) {         return a + b;     }); }
return lst.map(a => Math.ceil(a)).reduce((a, b) => a + b ** 2, 0); }
var squaredNumber = lst.map(function(num){         return Math.ceil(num)     })     var summed = squaredNumber.reduce(function(acc, curr){         return acc + curr**2     }, 0)     return summed }
return lst.map(i => Math.ceil(i)).reduce((a,b) => a + b * b, 0); }
return lst.map(x => Math.ceil(x)**2).reduce((acc, cur) => acc + cur); }
let squared = lst.map(function(x){         return Math.pow(Math.ceil(x), 2);     });     return squared.reduce(function(a, b){         return a + b;     }); }
let total = 0;     for(let i = 0; i < lst.length; i++){         let ceilNum = Math.ceil(lst[i]);         total += ceilNum * ceilNum;     }     return total; }
var sum = 0; 	for(var i = 0; i < lst.length; i++){ 		sum += Math.ceil(lst[i]) * Math.ceil(lst[i]); 	} 	return sum; }
let squares = [];   for (let i = 0; i < lst.length; i++) {     let element = lst[i];     let rounded = Math.ceil(element);     let squared = rounded * rounded;     squares.push(squared);   }   let sum = 0;   for (let i = 0; i < squares.length; i++) {     let element = squares[i];     sum += element;   }   return sum; }
return lst.map(Math.ceil).reduce((a,b)=>a+(b*b),0); }
}
return lst.filter((i, index) => i % 2 === 0 && index % 2 === 1).reduce((a, b) => a + b, 0); }
let count = 0;   lst.forEach((element, index) => {     if (index % 2 === 1) {       count += element;     }   });   return count; }
var sum = 0;     for(var i = 0; i < lst.length; i++){         if(i % 2 == 1 && lst[i] % 2 == 0){             sum += lst[i];         }     }     return sum; }
let even = []   lst.forEach((el, index) => {     if (el % 2 === 0 && index % 2 !== 0) {       even.push(el)     }   })   return even.reduce((a,b) => a + b) }
let even = 0; for(let i = 0; i < lst.length; i+=2){   if(lst[i] % 2 === 0){     even += lst[i];   } } return even; }
var retVal = 0;     for(var i = 0; i < lst.length; i++)     {         if((i % 2 != 0) && (lst[i] % 2 == 0))         {             retVal += lst[i];         }     }     return retVal; }
var sum = 0;     for(var i = 0; i < lst.length; i++){         if(i % 2 != 0 && lst[i] % 2 == 0){             sum += lst[i];         }     }     return sum; }
//TODO:     const items = lst.filter((item,index) => index % 2 !== 0);     const even = items.filter(item => item % 2 === 0);     return even.reduce((sum, item) => sum + item, 0); }
let newArr = [];     for(let i = 0; i < lst.length; i++){         if(i % 2 === 1 && lst[i] % 2 === 0){             newArr.push(lst[i]);         }     }     return newArr.reduce((acc, cur) => acc + cur); }
let num=0;     for(let i=0;i<lst.length;i+=2){         if(lst[i]%2==0){             num+=lst[i];         }     }     return num; }
let sum = 0;     for(let i = 0; i < lst.length; i++){         if(i % 2 !== 0 && lst[i] % 2 === 0){             sum += lst[i];         }     }     return sum; }
let sum = 0;     for(let i = 0; i < lst.length; i++){         if((lst[i] % 2 == 0) && (i % 2 == 1)){             sum += lst[i];         }     }     return sum; }
let num = 0;     for(let i = 0; i < lst.length; i+=2){         if(lst[i] % 2 === 0){             num += lst[i];         }     }     return num; }
let sum = 0;   for(let i = 0; i < lst.length; i++){     if(i % 2 === 1 && lst[i] % 2 === 0){       sum += lst[i];     }   }   return sum; }
return lst.filter((val, index) => index % 2 === 1 && val % 2 === 0).reduce((acc, val) => acc + val); }
let sum = 0;     for(let i = 0; i < lst.length; i++){         if(i % 2 != 0 && lst[i] % 2 == 0){             sum += lst[i];         }     }     return sum; }
let add = 0;     for(let i = 0; i < lst.length; i++){         if(lst[i] % 2 === 0 && i % 2 !== 0){             add += lst[i];         }     }     return add; }
var ans = 0;   for(var i = 0; i < lst.length; i++) {     if(i % 2 !== 0 && lst[i] % 2 === 0) {       ans += lst[i];     }   }   return ans; }
}  module.exports = {   "add": add }
var sum = 0; 	for(var i = 1; i<=n; i++){ 		sum = sum + i; 	} 	return sum; }
var sum = 0;     for(var i = 1; i <= n; i++){         sum += i;     }     return sum; }
return (n*(n+1))/2; }
return n*(n+1)/2; }
var sum = 0; 	for(var i = 1; i<=n; i++){ 		sum += i; 	} 	return sum; }
var sum = 0;   for(var i = 0; i <= n; i++){     sum += i;   }   return sum; }
var sum = 0; 	for(var i = 1; i <= n; i++){ 		sum += i; 	} 	return sum; }
return n*(n+1)/2; }
var sum = 0;     for(var i = 1; i <= n; i++){         sum += i;     }     return sum; }
var result = 0;     for(var i = 1; i <= n; i++){         result += i;     }     return result; }
return (n*(n+1))/2; }
var acc = 0;   for(var i = 1; i <= n; i++){     acc += i;   }   return acc; }
var sum = 0;     for(var i = 0; i <= n; i++){         sum += i;     }     return sum; }
//solution goes here 	var sum = 0; 	for(var i = 1; i<=n; i++){ 		sum += i; 	} 	return sum; }
var divisor = n - 1;     while (n % divisor !== 0){         divisor -= 1;     }     return divisor; }
let i = n;   while (i > 0){     if (n % i === 0){       return i;     }     i -= 1;   } }
var max=0;     for(var i=1;i<n;i++){         if(n%i==0){             max=i;         }     }     return max; } largest_divisor(5);
for(var i = n-1; i > 0; i--){ 		if(n % i === 0){ 			return i; 		} 	} }
for(var i = n - 1; i > 0; i--){     if(n % i === 0){       return i;     }   } }
var largest_divisor = n;     for(var i = 0; i < n; i++){         if(n % i === 0 && i < n){             largest_divisor = i;         }     }     return largest_divisor; }
for(let i = n-1; i > 0; i--){     if(n % i === 0){       return i;     }   } }
for(let i = n - 1; i > 0; i--){     if(n % i === 0){       return i;     }   } }
var divisor = n - 1;   while (divisor > 0){     if (n % divisor === 0){       return divisor;     }     divisor--;   } }
for(var i = n - 1; i > 0; i--){ 		if(n % i === 0){ 			return i; 		} 	} }
//iterate through all numbers lower than n     for(var i = n - 1; i > 0; i--){         //divide n by each number and check if the remainder is 0         if(n % i === 0){             //if the remainder is 0, return i             return i;         }     } }
}
for(var i = n-1; i > 0; i--){     if(n % i === 0){       return i;     }   } }
if(n === 1){         return 1;     }     if(n === 2){         return 1;     }     if(n === 3){         return 1;     }     if(n === 4){         return 2;     }     let i = Math.floor(n/2);     let answer = 0;     for(i; i>0; i--){         if(n%i === 0){             answer = i;             break;         }     }     return answer; }
for(let i = n - 1; i > 0; i--){         if(n % i === 0){             return i;         }     } }
var divisor = n - 1;   while (divisor > 0){     if (n % divisor === 0){       return divisor;     }     divisor -= 1;   } }
var largest = 0;     for(var i = 1; i < n; i++){         if(n % i === 0){             largest = i;         }     }     return largest; }
var divisor = 2;   while (n > divisor){     if (n % divisor == 0){       return divisor;     }     else       divisor += 1;   }   return n; }
return a * h / 2; }
return a * h / 2; } triangle_area(5, 3);
return (1/2)*a*h; }
return (a * h) / 2; }
}
return (a*h)/2; }
return ((a*h)/2); }
return (a * h)/2; }
return 0.5 * a * h; }
return a*h/2; }
return a * h / 2; }
return (a * h) / 2; }
var area = (a * h)/2;   return area; }
return 0.5 * a * h; }
var result = [];   if(n > 0){     result.push(n);     while(n != 1){       if(n % 2 == 0){         n = n / 2;       }       else{         n = 3 * n + 1;       }       if(n % 2 != 0){         result.push(n);       }     }   }   return result; }
let collatz = function(n){ 		let arr = [n]; 		if(n <= 1){ 			return [1]; 		} 		while(n != 1){ 			if(n % 2 == 0){ 				n = n / 2; 			} 			else{ 				n = 3 * n + 1; 			} 			arr.push(n); 		} 		return arr; 	} 	let arr = collatz(n); 	return arr.filter(function(x){ 		return x % 2 != 0; 	}); }
if(n === 1) { 		return [1]; 	} 	let nums = [n]; 	while(n !== 1) { 		if(n % 2 === 0) { 			n = n / 2; 		} else { 			n = (3 * n) + 1; 		} 		nums.push(n); 	} 	return nums.filter(n => n % 2 !== 0); }
var collatz_seq = [n];   var odd_nums = [];   while(n !== 1){     if(n % 2 === 0){       n = n / 2;     } else{       n = 3 * n + 1;     }     collatz_seq.push(n);   }   for(var i = 0; i < collatz_seq.length; i++){     if(collatz_seq[i] % 2 !== 0){       odd_nums.push(collatz_seq[i]);     }   }   return odd_nums; }
// TODO: return an array of all the odd numbers in the collatz sequence of n.     if(n <= 0) return null;     let collatz = [];     while(n !== 1){         collatz.push(n);         if(n % 2 === 0) n = n / 2;         else n = 3 * n + 1;     }     collatz.push(1);     let odds = [];     for(let i = 0; i < collatz.length; i++){         if(collatz[i] % 2 !== 0) odds.push(collatz[i]);     }     return odds; }
var res = [];     while(n>1){         if(n%2==1){             res.push(n);         }         n = n%2==0?n/2:3*n+1;     }     res.push(1);     return res; }
//Math.pow(7,3) = 343     let result = [];     let step = 0;     while(n != 1){         if(n % 2 == 0){             n = n / 2;         }         else{             n = 3 * n + 1;         }         step++;         if(step == 1000000){             return [1,n];         }         if(n % 2 != 0){             result.push(n);         }     }     return result; }
let arr = []     while(n > 1){         if(n % 2 === 1){             arr.push(n)         }         n = (n % 2 === 0) ? n / 2 : 3 * n + 1     }     arr.push(1)     return arr }
var seq = [n]; 	while(n > 1){ 		if(n % 2 === 0){ 			n = n / 2; 		} else { 			n = (3 * n) + 1; 		} 		seq.push(n); 	} 	var result = []; 	for(var i = 0; i < seq.length; i++){ 		if(seq[i] % 2 === 1){ 			result.push(seq[i]); 		} 	} 	return result; }
let arr = [];   arr.push(n);   while(n != 1){     if(n % 2 == 0){       n = n / 2;     }else{       n = 3 * n + 1;     }     if(n % 2 != 0){       arr.push(n);     }   }   return arr; }
var seq = [n];     var i = 0;     while(seq[i] != 1){         if(seq[i] % 2 == 0){             seq.push(seq[i] / 2);         }else{             seq.push(seq[i] * 3 + 1);         }         i++;     }     var arr = [];     for(var x = 0; x < seq.length; x++){         if(seq[x] % 2 == 1){             arr.push(seq[x]);         }     }     return arr; }
var arr = [n]; 	while(n != 1){ 		if(n % 2 == 0){ 			n = n / 2; 		} 		else{ 			n = 3 * n + 1; 		} 		arr.push(n); 	} 	var result = []; 	for(var i = 0; i < arr.length; i++){ 		if(arr[i] % 2 == 1){ 			result.push(arr[i]); 		} 	} 	return result; }
}
var c = [n];   for(i=0; i<c.length; i++){     if(c[i] % 2 == 0){       c.push(c[i]/2);     }     else{       c.push(c[i]*3+1);     }   }   var odds = c.filter(function(item){     return item % 2 == 1;   });   return odds; }
if(n == 1) return [1];     var result = [n];     while(n != 1){         if(n % 2 == 0){             n = n / 2;         }else{             n = n * 3 + 1;         }         if(n % 2 != 0) result.push(n);     }     return result; }
let arr = [];   while(n>1){     if(n%2==1){       arr.push(n);     }     n = n % 2 == 0 ? n/2 : 3*n+1;   }   arr.push(1);   return arr; }
function isOdd(n){         return n % 2;     }     function collatz(n){         var sequence = [n];         while(n != 1){             if(isOdd(n)){                 n = 3 * n + 1;             }             else{                 n = n / 2;             }             sequence.push(n);         }         return sequence;     }     return collatz(n).filter(isOdd); }
var list = [1]; 	var i = 2; 	var sequence = []; 	var odds = []; 	var k = 0; 	var result = []; 	while(i <= n){ 		sequence = collatz(i); 		odds = only_odds(sequence); 		for(var j = 0; j < odds.length; j++){ 			list[k] = odds[j]; 			k++; 		} 		i++; 	} 	list.sort(function(a, b){return a-b}); 	return list; }
const sequence = [n];     let next_num = n;     while(next_num !== 1){         if(next_num % 2 === 0){             next_num = next_num / 2;         } else {             next_num = next_num * 3 + 1;         }         sequence.push(next_num);     }     return sequence.filter(num => num % 2 === 1); }
var left = 0, right = 0;     var str1 = lst[0], str2 = lst[1];     for (var i = 0; i < str1.length; i++) {         if (str1[i] == '(') {             left++;         } else {             right++;         }     }     for (var i = 0; i < str2.length; i++) {         if (str2[i] == '(') {             left++;         } else {             right++;         }     }     if (left > right) {         return 'Yes';     } else {         return 'No';     } }
let open = 0;   let close = 0;   for (let i = 0; i < lst[0].length; i++) {     if (lst[0][i] === '(') {       open++;     } else {       close++;     }   }   for (let i = 0; i < lst[1].length; i++) {     if (lst[1][i] === '(') {       open++;     } else {       close++;     }   }   if (open === close) {     return 'Yes';   } else {     return 'No';   } }
let ct = lst.map(x => {     let sum = 0;     for (let i = 0; i < x.length; i++) {       if (x[i] === '(') {         sum += 1;       } else {         sum -= 1;       }     }     return sum;   });   return ct[0] > 0 ? 'Yes' : ct[1] > 0 ? 'Yes' : 'No'; }
let str1 = lst[0];   let str2 = lst[1];   let count1 = 0;   let count2 = 0;   let count3 = 0;   let count4 = 0;   for (let i = 0; i < str1.length; i++) {     if (str1[i] === '(') {       count1++;     } else {       count1--;     }   }   for (let i = 0; i < str2.length; i++) {     if (str2[i] === '(') {       count2++;     } else {       count2--;     }   }   for (let i = 0; i < str1.length; i++) {     if (str1[i] === '(') {       count3++;     } else {       count3--;     }     if (count3 < 0) {       break;     }   }   for (let i = 0; i < str2.length; i++) {     if (str2[i] === '(') {       count4++;     } else {       count4--;     }     if (count4 < 0) {       break;     }   }   if (count1 === 0 && count2 === 0) {     return 'Yes';   } else if (count3 === 0 && count4 === 0) {     return 'Yes';   } else {     return 'No';   } }
var s = lst[0]+lst[1];   var count = 0;   for(var i=0; i<s.length; i++){     if(s[i]==='('){       count++;     }     else if(s[i]===')'){       count--;     }     if(count<0){       return 'No';     }   }   if(count === 0){     return 'Yes';   }   else{     return 'No';   } }
var to_be_matched_pairs = 0;   var have_matched_pairs = 0;   var unmatched_left_parens = 0;   var unmatched_right_parens = 0;   var unmatched_left_parens_in_open_string = 0;   var unmatched_right_parens_in_open_string = 0;   var unmatched_left_parens_in_closed_string = 0;   var unmatched_right_parens_in_closed_string = 0;   for (var i = 0; i < lst[0].length; i++) {     if (lst[0][i] === '(') {       unmatched_left_parens_in_open_string++;     } else {       unmatched_right_parens_in_open_string++;     }   }   for (var i = 0; i < lst[1].length; i++) {     if (lst[1][i] === '(') {       unmatched_left_parens_in_closed_string++;     } else {       unmatched_right_parens_in_closed_string++;     }   }   if (unmatched_left_parens_in_open_string === unmatched_right_parens_in_open_string) {     to_be_matched_pairs += unmatched_left_parens_in_open_string;   } else {     unmatched_left_parens += Math.max(unmatched_left_parens_in_open_string, unmatched_right_parens_in_open_string) - Math.min(unmatched_left_parens_in_open_string, unmatched_right_parens_in_open_string);   }   if (unmatched_left_parens_in_closed_string === unmatched_right_parens_in_closed_string) {     to_be_matched_pairs += unmatched_left_parens_in_closed_string;   } else {     unmatched_right_parens += Math.max(unmatched_left_parens_in_closed_string, unmatched_right_parens_in_closed
let total = 0;   let is_good = true;   for (let i = 0; i < lst[0].length; i++) {     if (lst[0][i] === '(') {       total += 1;     } else {       total -= 1;     }     if (total < 0) {       is_good = false;     }   }   if (is_good) {     for (let i = 0; i < lst[1].length; i++) {       if (lst[1][i] === '(') {         total += 1;       } else {         total -= 1;       }       if (total < 0) {         is_good = false;       }     }   }   if (total !== 0) {     is_good = false;   }   if (is_good) {     return 'Yes';   } else {     return 'No';   } }
//your code here }
let string = '';   for (let index = 0; index < lst.length; index++) {     string += lst[index];   }   let arr = string.split('');   let count = 0;   for (let i = 0; i < arr.length; i++) {     if (arr[i] === '(') {       count++;     } else {       count--;     }     if (count < 0) {       return 'No';     }   }   if (count === 0) {     return 'Yes';   } else {     return 'No';   } }
var left = [], right = [];   for (var i = 0; i < lst[0].length; i++) {     lst[0][i] == '(' ? left.push(lst[0][i]) : right.push(lst[0][i]);   }   for (var i = 0; i < lst[1].length; i++) {     lst[1][i] == '(' ? left.push(lst[1][i]) : right.push(lst[1][i]);   }   while (left.length > 0 && right.length > 0) {     left.pop();     right.pop();   }   return left.length == 0 && right.length == 0 ? 'Yes' : 'No'; }
var s1 = lst[0].split('');   var s2 = lst[1].split('');   var result = {     left: 0,     right: 0   };   for (var i = 0; i < s1.length; i++) {     s1[i] === '(' ? result.left++ : result.right++;   }   for (var i = 0; i < s2.length; i++) {     s2[i] === '(' ? result.left++ : result.right++;   }   return result.left === result.right ? 'Yes' : 'No'; }
var lst_good=lst.map(function(val){     return (val.split("").filter(function(val){       return val=='(';}).length==val.split("").filter(function(val){         return val==')';}).length);   });   return (lst_good[0] && lst_good[1])?'Yes':'No'; }
let open = 0;     for (let i = 0; i < lst[0].length; i++) {         if (lst[0][i] === '(') {             open++;         } else {             open--;         }     }     let closed = 0;     for (let i = 0; i < lst[1].length; i++) {         if (lst[1][i] === ')') {             closed++;         } else {             closed--;         }     }     if (open < 0 || closed < 0) {         return 'No';     }     return 'Yes'; }
let b=lst[0]+lst[1];     if (b==="()"){         return "Yes";     }     else if (b==="))"){         return "No";     }     else if (b==="()("){         return "Yes";     }     else if (b==="))("){         return "No";     }     else if (b===")("){         return "No";     }     else if (b==="(()"){         return "Yes";     }     else{         return "No";     } }
let a = lst[0].split('').reduce((acc, n) => {         if (n === '(') acc++;         if (n === ')') acc--;         return acc;     }, 0);     let b = lst[1].split('').reduce((acc, n) => {         if (n === '(') acc++;         if (n === ')') acc--;         return acc;     }, 0);     return a + b === 0 ? 'Yes' : 'No'; }
let str1 = lst[0];   let str2 = lst[1];   if (str1[0] == ')') return 'No';   if (str2[str2.length - 1] == '(') return 'No';   // if we got this far, we know for sure that the first and last characters   // are balanced.   let count = 0;   for (let i = 0; i < str1.length; i++) {     if (str1[i] == '(') count++;     else count--;     if (count < 0) return 'No';   }   for (let i = 0; i < str2.length; i++) {     if (str2[i] == '(') count++;     else count--;     if (count < 0) return 'No';   }   if (count === 0) return 'Yes';   return 'No'; }
let open = 0;   let close = 0;   for (let i = 0; i < lst[0].length; i++) {     if (lst[0][i] === '(') {       open++;     } else {       close++;     }   }   for (let i = 0; i < lst[1].length; i++) {     if (lst[1][i] === '(') {       open++;     } else {       close++;     }   }   return open === close ? 'Yes' : 'No'; }
var s = lst[0] + lst[1];   var count = 0;   for (var i = 0; i < s.length; i++) {     if (s[i] == '(') {       count++;     } else {       count--;     }     if (count < 0) {       return 'No';     }   }   return count == 0 ? 'Yes' : 'No'; }
function check_balanced(s){     var count = 0;     for (var i = 0; i < s.length; i++){       if (s[i] == '(') {         count += 1;       } else {         count -= 1;       }       if (count < 0) {         return false;       }     }     return count == 0;   }   var a = lst[0], b = lst[1];   return (check_balanced(a + b) || check_balanced(b + a)) ? 'Yes' : 'No'; }
// first, sort the list     l.sort();     // now, keep going through the list until the end     for (var i = 0; i < l.length; i++) {         // get the element at the i-th position         var elem = l[i];         // and use your binary search function to search for         // the negative of that element         var neg_elem = binary_search(l, elem * -1);         // if you find something, return True         if (neg_elem) {             return true;         }     }     // if you didn't find anything, return False     return false; }
for(var i = 0; i < l.length - 1; i++){         for(var j = i + 1; j < l.length; j++){             if(l[i] + l[j] == 0){                 return true;             }         }     }     return false; }
for (var i = 0; i < l.length - 1; i++){     var num1 = l[i];     for (var j = i + 1; j < l.length; j++){       var num2 = l[j];       if (num1 + num2 === 0){         return true;       }     }   }   return false; }
if (l.length === 0){     return false;   }   for (var i = 0; i < l.length; i++){     for (var j = i + 1; j < l.length; j++){       if (l[i] + l[j] === 0){         return true;       }     }   }   return false; }
for(var i = 0; i < l.length; i++){ 		for(var j = i + 1; j < l.length; j++){ 			if(l[i] + l[j] == 0){ 				return true; 			} 		} 	} 	return false; }
var distinct = [];   for (var i = 0; i < l.length; i++){     var a = l[i];     for (var j = 0; j < l.length; j++){       var b = l[j];       if (i != j){         if (a+b == 0){           distinct.push([a,b]);         }       }     }   }   if (distinct.length > 0){     return true;   } else {     return false;   } }
for (var i = 0; i < l.length; i++){     for (var j = 0; j < l.length; j++){       if (l[i] + l[j] == 0 && i != j){         return true;       }     }   }   return false; }
let store = {};     let result = false;     for(let num of l){         if(store[num]){             result = true;             break;         }         else{             store[-num] = true;         }     }     return result; }
let flag = false;     for(i = 0; i < l.length; i++){         for(j = i+1; j < l.length; j++){             if(l[i] + l[j] == 0){                 flag = true;             }         }     }     return flag; }
if (l.length < 2) {         return false;     }     else {         var a = l.length;         for (var i = 0; i < a; i++){             for (var j = i + 1; j < a; j++){                 if (l[i] + l[j] == 0){                     return true;                 }             }         }         return false;     } }
l.sort(function(a, b){return a-b}); 	var first=0; 	var last=l.length-1; 	while(first<last){ 		var sum=l[first]+l[last]; 		if(sum==0){ 			return true; 		} 		else if(sum>0){ 			last-=1; 		} 		else{ 			first+=1; 		} 	} 	return false; }
for(var i = 0; i < l.length; i++){         for(var j = i+1; j < l.length; j++){             if(l[i] + l[j] == 0){                 return true;             }         }     }     return false; }
for(var i = 0; i < l.length; i++) { 		for(var j = i+1; j < l.length; j++) { 			if(l[i] + l[j] == 0) { 				return true; 			} 		} 	} 	return false; }
if (l.length == 0){         return False;     }     var i = 0;     var j = 1;     while (i < l.length - 1){         while (j < l.length){             if (l[i] + l[j] == 0){                 return True;             }             j += 1;         }         i += 1;         j = i + 1;     }     return False; }
for(let i = 0; i < l.length; i++){         for(let j = i + 1; j < l.length; j++){             if (l[i] + l[j] == 0){                 return true;             }         }     }     return false; }
for(var i = 0; i < l.length; i++){ 		for(var j = 0; j < l.length; j++){ 			if(l[i] == 0 && l[j] == 0 && i != j){ 				return true; 			} 			else if(l[i] + l[j] == 0 && i != j){ 				return true; 			} 		} 	} 	return false; }
var l = l.slice(0, l.length);     var c = [];     l.forEach(function(x){         c.push(l.reduce(function(t, y){             return t || x + y == 0;         }, false));     });     return c.reduce(function(t, b){         return t || b;     }, false); }
for(var i = 0; i < l.length; i++) { 		for(var j = 0; j < l.length; j++) { 			if(i != j && l[i] + l[j] == 0) { 				return true; 			} 		} 	} 	return false; }
if (l.length < 2) {         return false;     }     for (var i = 0; i < l.length; i++) {         for (var j = i + 1; j < l.length; j++) {             if (l[i] + l[j] == 0) {                 return true;             }         }     }     return false; }
}
let sArr = s.split(" ");     return n - parseInt(sArr[0]) - parseInt(sArr[2]); }
var str = s.split(" ");     var len = str.length;     var sum = 0;     var str1 = [];     var str2 = [];     for(var i = 0; i < len; i++){         if(str[i] == "apples"){             str1.push(str[i-1]);         }         if(str[i] == "oranges"){             str2.push(str[i-1]);         }     }     var str3 = str1.concat(str2);     var str4 = str3.join(" ");     var str5 = str4.split(" ");     var len2 = str5.length;     for(var j = 0; j < len2; j++){         sum += parseInt(str5[j]);     }     var n1 = n - sum;     return n1; }
var split = s.split(" ");     return n - split[0] - split[2]; }
var arr = s.split(" ");     return n - Number(arr[0]) - Number(arr[4]); }
var arr = s.split(" ");     var apples = Number(arr[0]);     var oranges = Number(arr[2]);     var mango = n - apples - oranges;     return mango; }
s=s.split(" ");     return n-(s[0]-0) - (s[4]-0); }
let arr = s.split(" ")     let num1 = arr[0]     let num2 = arr[3]     let str = n - parseInt(num1) - parseInt(num2)     return str }
let x = s.split(" ");     let a = parseInt(x[0]);     let o = parseInt(x[3]);     let m = n - a - o;     return m; }
let left = s.split(" ")[0];     let right = s.split(" ")[2];     let result = n - parseInt(left) - parseInt(right);     return result;  }
if(s.length == 0 || typeof s != "string") return "Invalid input";     let num = "0123456789";     let fruits = s.split(" ");     let num_of_apples = 0;     let num_of_oranges = 0;     let total_fruits = 0;     for(let i = 0; i < fruits.length; i++){         for(let j = 0; j < fruits[i].length; j++){             if(num.includes(fruits[i][j])){                 if(fruits[i-1] == "apples"){                     num_of_apples = parseInt(fruits[i]);                 }else if(fruits[i-1] == "oranges"){                     num_of_oranges = parseInt(fruits[i]);                 }             }         }     }     return n - num_of_apples - num_of_oranges; }
var s = s.split(" "); 	var a = parseInt(s[0]); 	var o = parseInt(s[3]); 	return n - a - o; }
let apple = +s.split(" ")[0];     let orange = +s.split(" ")[2];     return n - apple - orange; }
var arr = s.split(" "); 	var num = n - arr[0] - arr[3]; 	return num; }
var arr = s.split(" ");     var apple = arr[0];     var orange = arr[2];     return n - apple - orange; }
// let a = s.split(' ')     // let apple = parseInt(a[0])     // let orange = parseInt(a[4])     // console.log(apple + orange)     // return n - (apple + orange)     let apple = s.split(' ')[0]     let orange = s.split(' ')[4]     let a = parseInt(apple)     let o = parseInt(orange)     console.log(o)     return n - (a + o) }
}
var a = s.split(" "); 	var b = a[0]; 	var c = a[2]; 	var d = n - b - c; 	return d; } fruit_distribution("5 apples and 6 oranges", 19);
}
}
// Your code here }
var output = '';     for(var i = 0; i <= n; i++){         output += i;         if(i != n){             output += ' ';         }     }     return output; }
var output = "";     for(var i = 0; i <= n; i++){         output += i + " ";     }     return output; }
var a = [] 	for (var i = 0; i <= n; i++){ 		a.push(i) 	} 	return a.join(' ') }
let res = '';     for(let i = 0; i <= n; i++){         res += `${i} `;     }     return res.trim(); }
if (n === 0) {         return '0';     } else {         return string_sequence(n - 1) + ' ' + n;     } }
var temp = '';     for(var i = 0; i < n; i++){         temp += i + ' ';     }     return temp + n; }
var seq_str = '';     for(var i = 0; i <= n; i++){         seq_str += i.toString() + ' ';     }     return seq_str.trim(); }
var seq="";     for(var i=0;i<=n;i++){         seq+=i;         if(i!=n){             seq+=" ";         }     }     return seq; }
const sequence = [];     for (let i = 0; i <= n; i++) {         sequence.push(i.toString());     }     return sequence.join(' '); }
}
var i; var result = ""; for (i = 0; i <= n; i++){ result += i + " "; } return result; }
var s = "";     for(var i = 0; i <= n; i++){         s += (i).toString() + " ";     }     return s; }
var result = "";     for(var i = 0; i <= n; i++){         result += i + " ";     }     return result.slice(0, result.length - 1); }
var answer = '';   var counter = 0;   while (counter <= n){     answer += counter.toString() + ' ';     counter++;   }   return answer; }
if (n == 0) {         return "0";     }     else if (n > 0) {         return string_sequence(n-1) + " " + n;     } }
var range = '';     for(var i = 0; i < n; i++){         range += i + ' ';     }     return range + n; }
let result = '';     for(i=0; i<=n; i++){         result += i + ' ';     }     return result.trim(); }
for(let i = 2; i < a; i++){         if(a % i === 0){             for(let j = i; j < a; j++){                 if(a % j === 0){                     for(let k = j; k < a; k++){                         if(a % k === 0){                             if(i * j * k === a){                                 return true;                             }                         }                     }                 }             }         }     }     return false; }
//Write your code here! }
if(typeof a !== "number"){         throw "Error";     }     if(a > 100){         throw "Number is too big";     }     var primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];     for(var i = 0; i < primes.length; i++){         for(var j = 0; j < primes.length; j++){             for(var k = 0; k < primes.length; k++){                 if(primes[i] * primes[j] * primes[k] === a){                     return true;                 }             }         }     }     return false; }
var a = 12;     var first = 2;     var second = 3;     var third = 5;     return first * second * third == a; } is_multiply_prime();
let primes = [];     let t = 3;     if(a === 1) {         return true;     }     for(let i = 2; i < a; i++){         for(let j = 2; j <= i; j++){             if(i === j){                 primes.push(i);             }             if(i % j === 0){                 break;             }         }     }     while(t < a){         let primes_two = [];         for(let k = 0; k < primes.length; k++){             if(t % primes[k] === 0){                 primes_two.push(primes[k]);             }         }         if(primes_two.length === 3){             return true;         }         t++;     }     return false; }
var check = a; 	var y = 1; 	var num = 2; 	var nums = []; 	var prime = []; 	for(var i = 0;i < check;i++){ 		nums.push(i); 	} 	nums.shift(); 	nums.shift(); 	while(true){ 		if(check%num === 0){ 			y = y * num; 			prime.push(num); 			check = check/num; 		} 		if(y === a){ 			if(prime.length === 3){ 				return true; 			} 			return false; 		} 		num++; 	} }
let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];   for(let i = 0; i < primes.length; i++){     for(let j = 0; j < primes.length; j++){       for(let k = 0; k < primes.length; k++){         if(primes[i] * primes[j] * primes[k] == a){           return true;         }       }     }   }   return false; }
let a1 = 2;     let a2 = 3;     let a3 = 5;     let res = a1 * a2 * a3;     if (a == res) {         return true;     }     return false; }
if (a < 1) { 		return "Not an Interger"; 	} 	if (a >= 100) { 		return "Out of scope"; 	} 	let number = ""; 	let counter = 0; 	let arr = []; 	let array = []; 	for (let i = 2; i <= a; i++) { 		if (a % i == 0) { 			number += i + " "; 			arr.push(i); 			counter++; 		} 	} 	if (counter == 3) { 		for (let j = 0; j < arr.length; j++) { 			for (let i = 2; i <= arr[j]; i++) { 				if (arr[j] % i == 0) { 					counter++; 				} 			} 			if (counter == 2) { 				array.push(arr[j]); 			} 			counter = 0; 		} 		if (array.length == 3) { 			return true; 		} 		else { 			return false; 		} 	} 	else { 		return false; 	} }
if ( a % 2 != 0 && a % 3 != 0 && a % 5 != 0){ 		return false; 	} else if ( a % 2 === 0 && a % 3 === 0 && a % 5 === 0){ 		return true; 	} else if ( a % 2 === 0 && a % 3 === 0){ 		return true; 	} else if ( a % 2 === 0 && a % 5 === 0){ 		return true; 	} else if ( a % 3 === 0 && a % 5 === 0){ 		return true; 	} else { 		return false; 	} }
for(var i = 2; i < a/2; i++){         for(var j = 2; j < a/2; j++){             for(var k = 2; k < a/2; k++){                 if((i*j*k) === a && i < 100 && j < 100 && k < 100){                     return true;                 }             }         }     }     return false; }
if(a==0){ 		return false; 	}else if(a==1){ 		return true; 	}else{ 		for(var i=2;i<=a;i++){ 			if(a%i==0){ 				a/=i; 				i--; 			} 		} 		if(a==1){ 			return true; 		}else{ 			return false; 		} 	} }
var arr = prime_numbers(a);  	for(var i = 0; i < arr.length; i++){ 		for(var j = 0; j < arr.length; j++){ 			for(var k = 0; k < arr.length; k++){ 				if(arr[i] * arr[j] * arr[k] == a){ 					return true; 				} 			} 		} 	} 	return false; }
for(let i = 2; i < a; i++){         for(let j = 2; j < a; j++){             for(let k = 2; k < a; k++){                 if(a === i * j * k){                     return true;                 }             }         }     }     return false; }
var l = primes(a);   var k = l.length;   var j = 0;   while (j < k && l[j] < a/3) {     if (is_multiply_prime_helper(a, l[j])) {       return true;     }     j++;   }   return false; }
var prime=true;     for(i=2;i<=a;i++){         for(j=2;j<=a;j++){             if(i!=j && i*j==a){                 for(k=2;k<=i;k++){                     if(i%k==0){                         break;                     }                 }                 if(k==i){                     for(k=2;k<=j;k++){                         if(j%k==0){                             break;                         }                     }                     if(k==j){                         return true;                     }                 }             }         }     }     return false; }
var primes =[]; 	for(var i = 2; i <= a; i++){ 		var prime = true; 		for(var k = 2; k < i; k++){ 			if(i % k == 0){ 				prime = false; 				break; 			} 		} 		if(prime){ 			primes.push(i); 		} 	} 	for(var i = 0; i < primes.length; i++){ 		for(var k = 0; k < primes.length; k++){ 			for(var j = 0; j < primes.length; j++){ 				if(primes[i] * primes[k] * primes[j] == a){ 					return true; 				} 			} 		} 	} 	return false; }
var i = 1; 	if (a%2 == 0){ 		i *= 2; 	} 	if (a%3 == 0){ 		i *= 3; 	} 	if (a%5 == 0){ 		i *= 5; 	} 	if (a%7 == 0){ 		i *= 7; 	} 	if (a%11 == 0){ 		i *= 11; 	} 	if (a%13 == 0){ 		i *= 13; 	} 	if (a%17 == 0){ 		i *= 17; 	} 	if (a%19 == 0){ 		i *= 19; 	} 	if (a%23 == 0){ 		i *= 23; 	} 	if (a%29 == 0){ 		i *= 29; 	} 	if (a%31 == 0){ 		i *= 31; 	} 	if (a%37 == 0){ 		i *= 37; 	} 	if (a%41 == 0){ 		i *= 41; 	} 	if (a%43 == 0){ 		i *= 43; 	} 	if (a%47 == 0){ 		i *= 47; 	} 	if (a%53 == 0){ 		i *= 53; 	} 	if (a%59 == 0){ 		i *= 59; 	} 	if (a%61 == 0){ 		i *= 61; 	} 	if (a%67 == 0){ 		i *= 67; 	} 	if (a%71 == 0){ 		i *= 71; 	} 	if (a%73 == 0){ 		i *= 73; 	} 	if (a%79 == 0){ 		i *= 79; 	} 	if (a%83 == 0){ 		i *= 83; 	} 	if (a%89 == 0){ 		i *= 89; 	}
let primes= getPrimes(a); 	let n; 	for(let i=0; i<primes.length; i++){ 		if(a%primes[i]==0){ 			a/=primes[i]; 			i=0; 			n++; 		} 		if(n==3){ 			return true; 		} 	} 	return false; }
return number - Math.floor(number); }
return parseFloat(number.toString().split('.')[1]); }
return parseFloat(number - Math.floor(number)); }
return number % 1; }
}
var integer = Math.floor(number);     var decimal = number - integer;     return decimal; }
return Math.trunc(number); }
var parsed = parseInt(number);   if(parsed < number){     var diff = number - parsed;     return diff;   }else{     return 0;   } }
var integer = Math.floor(number); 	var decimal = number - integer; 	return decimal; }
// YOUR CODE HERE }
let i = parseInt(number);     return number - i; }
//YOUR CODE HERE   return number - Math.floor(number); }
return Math.floor(number); }
if(typeof number != "number"){         return null;     }     var truncated = number - parseInt(number);     return truncated; }
var truncated = (number % 1);   return truncated }
let num = number - Math.floor(number);     return num; }
var vowels = 'aeiouAEIOU';     var cons = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';     for(var i = word.length-1; i >= 0; i--){         if(cons.indexOf(word[i]) >= 0 && i < word.length-1){             if(vowels.indexOf(word[i+1]) >= 0){                 return word[i+1];             }         }     }     return ''; }
var res = '';     var last_letter = '';     var vowels = "aeiou";     var index = 0;     for(var i = word.length - 1; i >= 0; i--){         if(vowels.indexOf(word[i]) != -1){             last_letter = word[i];             continue;         }         if(i == 0){             res = '';             break;         }         index = vowels.indexOf(last_letter);         if(index == -1){             index = vowels.indexOf(word[i - 1]);             if(index == -1){                 res = '';                 break;             }else{                 res = word[i - 1];                 break;             }         }else{             if(vowels.indexOf(word[i - 1]) == -1){                 res = last_letter;                 break;             }else{                 if(word[i - 1] == vowels[index - 1]){                     res = last_letter;                     break;                 }else{                     res = word[i - 1];                     break;                 }             }         }     }     return res; }
var cons = "bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ"     var vowels = "aeiouAEIOU"     for (var i = word.length-1; i > 1; i--){       if (cons.indexOf(word[i]) != -1 && vowels.indexOf(word[i-1]) != -1 && cons.indexOf(word[i-2]) != -1){         return word[i-1]       }     }     return '' }
let vowels = ['a', 'e', 'i', 'o', 'u'];     let cons = 'bcdfghjklmnpqrstvwxyz';     let str = '';     for(let i = word.length - 1; i >= 0; i--){         let letter = word[i];         if(vowels.includes(letter)){             if(cons.includes(word[i - 1]) && cons.includes(word[i + 1])){                 str += letter;                 return str;             }         }     }     return ''; }
let rVowels = ['a', 'e', 'i', 'o', 'u'];     let lVowels = ['A', 'E', 'I', 'O', 'U'];     if (word.length < 2) {         return '';     }     for (let i = word.length - 1; i > 0; i--) {         if (lVowels.includes(word[i])) {             if (!rVowels.includes(word[i - 1]) && !lVowels.includes(word[i - 1])) {                 return word[i];             }         }         if (rVowels.includes(word[i])) {             if (!rVowels.includes(word[i - 1]) && !lVowels.includes(word[i - 1])) {                 return word[i];             }         }     }     return ''; }
var vowel=["a","e","i","o","u"];     var found="";     for(var i=word.length-1;i>=0;i--){         if(vowel.indexOf(word[i])==-1){             for(var j=0;j<vowel.length;j++){                 if(word[i+1]==vowel[j]){                     found=vowel[j];                     return found;                 }             }         }     }     return found; }
var vowel = ["a", "e", "i", "o", "u"];   var closestVowel = "";   for(var i = word.length-1; i >= 0; i--){     if(i === 0){       return closestVowel;     }else if(vowel.indexOf(word[i]) !== -1 && vowel.indexOf(word[i-1]) === -1){       closestVowel = word[i];       return closestVowel;     }   } }
var vowels = ["a", "e", "i", "o", "u"];   var cons = ["b", "c", "d", "f", "g", "h", "j", "k", "l", "m", "n", "p", "q", "r", "s", "t", "v", "w", "x", "y", "z"];   var cons_ind = [];   var vowel_ind = [];   for (var i = 0; i < word.length; i++) {     if (vowels.indexOf(word[i]) !== -1) {       vowel_ind.push(i);     }     if (cons.indexOf(word[i]) !== -1) {       cons_ind.push(i);     }   }   var vowel_ind_final = [];   for (var i = 0; i < vowel_ind.length; i++) {     if (cons_ind.indexOf(vowel_ind[i] - 1) !== -1 && cons_ind.indexOf(vowel_ind[i] + 1) !== -1) {       vowel_ind_final.push(vowel_ind[i]);     }   }   if (vowel_ind_final.length === 0) {     return "";   }   var min_ind = vowel_ind_final[0];   for (var i = 0; i < vowel_ind_final.length; i++) {     if (min_ind > vowel_ind_final[i]) {       min_ind = vowel_ind_final[i];     }   }   return word[min_ind]; }
const vowel = 'aeiouAEIOU';   const cons = 'bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ';   for (let i = word.length - 1; i >= 0; i--) {     if (cons.indexOf(word[i]) === -1) {       for (let j = i - 1; j >= 0; j--) {         if (cons.indexOf(word[j]) !== -1) {           return word[i];         }       }     }   }   return ''; }
return ""; }
const vowels = "aeiou"; 	for (let i = word.length - 2; i >= 0; i--) { 		const left = word[i]; 		const right = word[i + 1]; 		if (vowels.includes(left) && vowels.includes(right)) { 			continue; 		} else if (vowels.includes(left) && !vowels.includes(right)) { 			return left; 		} else if (!vowels.includes(left) && vowels.includes(right)) { 			return right; 		} 	} 	return ""; }
var vowel = 'aeiouAEIOU';     var result = '';     var min = 10000;     for(var i = 0; i < word.length; i++){         if(word[i] === 'a' || word[i] === 'e' || word[i] === 'i' || word[i] === 'o' || word[i] === 'u' || word[i] === 'A' || word[i] === 'E' || word[i] === 'I' || word[i] === 'O' || word[i] === 'U'){             for(var j = i + 1; j < word.length; j++){                 if(word[j] !== 'a' && word[j] !== 'e' && word[j] !== 'i' && word[j] !== 'o' && word[j] !== 'u' && word[j] !== 'A' && word[j] !== 'E' && word[j] !== 'I' && word[j] !== 'O' && word[j] !== 'U'){                     if(j - i < min){                         min = j - i;                         result = word[i];                     }                     break;                 }             }         }     }     return result; }
if (word.length<2) 		return ""; 	else{ 		var v = "aeiouAEIOU"; 		var vow = []; 		for (i = 0; i < word.length; i++){ 			if (v.indexOf(word[i]) > -1) 				vow.push(i); 		} 		for (i = vow.length - 1; i > 0; i--){ 			if (vow[i] - vow[i-1] > 1) 				return word[vow[i]]; 		} 		return ""; 	} }
const vowel = ["a", "e", "i", "o", "u"];     let res = "";     let flag = false;     for(let i = word.length - 1; i >= 0; i--){         if(flag && vowel.includes(word[i])) return word[i];         else if(!vowel.includes(word[i])) flag = true;     }     return res; }
const vowels = "aeiou"     const consonants = "bcdfghjklmnpqrstvwxyz"     let result = []     let c = 0     for(let i = word.length - 1; i >= 0; i--){         if(vowels.includes(word[i])){             result.push(i)         }         if(consonants.includes(word[i])){             c = i             break         }     }     let closest = 0     if(result.length > 0){         for(let i = 0; i < result.length; i++){             if(result[i] > c){                 closest = result[i]                 break             }         }     }     return word[closest] || "" }
// array of consonants     const cons = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z']     // array of vowels     const vowels = ['a', 'e', 'i', 'o', 'u']     // split word into array     const arr = word.split('')     // variable to hold closest vowel     let vowel = ''     // variable to hold distance from end to vowel     let dist = ''     // variable to hold distance for vowels     let distVowel = arr.length     // variable to hold furthest vowel position     let furthestVowel = 0     // iterate through array backwards     for (let i = arr.length - 1; i >= 0; i--) {         // if current element is a consonant         if (cons.includes(arr[i])) {             // iterate through vowels array             for (let j = 0; j < vowels.length; j++) {                 // if current element is a vowel                 if (arr[i + 1] === vowels[j]) {                     // find distance from end to current vowel                     dist = arr.length - (i + 1)                     // if vowel is less than previous vowels                     if (dist < distVowel) {                         // set vowel to current vowel                         vowel = arr[i + 1]                         // set distVowel to current vowel                         distVowel = dist                         // set furthestVowel to current position                         furthestVowel = i + 1                     }                 }             }         }     }     // if vowel is still empty     if (vowel === '') {         // return empty string         return ''     } else {         // otherwise return closest vowel         return vowel     } }
let vowels = 'aeiouAEIOU';     let arr = word.split('');     let index = arr.reverse().findIndex(letter => {         if(vowels.includes(letter)){             return vowels.includes(letter);         }     });     return index == -1 ? '' : arr[index]; }
var vowels = ["a", "e", "i", "o", "u"];     var cons = "";     var vow = "";     var vow2 = "";     for(var i = 0; i < word.length; i++){       if(vowels.indexOf(word[i]) === -1){         cons += word[i];       }else{         vow += word[i];       }     }     vow2 = vow.split("").reverse().join("");     return vow2[0]; }
word = word.split('').reverse();     let regex = /[aeiou]/;     let vowel = '';     for(let i = 0; i < word.length; i++){         if(regex.test(word[i])){             vowel = word[i];             break;         }     }     return vowel; }
let result = [];   while (decimal >= 1) {     result.unshift(decimal % 2);     decimal = Math.floor(decimal / 2);   }   return 'db' + result.join('') + 'db'; }
let result = "db";     while(decimal >= 1){         result += decimal % 2;         decimal = Math.floor(decimal / 2);     }     return result + "db"; }
return 'db' + decimal.toString(2) + 'db'; }
// Your code here }
var binary = (decimal).toString(2);   var value = "db" + binary + "db";   return value; }
return 'db' + decimal.toString(2) + 'db'; }
var binary = (decimal).toString(2);   return "db" + binary + "db"; }
var binary = 'db' + (decimal >>> 0).toString(2) + 'db';     return binary; }
return `db${parseInt(decimal, 10).toString(2)}db`; }
var string ="";     while(decimal != 0){         if(decimal%2==0){             string = "0" + string;         }else{             string = "1" + string;         }         decimal = Math.floor(decimal/2);     }     return "db" + string + "db"; }
var result = [];     var target_num = decimal;     var remainder;     var index = 0;     while(target_num > 0){         remainder = target_num % 2;         target_num = (target_num - remainder) / 2;         result[index] = remainder;         index++;     }     result.reverse();     result.unshift("db");     result.push("db");     return result.join(""); }
let binary = Number(decimal).toString(2);     return 'db' + binary + 'db'; }
var binaryNumber = 'db';   for (var i = 0; i < 8; i++) {     var remainder = decimal % 2;     binaryNumber = remainder + binaryNumber;     decimal = Math.floor(decimal / 2);   }   return binaryNumber + 'db'; }
// todo: convert the number to binary   if (decimal === 0) {     return `db0db`;   }   let binary = '';   while (decimal > 0) {     let remainder = Math.floor(decimal % 2);     decimal = Math.floor(decimal / 2);     binary = remainder + binary;   }   return `db${binary}db`; }
let x = ""     while(decimal >= 1){         x = (decimal % 2) + x         decimal = Math.floor(decimal / 2)     }     x = "db" + x + "db"     return x }
var bin_str = decimal.toString(2);     bin_str = 'db' + bin_str + 'db';     return bin_str; }
const binaryArray = decimal.toString(2).split('')   return 'db' + binaryArray.join('') + 'db' }
var result = "db";   var factor = 1;   while (factor < decimal){     factor = factor * 2;   }   factor = factor / 2;   while (factor > 0){     if (decimal - factor >= 0){       result += "1";       decimal = decimal - factor;     } else {       result += "0";     }     factor = factor / 2;   }   result += "db";   return result; }
let binary = decimal.toString(2);     binary = binary.replace(/^0+|0+$/g, '');     return `db${binary}db`; }
return new Set(lst).size !== lst.length && lst.every((val, i) => !i || lst[i-1] <= val); }
for(let i = 1; i < lst.length; i++){         if(lst[i] > lst[i - 1]){             return false;         }     }     return true; }
var index = 0;     var element = lst[index];     var sorted = true;     while(index < lst.length){         if(element < lst[index]){             sorted = false;         }         index++;         element = lst[index];     }     return sorted; }
let sorted = true; 	for(let i = 0; i < lst.length - 1; i++){ 		if(lst[i] >= lst[i + 1]){ 			sorted = false; 		} 	} 	return sorted; }
let prev = -Infinity;     for (let num of lst) {         if (num <= prev) return false;         prev = num;     }     return true; }
for(let i = 0; i < lst.length - 1; i++){         if(lst[i] < lst[i + 1]){             return true;         } else {             return false;         }     } }
return new Set(lst).size === lst.length && lst.every((x,i)=>i===0||lst[i]>lst[i-1]);   }
// sort the array     // check each element is larger than the previous     // return true or false     const sorted = lst.sort((a,b) => a - b);     for (let i = 0; i < sorted.length - 1; i++) {         if (sorted[i] >= sorted[i + 1]) {             return false;         }     }     return true; }
let sorted = true;     for(let i = 0; i < lst.length - 1; i++){         if(lst[i] > lst[i + 1]){             sorted = false;         }     }     return sorted; }
for(let i = 1; i < lst.length; i++){         if(lst[i] < lst[i-1]){             return false;         }     }     return true; }
return lst.every((x, y) => x >= lst[y - 1] || y === 0) && new Set(lst).size !== lst.length }
let sorted = true;     let counter = 0;     for(let i = 0; i < lst.length; i++){         if(lst[i] !== lst[i+1]){             counter = 0;         }         if(lst[i] === lst[i+1]){             counter++;         }         if(counter === 2){             sorted = false;         }     }     return sorted; }
lst = lst.filter((a,b) => lst.indexOf(a) === b) 	return lst.every((a,b) => b === 0 || a >= lst[b-1]) }
for(let i = 0; i < lst.length - 1; i++){ 		if(lst[i] >= lst[i + 1]){ 			return false; 		} 	} 	return true; }
let result = true;     for(let i = 0; i < lst.length - 1; i++){         if(lst[i] >= lst[i + 1]){             result = false;         }     }     return result; }
let sorted = true;     for(let i = 0; i < lst.length - 1; i++){         if(lst[i] > lst[i + 1]){             sorted = false;         }     }     return sorted; }
for(var i = 0; i < lst.length; i++){         if(lst[i] > lst[i+1]){             return false;         }     }     return true; }
for(let i = 0; i < lst.length; i++){         if(lst[i] < lst[i+1]){             return true;         }         else{             return false;         }     } }
let sorted = [...lst].sort((a,b) => a-b);     let sortedSet = new Set(sorted);     if(JSON.stringify(sorted) === JSON.stringify(lst) && sortedSet.size === lst.length){         return true;     }else{         return false;     } }
arr.sort(function(a, b){         return a - b;     });     return arr; }
if(arr.length>1){ 		var flag = arr[0]; 		var array = []; 		for(var i=1;i<arr.length;i++){ 			if(arr[i].length<flag.length){ 				array.push(flag); 				flag = arr[i]; 			}else{ 				array.push(arr[i]); 			} 		} 		array.push(flag); 		return array; 	}else{ 		return arr; 	} }
var res = [];   for(var i = 1; i <= 9; i++){     for(var j = 0; j < arr.length; j++){       if(arr[j] == i){         res.push(arr[j]);       }     }   }   return res; }
return arr.sort(function(a, b){         return b.length - a.length;     }); }
return arr.sort(function(a, b){     return a.length - b.length;   }); }
let arr1 = [];     for(let i = 0; i < arr.length; i++){         if(arr[i] < 1 || arr[i] > 9){             arr1.push('');         }         else if(arr[i] == 1){             arr1.push('One');         }         else if(arr[i] == 2){             arr1.push('Two');         }         else if(arr[i] == 3){             arr1.push('Three');         }         else if(arr[i] == 4){             arr1.push('Four');         }         else if(arr[i] == 5){             arr1.push('Five');         }         else if(arr[i] == 6){             arr1.push('Six');         }         else if(arr[i] == 7){             arr1.push('Seven');         }         else if(arr[i] == 8){             arr1.push('Eight');         }         else if(arr[i] == 9){             arr1.push('Nine');         }     }     return arr1; }
var lengths = {}; 	var result = []; 	var count = 0; 	var long_word =""; 	for(var i = 0; i < arr.length; i++){ 		if(!(arr[i].length in lengths)){ 			lengths[arr[i].length] = []; 		} 		lengths[arr[i].length].push(arr[i]); 	} 	for(var key in lengths){ 		for(var i = 0; i < lengths[key].length; i++){ 			result.push(lengths[key][i]); 		} 	} 	return result; } var arr = ["cat", "dog", "fish", "monkey", "pig", "whale", "emu", "kangaroo", "bear", "mouse", "lion", "dog"];
var sortedArray = [];     var sort = arr.sort(function(a, b){return a-b});     for(var i = 1; i <= 9; i++){       var count = 0;       for(var j = 0; j < sort.length; j++){           if(sort[j] == i){               count++;           }       }       for(var x = 0; x < count; x++){           sortedArray.push(i);       }     }     return sortedArray; }
let newArr = arr.sort(function(a, b){       return b.length - a.length;     });     return newArr;   }
var result = [];   for(var i = 0; i < arr.length; i++){     if(arr[i] > 0 && arr[i] < 10){       result.push(arr[i]);     }   }   var numbers = {     1: "One",     2: "Two",     3: "Three",     4: "Four",     5: "Five",     6: "Six",     7: "Seven",     8: "Eight",     9: "Nine"   }   var result2 = [];   for(var i = 0; i < result.length; i++){     result2.push(numbers[result[i]]);   }   return result2; }
return arr.length; }
arr.sort(function(a, b){         return a.length - b.length;     });     return arr; }
var arr2 = []; 	for(var i = 0; i < arr.length; i++){ 		if(arr[i] < 0 || arr[i] > 9 || arr[i] % 1 != 0){ 			arr.splice(i, 1); 			i--; 		} 	} 	arr.sort(function(a, b){return a - b}); 	for(var j = 0; j < arr.length; j++){ 		if(arr[j] == 1){ 			arr2.push("One"); 		} 		else if(arr[j] == 2){ 			arr2.push("Two"); 		} 		else if(arr[j] == 3){ 			arr2.push("Three"); 		} 		else if(arr[j] == 4){ 			arr2.push("Four"); 		} 		else if(arr[j] == 5){ 			arr2.push("Five"); 		} 		else if(arr[j] == 6){ 			arr2.push("Six"); 		} 		else if(arr[j] == 7){ 			arr2.push("Seven"); 		} 		else if(arr[j] == 8){ 			arr2.push("Eight"); 		} 		else if(arr[j] == 9){ 			arr2.push("Nine"); 		} 	} 	return arr2.reverse(); }
var result = [];   for(var i = 0; i < arr.length; i++){     if(arr[i] >= 1 && arr[i] <= 9){       result.push(arr[i]);     }   }   return result; }
return arr.sort(function(a, b){     return b.length - a.length;   }); }
const result=[];     for(var i=0;i<arr.length;i++){         for(var j=0;j<arr.length;j++){             if(arr[i].length<arr[j].length){                 var temp=arr[i];                 arr[i]=arr[j];                 arr[j]=temp;             }         }     }     return arr; }
var obj = {}     for(var i = 0; i < arr.length; i++){         if(obj[arr[i].length] === undefined){             obj[arr[i].length] = [arr[i]]         }else{             obj[arr[i].length].push(arr[i])         }     }     var array = []     for(var keys in obj){         for(var j = 0; j < obj[keys].length; j++){             array.push(obj[keys][j])         }     }     return array }
arr.sort(function(a, b){     return a.length - b.length;   });   return arr; }
let arr_map = arr.map(e => e.toString().length);     let map_group = group_by(arr_map);     let sort_group = sort_by(map_group, 0, 1);     let map_sort = sort_group.map(e => e[1]);     let output = [];     map_sort.forEach(e => {         output = output.concat(e);     });     return output; }
let minEven = Infinity;     let minIndex = null;     arr.forEach((value, index) => {         if(value % 2 === 0 && value < minEven){             minEven = value;             minIndex = index;         }     });     return minEven === Infinity ? [] : [minEven, minIndex]; }
var even = arr.filter(function(e){return e % 2 === 0})   return even.length === 0 ? [] : [Math.min.apply(null, even), arr.indexOf(Math.min.apply(null, even))] }
let evens = arr.filter(n => n % 2 === 0);     let minEven = Math.min(...evens);     let minEvenIndex = arr.indexOf(minEven);     return [minEven, minEvenIndex]; }
if(arr.length == 0){         return [];     }     let small_even_value = null;     let small_index = null;     for(let i = 0; i < arr.length; i++){         if(arr[i] % 2 == 0){             if(small_even_value == null){                 small_even_value = arr[i];                 small_index = i;             }             else if(arr[i] < small_even_value){                 small_even_value = arr[i];                 small_index = i;             }         }     }     if(small_even_value == null){         return [];     }     return [small_even_value, small_index]; }
let smallestIndex = null; 	let smallestEven = Number.MAX_SAFE_INTEGER; 	for(let i = 0; i < arr.length; i++){ 		if(arr[i] % 2 === 0 && arr[i] < smallestEven){ 			smallestEven = arr[i]; 			smallestIndex = i; 		} 	} 	if(smallestIndex === null){ 		return []; 	} 	return [smallestEven, smallestIndex]; }
let evens = []   for(let i = 0; i < arr.length; i++){     if(arr[i] % 2 === 0) evens.push([arr[i], i])   }   evens.sort((a, b) => a[0] - b[0])   return evens[0] || [] }
return arr.reduce((acc, curr, idx) => {     if (curr % 2 === 0) {       if (acc[0] === undefined || curr < acc[0]) {         acc[0] = curr;         acc[1] = idx;       }     }     return acc;   }, []); }
let min = Number.MAX_SAFE_INTEGER;     let answer = [];     let index = -1;     for(let i = 0; i < arr.length; i++){         if(arr[i] % 2 === 0 && arr[i] < min){             min = arr[i];             index = i;         }     }     if(index === -1){         return answer;     }     answer.push(min);     answer.push(index);     return answer; }
//find the smallest even integer, which is at the same time the first even integer in the array     //find its index in the array     //if none is found, return []     let smallestEven = arr.filter(v => v % 2 === 0).sort((a,b) => a - b)[0];     let smallestEvenIndex = arr.indexOf(smallestEven);     if(smallestEven === undefined) return [];     return [smallestEven, smallestEvenIndex]; }
if(arr.length == 0) return [];     var even = [];     var odd = [];     for(var i = 0; i < arr.length; i++){         if(arr[i] % 2 == 0) {             even.push(arr[i]);         } else {             odd.push(arr[i]);         }     }     if(even.length == 0) return [];     for(var i = 0; i < even.length; i++){         for(var j = 0; j < odd.length; j++){             if(even[i] < odd[j]){                 var tmp = even[i];                 even[i] = odd[j];                 odd[j] = tmp;             }         }     }     var res = [even[0], arr.indexOf(even[0])];     return res; } var test1 = [4,2,3]; var test2 = [1,2,3]; var test3 = []; var test4 = [5, 0, 3, 0, 4, 2];
// return [value, index]     let temp = [];     let even = [];     for(let i = 0; i < arr.length; i++){         if(arr[i] % 2 === 0){             even.push(arr[i]);         }     }     if(even.length === 0){         return [];     }     let min = Math.min(...even);     for(let i = 0; i < arr.length; i++){         if(arr[i] === min){             temp.push(arr[i]);             temp.push(i);             return temp;         }     } }
let even = []     for(let i = 0; i < arr.length; i++){         if(arr[i] % 2 === 0){             even.push(arr[i])         }     }     if(even.length === 0){         return []     }     let smallest = even[0]     let index = 0     for(let i = 0; i < even.length; i++){         if(even[i] < smallest){             smallest = even[i]             index = i         }     }     return [smallest, index] }
if(arr.length === 0){         return [];     }     const even = arr.filter(val => val % 2 === 0).sort((a,b) => a - b)[0];     if(even === undefined){         return [];     }     const ind = arr.indexOf(even);     return [even, ind]; }
const smallEven = arr.filter(num => num % 2 === 0).sort((a,b) => a - b)[0];   return !smallEven ? [] : [smallEven, arr.indexOf(smallEven)]; }  module.exports = { pluck };
let smallestEven = null; 	let smallestEvenIndex = null; 	for(let i = 0; i < arr.length; i++){ 		if(arr[i] % 2 === 0){ 			if(smallestEven === null){ 				smallestEven = arr[i]; 				smallestEvenIndex = i; 			} 			else if(arr[i] < smallestEven){ 				smallestEven = arr[i]; 				smallestEvenIndex = i; 			} 		} 	} 	return smallestEven === null ? [] : [smallestEven, smallestEvenIndex]; }  let arr1 = [4,2,3]; let arr2 = [1,2,3]; let arr3 = []; let arr4 = [5, 0, 3, 0, 4, 2];
let res = [];     if(arr.length > 0){         let ind = 0;         let small = 0;         while(ind < arr.length){             if(arr[ind]%2 == 0){                 small = arr[ind];                 break;             }             ind++;         }         if(small == 0){             res = [];         }         else{             for(let i = ind+1; i < arr.length; i++){                 if(arr[i] < small && arr[i]%2 == 0){                     small = arr[i];                     ind = i;                 }             }             res.push(small);             res.push(ind);         }     }     else{         res = [];     }     return res; }
let index = Infinity;     let even = -1;     for(let i = 0; i < arr.length; i++){         if(arr[i] % 2 === 0 && arr[i] < even){             even = arr[i];             index = i;         }     }     if(even === -1){         return [];     }     return [even, index]; }
if(arr.length === 0) return [];     let evens = [];     for(let i = 0; i < arr.length; i++){         if(arr[i] % 2 === 0){             evens.push([arr[i], i]);         }     }     if(evens.length === 0) return [];     let smallest = evens[0];     for(let i = 1; i < evens.length; i++){         if(evens[i][0] < smallest[0]){             smallest = evens[i];         }     }     return smallest; } module.exports = pluck;
// let evens = []   // let minEven = Infinity   // let minEvenIndex = Infinity   // for(let i = 0; i < arr.length; i++){   //   if(arr[i] % 2 === 0){   //     evens.push(arr[i])   //     if(arr[i] < minEven){   //       minEven = arr[i]   //       minEvenIndex = i   //     }   //   }   // }   // return minEvenIndex !== Infinity ? [minEven, minEvenIndex] : []   ////////////////   return arr.filter(e => e % 2 === 0).sort((a, b) => a - b).length > 0 ? [arr.filter(e => e % 2 === 0).sort((a, b) => a - b)[0], arr.indexOf(arr.filter(e => e % 2 === 0).sort((a, b) => a - b)[0])] : [] }
var indices = []; 	for(var i = 0; i < arr.length; i++){ 		if(arr[i] >= arr[i-1]){ 			indices.push(i); 		} 	} 	var max = Math.max(...indices); 	return max; }
//your code here     let max = arr[0]     let index = -1     for(let i = 1; i < arr.length; i++){         if(arr[i] <= max){             max = arr[i]             index = i         } else {             max = arr[i]         }     }     return index }
return arr.findIndex((e, i) => e > arr[i - 1]) - 1; }
var indice = -1;     var valor  = arr[0];     for(i=1; i<arr.length; i++){         if(arr[i] < valor){             indice = i;             valor = arr[i];         }     }     return indice; }
for (let i = 0; i < arr.length; i++) {     if (arr[i] > arr[i+1]) {       return i;     }   }   return -1; }
for (var i = 0; i < arr.length; i++) {     if (arr[i] <= arr[i-1]) {       return i - 1;     }   }   return -1; }
for(var i = arr.length - 1; i >= 0; i--){ 		if(arr[i - 1] > arr[i]){ 			return i; 		} 	} 	return -1; }
for(var i = arr.length-1; i > 0; i--){         if(arr[i] > arr[i-1]){             return i-1;         }     }     return -1; }
let index = -1;   let track = 0;   for(let i = 0; i < arr.length; i++){     if(arr[i] > arr[i-1]){       index = i;     }   }   if(index !== -1){     return index;   }else{     return index;   } }
for (let i = arr.length-1; i > 0; i--) {     if (arr[i] > arr[i-1]) return i-1;   }   return -1; }
var len = arr.length, index = len - 1;   for(var i = 0; i < len; i++){     if(arr[i] > arr[i + 1]){       index = i;       break;     }   }   return index; }
var newArr = arr.slice();     newArr.pop();     var s = newArr.length;     var a = newArr.indexOf(Math.max(...newArr));     if (newArr[a] < arr[s]){         return a;     }     else {         return -1;     } }
let index = -1;     for(let i = arr.length - 1; i > 0; i--){         if(arr[i] < arr[i - 1]){             index = i - 1;             break;         }     }     return index; }
if(arr.length === 1) return -1;   var last = arr[0];   for(var i = 1; i < arr.length; i++){     if(arr[i] <= last){       return i - 1;     }     last = arr[i];   }   return -1; }
if(arr.length <= 1) return -1;   var newArr = [];   for(var i = 0; i < arr.length; i++){     if(arr[i] <= arr[i-1]){       newArr.push(i);     }   }   if(newArr.length === 0) return -1;   return newArr[newArr.length-1]; }
var count = 0;   for(var i = 0; i < arr.length; i++){     if(arr[i+1] < arr[i]){       return count;     }     count++;   }   return -1; }
let answer = -1;   for (let i = arr.length - 1; i > 0; i--) {     if (arr[i] < arr[i - 1]) {       answer = i - 1;     }   }   return answer; }
let i = arr.length - 1;   while (i >= 0 && arr[i] <= arr[i - 1]) {     i--;   }   return i - 1; }
var prev;   var largest = -1;   var j = 0;   for(var i = 0; i < arr.length; i++){     if(i > 0){       prev = arr[i-1];     }     if(arr[i] < prev){       largest = i;     }   }   return largest; }
let result = [];     for (let i = 1; i <= n; i++) {         if (i % 2 === 0) {             let factorial = 1;             for (let j = 2; j <= i; j++) {                 factorial *= j;             }             result.push(factorial);         } else {             let sum = 0;             for (let j = 1; j <= i; j++) {                 sum += j;             }             result.push(sum);         }     }     return result; }
let result = [];   for (let i = 1; i <= n; i++) {     if (i % 2 == 0) {       let factorial = 1;       for (let j = 1; j <= i; j++) {         factorial *= j;       }       result.push(factorial);     } else {       let sum = 0;       for (let j = 1; j <= i; j++) {         sum += j;       }       result.push(sum);     }   }   return result; }
let array = [];     for (let i = 1; i <= n; i++) {         if (i % 2 === 0) {             array.push(factorial(i));         } else {             array.push(sum(i));         }     }     return array; }
let arr = [];     for (let i = 1; i <= n; i++) {         if (i % 2 == 0) {             let factorial = 1;             for (let j = 1; j <= i; j++) {                 factorial *= j;             }             arr.push(factorial);         } else {             let sum = 0;             for (let k = 1; k <= i; k++) {                 sum += k;             }             arr.push(sum);         }     }     return arr; }
const list = [];   for (let i = 1; i <= n; i++) {     list.push(i%2 === 0 ? i * (i-1) : (i*(i+1))/2);   }   return list; }
let result = [];   for (let i = 1; i <= n; i++) {     let inner;     if (i % 2 === 0) {       inner = factorial(i);     } else {       inner = sumNum(i);     }     result.push(inner);   }   return result; }
let arr = [];     for (let i = 1; i <= n; i++) {         if (i % 2 == 0) {             let factorial = 1;             for (let j = 1; j <= i; j++) {                 factorial *= j;             }             arr.push(factorial);         } else {             let sum = 0;             for (let j = 1; j <= i; j++) {                 sum += j;             }             arr.push(sum);         }     }     return arr; }
let i = 1;   let result = [];   while (result.length < n) {     let next;     if (i % 2 === 0) {       next = factorial(i);     } else {       next = sumNumbers(i);     }     result.push(next);     i++;   }   return result; }
var a = [];     for (var i = 1; i <= n; i++) {         if (i % 2 === 0) {             var j = 1;             var factorial = 1;             while (j <= i) {                 factorial *= j;                 j++;             }             a.push(factorial);         } else {             var sum = 0;             for (var k = 1; k <= i; k++) {                 sum += k;             }             a.push(sum);         }     }     return a; }
let arr = []     let nFactorial = 1;     let sumOfNumber = 0;     let currValue = 1;     for(let i = 1; i <= n; i++){         if(i % 2 == 0){             currValue = nFactorial;             nFactorial *= i;         }         else{             currValue = sumOfNumber;             sumOfNumber += i;         }         arr.push(currValue);     }     return arr; }
var result = [];     for (let i = 1; i <= n; i++) {         if (i % 2 === 0) {             var factorial = 1;             for (let j = 1; j <= i; j++) {                 factorial *= j;             }             result.push(factorial);         } else {             var sum = 0;             for (let k = 1; k <= i; k++) {                 sum += k;             }             result.push(sum);         }     }     return result; }
let arr = [];   for (let i = 1; i <= n; i++) {     if (i % 2 == 0) {       arr.push(factorial(i));     } else {       arr.push(sumNums(i));     }   }   return arr; }
let numberArray = []     for (let i = 1; i <= n; i++) {       if (i % 2 === 0) {         numberArray.push(factorialize(i))       } else {         numberArray.push(sumOfNumbers(i))       }     }     return numberArray   }      function factorialize(num) {     let factorial = 1     for (let i = 1; i <= num; i++) {       factorial *= i     }     return factorial   }      function sumOfNumbers(num) {     let sum = 0     for (let i = 1; i <= num; i++) {       sum += i     }     return sum   }      console.log(f(5))   console.log(f(6))
const temp = [];     let cnt = 1;     for(let i = 1; i <= n; i++){         if(i % 2 === 0){             temp.push(factorial(i));         }else{             temp.push(cnt);             cnt += i;         }     }     return temp; }
var x = [];     for (var i = 1; i < n + 1; i++){         if (i % 2 === 0){             var y = 1;             for (var j = 1; j < i + 1; j++){                 y = y * j;             }             x.push(y);         }         else {             var y = 0;             for (var j = 1; j < i + 1; j++){                 y = y + j;             }             x.push(y);         }     }     return x; }
var i = 1;     var arr = [];     while (i <= n) {         if (i % 2 == 0) {             arr.push(fakt(i));         } else {             arr.push(factorial(i));         }         i++;     }     return arr; }
let num = [1];   let sum = 0;   let factorial = 1;   for (let i = 1; i < n; i++) {     if (i % 2 !== 0) {       for (let j = 1; j <= i; j++) {         sum += j;       }       num.push(sum);       sum = 0;     } else {       for (let j = 1; j <= i; j++) {         factorial *= j;       }       num.push(factorial);       factorial = 1;     }   }   return num; }
let answer = [];     for (let i = 1; i <= n; i++) {         if (i % 2 === 0) {             let factorial = 1;             for (let j = 1; j <= i; j++) {                 factorial *= j;             }             answer.push(factorial);         } else {             let sum = 0;             for (let j = 1; j <= i; j++) {                 sum += j;             }             answer.push(sum);         }     }     return answer; }
let arr = [];     for (let i = 1; i <= n; i++) {         let value = 0;         if (i % 2 == 0) {             value = factorial(i);         } else {             value = sumToN(i);         }         arr.push(value);     }     return arr; }
var uniq = {};   l.forEach(function(i) { uniq[i] = true; });   return Object.keys(uniq).map(function(i) { return parseInt(i); }); }
return l.sort().filter(function(item, pos, ary) {       return !pos || item != ary[pos - 1];   }) }
var s = []; 	l.forEach(function(x){ 		if (s.indexOf(x) === -1) s.push(x); 	}); 	return s.sort(function(a, b){return a - b;}); }
return l.sort().filter(function(e, i, l){         return i === 0 || e != l[i-1];     }); }
var result = [];     l.sort();     for(var i = 0; i < l.length; i++){         if(l[i] != l[i + 1]){             result.push(l[i]);         }     }     return result; }
let uniques = [];     for(let i = 0; i < l.length; i++){         let x = l[i];         if(!(x in uniques)){             uniques.push(x);         }     }     return uniques.sort(); }
l.sort(); 	for(var i = 1; i < l.length; i++){ 		if(l[i-1] == l[i]) 			l.splice(i--, 1); 	} 	return l; }
return l.sort().filter(function(item, pos, ary) { 		return !pos || item != ary[pos - 1]; 	}) }
return Array.from(new Set(l)); }
let set = new Set(l);     return Array.from(set); }
var u = l.sort(); 	var ul = []; 	 	for(var i = 0; i < u.length; i++){ 		if(u[i] != u[i+1]){ 			ul.push(u[i]); 		} 	} 	return ul; }
var result = [];     for(var i = 0; i < l.length; i++){         if(result.indexOf(l[i]) == -1){             result.push(l[i]);         }     }     return result; }
var s = l.slice();   s.sort();   var last = s[0];   var res = [last];   for(var i = 1; i < s.length; i++){     if(s[i] !== last){       res.push(s[i]);       last = s[i];     }   }   return res; }
return l.sort().filter(function(v,i,a){return a.indexOf(v)===i}); }
return [...new Set(l)]; }
var set = new Set(l);   return Array.from(set); }
return [...new Set(l)] }
//Without using built-in sort     let r = []     for(let i = 0; i < l.length; i++){         if(r.indexOf(l[i]) < 0){             r.push(l[i])         }     }     return r }
let newArr = l.sort();     let index = 0;     for(let i = 0; i < newArr.length; i++){         if(newArr[i] != newArr[i+1]){             newArr[index] = newArr[i];             index++;         }     }     return newArr.slice(0, index); }
var res = 1; 	var two = 2; 	while(n>0){ 		if(n%2==1){ 			res = (res*two)%p; 		} 		two = (two*two)%p; 		n = parseInt(n/2); 	} 	return res; }
return  BigInt(2).pow(n) % p; }
var res = 1;   for(var i = 0; i < n; i++){     res = (res * 2) % p;   }   return res; }
if(n == 0) 		return 1; 	if(n == 1) 		return 2 % p; 	else if(n % 2 == 0) 		return (modp(n/2, p) * modp(n/2, p)) % p; 	else 		return (2 * modp(n/2, p) * modp(n/2, p)) % p; }
// return Math.pow(2, n) % p;     if (n === 0) return 1;     if (n === 1) return 2 % p;     if (n % 2 === 0) {         return Math.pow(modp(n / 2, p), 2) % p;     } else {         return (2 * modp(n - 1, p)) % p;     } }
if(n==0){         return 1;     }else if(n%2==0){         return (modp(n/2, p) * modp(n/2, p)) % p;     }else{         return (modp(n/2, p) * modp(n/2, p) * 2) % p;     } }
var res = 1; 	for(var i = 0; i < n; i++){ 		res = (res * 2) % p; 	} 	return res; }  var crc8 = new CRC8();
if(n === 0){     return 1;   }   if(n === 1){     return 2;   }   if(n % 2 === 0){     return (2 * modp(n / 2, p)) % p;   }   else{     return (2 * modp(n / 2, p) * 2) % p;   } }
return (p <= 1) ? 0 : (n < 1) ? 1 : Math.pow(2, n % (p - 1)) % p; }
if(n<0)         return modp(-n, p);     if(n==0)         return 1;     var aux = modp(n/2, p);     aux = (aux*aux)%p;     if(n%2==1)         aux=(aux*2)%p;     return aux; }
if(n == 0){         return 1;     }     var x = modp(n/2, p);     if(n % 2 == 0){         return (x * x) % p;     }     else{         return (x * x * 2) % p;     } }
var n = n.toString(2); 	var y = 1; 	for(var i = 0; i < n.length; i++){ 		y = (y*y) % p; 		if(n[i] == '1'){ 			y = (y*2) % p; 		} 	} 	return y; }
var m = n % p;     return ((n%p)+p)%p; }
var result = 1; 	for(var i = 1; i <= n; i++){ 		result = (result * 2) % p; 	} 	return result; }
// O(log n)   var base = 1,       j = 1;   while(j <= n){     if(j & n){       base = (base * 2) % p;     }     j = j << 1;   }   return base; }
var sum=1;   for(var i=0; i<n; i++){     sum = (sum*2)%p;   }   return sum; }
var m = n % p; 	if (m < 0) { 		m += p; 	} 	return m; }
var res = 1,         p_inv = p - 2;     while (p_inv > 0) {         if (p_inv % 2 == 1) {             res = (res * n) % p;         }         n = (n * n) % p;         p_inv = Math.floor(p_inv / 2);     }     return res; }
if(nums.length == 0) return 0;   let currentSum = nums[0];   let smallestSum = nums[0];   for(let i = 1; i < nums.length; i++){     if(currentSum < 0){       currentSum = nums[i];     } else {       currentSum += nums[i];     }     if(currentSum < smallestSum){       smallestSum = currentSum;     }   }   return smallestSum; }
if(nums.length === 0) return null;     let min = nums[0];     let sum = nums[0];     for(let i = 1; i < nums.length; i++){         if(sum > 0){             sum = nums[i];         }else{             sum += nums[i];         }         min = Math.min(min, sum);     }     return min; }
if(nums.length === 0) return 0;     let minSum = nums[0];     let currentSum = nums[0];     for(let i = 1; i < nums.length; i++){         currentSum = Math.min(currentSum + nums[i], nums[i]);         minSum = Math.min(minSum, currentSum);     }     return minSum; }
let currentSum = nums[0];     let minSum = nums[0];     for(let i = 1; i < nums.length; i++){         if(currentSum <= 0){             currentSum = nums[i];         }else{             currentSum += nums[i];         }         if(currentSum < minSum){             minSum = currentSum;         }     }     return minSum; }
let minSum = 0;     let currentSum = 0;     for(let i = 0; i < nums.length; i++){         currentSum += nums[i];         if(currentSum < minSum){             minSum = currentSum;         }     }     return minSum; }
let length = nums.length; 	let minTotal = Infinity; 	for(let start = 0; start < length; start++){ 		let total = 0; 		for(let stop = start; stop < length; stop++){ 			total += nums[stop]; 			minTotal = Math.min(minTotal, total); 		} 	} 	return minTotal; }
let sum = 0;     let minSum = 0;     let min = nums[0];     for(let i = 0; i < nums.length; i++){         sum += nums[i];         if(minSum > sum){             minSum = sum;         }         if(nums[i] < min){             min = nums[i];         }     }     if(minSum !== 0){         return minSum;     }     return min; }
let minSum = nums[0]   let sum = nums[0]   for(let i = 1; i < nums.length; i++){     if(sum < 0){       sum = nums[i]     } else {       sum += nums[i]     }     if(sum < minSum){       minSum = sum     }   }   return minSum }
var minSum = 0;     var currSum = 0;     for(var i = 0; i < nums.length; i++){         currSum += nums[i];         if(currSum < minSum){             minSum = currSum;         }         if(currSum > 0){             currSum = 0;         }     }     return minSum; }
let minSum = nums[0];   let currSum = 0;   for(let i = 0; i < nums.length; i++){     currSum += nums[i];     if(currSum < minSum){       minSum = currSum;     }     if(currSum > 0){       currSum = 0;     }   }   return minSum; }
let min = Infinity;   let currentSum = 0;   for(let i = 0; i < nums.length; i++){     currentSum += nums[i];     if(currentSum < min){       min = currentSum;     }     if(currentSum > 0){       currentSum = 0;     }   }   return min; }
let prev = nums[0];     let min = nums[0];     for(let i = 1; i < nums.length; i++){         let temp = nums[i] + prev;         if(temp < nums[i]) prev = temp;         else prev = nums[i];         if(prev < min) min = prev;     }     return min; }
let minSum = Infinity;     let currentSum = 0;     for(let i = 0; i < nums.length; i++){         currentSum += nums[i];         minSum = Math.min(minSum, currentSum);         if(currentSum < 0){             currentSum = 0;         }     }     return minSum; }
let minSum = Infinity;     let tempSum = 0;     for(let i = 0; i < nums.length; i++){         tempSum += nums[i];         if(tempSum < minSum){             minSum = tempSum;         }         if(tempSum > 0){             tempSum = 0;         }     }     return minSum; }
let current = nums[0];     let least = nums[0];     for(let i = 1; i < nums.length; i++){         current = Math.min(nums[i], current + nums[i]);         least = Math.min(least, current);     }     return least; }
let min = Infinity;     let sum = 0;     for(let i = 0; i < nums.length; i++){         sum += nums[i];         if(sum < min){             min = sum;         }         for(let j = i + 1; j < nums.length; j++){             sum += nums[j];             if(sum < min){                 min = sum;             }         }         sum = 0;     }     return min; }
let n = nums.length;   let start = 0;   let end = 0;   let minSum = Infinity;   let currSum = 0;   while(start < n){     while(end < n && currSum >= 0){       currSum += nums[end];       end += 1;     }     minSum = Math.min(minSum, currSum);     currSum -= nums[start];     start += 1;   }   return minSum; }
let tempMin = nums[0]; 	let cumulativeSum = 0; 	for(let i = 0; i < nums.length; i++){ 		cumulativeSum += nums[i]; 		if(cumulativeSum < tempMin){ 			tempMin = cumulativeSum; 		} 	} 	return tempMin; }
let minSum = Number.MAX_SAFE_INTEGER;     let start = 0;     let end = 0;     let total = 0;     while(start < nums.length){         if(total < 0){             total = 0;             end = start;         }         total += nums[end];         if(total < minSum){             minSum = total;         }         end++;         if(end === nums.length){             start++;             end = start;         }     }     return minSum; }
let newLst = lst.slice();     newLst.sort(function(a, b){return a-b});     let temp = [];     for(let i = 0; i < newLst.length; i++){         if(i % 2 === 0){             temp.push(newLst[i]);         }         else{             temp.push(newLst[newLst.length - i - 1]);         }     }     return temp; }
if (lst.length == 0) return [];   var result = [lst[0]];   lst.splice(0, 1);   for (var i = 0; i < lst.length; i++) {     if (lst.length == 0) break;     result.push(Math.max.apply(Math, lst));     result.push(Math.min.apply(Math, lst));     var index = lst.indexOf(Math.max.apply(Math, lst));     lst.splice(index, 1);     index = lst.indexOf(Math.min.apply(Math, lst));     lst.splice(index, 1);   }   return result; }
if(lst.length == 0) return [];     let out = [];     lst.sort((a,b) => a-b);     while(lst.length != 0){         out.push(lst.shift());         if(lst.length != 0) out.push(lst.pop());     }     return out; }
var res = [], odd = false;     if(lst.length == 0){         return [];     }else if(lst.length == 1){         return lst;     }else{         res.push(lst.shift());         lst.sort(function(a, b){return a-b});         for(var i = 0; i < lst.length; i++){             if(odd){                 res.push(lst.pop());                 odd = false;             }else{                 res.push(lst.shift());                 odd = true;             }         }         return res;     } }
var odd=[], even=[];     for(var i=0; i<lst.length; i++){         if(i%2==0){             odd.push(lst[i]);         }         else{             even.push(lst[i]);         }     }     even.sort(function(a,b){return a-b});     odd.sort(function(a,b){return b-a});     var sorted_lst=[];     for(var i=0; i<odd.length; i++){         sorted_lst.push(odd[i]);         if(even[i]!=undefined){             sorted_lst.push(even[i]);         }     }     return sorted_lst; } var list = [2, 5, 7, 9, 6, 5, 4, 1, 2, 5, 7, 9, 0, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7, 9, 2, 5, 7,
return lst.sort((a, b) => a - b).reduce((acc, cur, i) => {         let j = i + 1;         if (j % 2 === 0) {             acc.unshift(cur);         } else {             acc.push(cur);         }         return acc;     }, []); }
lst.sort((a, b) => a - b);     let res = [];     for (let i = 0; i < lst.length; i++){         if (i % 2 === 0){             res.push(lst[i]);         } else {             res.unshift(lst[i]);         }     }     return res; }
if(lst.length <= 0) return [];     const newLst = lst.slice();     newLst.sort((a, b) => a - b);     let evenLst = [];     let oddLst = [];     while(newLst.length > 0){         const minElem = newLst.shift();         const maxElem = newLst.pop();         if(evenLst.length > oddLst.length){             oddLst.push(minElem);             evenLst.push(maxElem);         }else{             evenLst.push(minElem);             oddLst.push(maxElem);         }     }     return evenLst.concat(oddLst.reverse()); }
let asc = [...lst].sort((a, b) => a - b);     let desc = [...lst].sort((a, b) => b - a);     let flag = true;     let result = [];     while (asc.length > 0) {         if (flag) {             result.push(asc.shift());         } else {             result.push(desc.shift());         }         flag = !flag;     }     return result; }
//find min value     if (lst.length === 0) return [];     let min = Math.min(...lst);     let minIndex = lst.indexOf(min);     let newLst = [];     newLst.push(min);     let lst1 = lst.slice(0, minIndex);     let lst2 = lst.slice(minIndex + 1);     while (lst1.length > 0) {         let max = Math.max(...lst1);         let maxIndex = lst1.indexOf(max);         newLst.push(max);         lst1 = lst1.slice(0, maxIndex);         lst2 = lst2.concat(lst1.slice(maxIndex + 1));         lst1 = lst2;         lst2 = [];     }     return newLst; }
if(lst.length === 0) return lst;     let min = Math.min(...lst);     let idx = lst.indexOf(min);     lst.splice(idx, 1);     return [min, ...strange_sort_list(lst.reverse())]; }
if(lst.length===0)     return lst;   var res=[];   var lst_copy=lst.slice();   lst_copy.sort(function(a,b){return a-b;});   var asc=true;   while(lst_copy.length!==0){     if(asc){       res.push(lst_copy.shift());       asc=false;     }else{       res.push(lst_copy.pop());       asc=true;     }   }   return res; }
var res = [];     var idx = 0;     while(lst.length > 0){         var min = Math.min.apply(null, lst);         var max = Math.max.apply(null, lst);         if(idx%2 === 0){             res.push(min);             lst.splice(lst.indexOf(min), 1);         }else{             res.push(max);             lst.splice(lst.indexOf(max), 1);         }         idx += 1;     }     return res; }
if(lst.length == 0){         return lst;     }     let result = [];     result.push(Math.min(...lst));     lst.splice(lst.indexOf(Math.min(...lst)), 1);     result.push(Math.max(...lst));     lst.splice(lst.indexOf(Math.max(...lst)), 1);     let x = 0;     let y = lst.length - 1;     for(let i = 0; i < lst.length; i++){         if(i % 2 == 0){             result.push(lst[x]);             x++;         }else{             result.push(lst[y]);             y--;         }     }     return result; }
if(lst.length == 0) return lst;     var min = Math.min(...lst);     var max = Math.max(...lst);     var newList = [];     for(var i = 0; i < lst.length; i++){         if(i % 2 == 0){             newList.push(min);             lst.splice(lst.indexOf(min), 1);             min = Math.min(...lst);         }         else{             newList.push(max);             lst.splice(lst.indexOf(max), 1);             max = Math.max(...lst);         }     }     return newList; }
var x = [];     var y = [];     if (lst.length == 0) {         return [];     }     while (lst.length > 0) {         x.push(Math.min.apply(null, lst));         y.push(Math.max.apply(null, lst));         lst.splice(lst.indexOf(Math.min.apply(null, lst)), 1);         lst.splice(lst.indexOf(Math.max.apply(null, lst)), 1);     }     return x.concat(y); }
if(lst.length > 0){         var lst2 = lst.slice(0);         lst2.sort(function(a, b){return a-b});         var lst_l = lst2.length;         for(var i = 0; i < lst_l; i++){             if(i % 2 == 0){                 lst.splice(i, 1, lst2[0]);                 lst2.splice(0, 1);             }             else{                 lst.splice(i, 1, lst2[lst2.length - 1]);                 lst2.splice(lst2.length - 1, 1);             }         }     }     return lst; }
var str = 0; 	if (lst.length === 0) { 		return []; 	} 	lst.sort(function(a, b) { 		return a - b; 	}); 	for (var i = 0; i < lst.length - 1; i++) { 		var temp = lst[i]; 		lst[i] = lst[i + 1]; 		lst[i + 1] = temp; 		str++; 	} 	return lst; }
let result = [];     let min, max, minPosition, maxPosition;     let lstCopy = lst.slice();     while(lstCopy.length > 0){         if(result.length % 2 === 0){             min = Math.min(...lstCopy);             minPosition = lstCopy.indexOf(min);             result.push(min);             lstCopy.splice(minPosition, 1);         } else {             max = Math.max(...lstCopy);             maxPosition = lstCopy.indexOf(max);             result.push(max);             lstCopy.splice(maxPosition, 1);         }     }     return result; }
let arr = []     for(let i = 0; i < n; i++){         arr.push(i * i - i + 1)     }     let triple = 0     for(let i = 0; i < arr.length; i++){         for(let j = i + 1; j < arr.length; j++){             for(let k = j + 1; k < arr.length; k++){                 if((arr[i] + arr[j] + arr[k]) % 3 === 0){                     triple++                 }             }         }     }     return triple }
var triples=0;     var arr=[];     for(var i=1;i<=n;i++){         arr.push(i*i-i+1);     }     console.log(arr);     for(var i=0;i<arr.length;i++){         for(var j=i+1;j<arr.length;j++){             for(var k=j+1;k<arr.length;k++){                 if((arr[i]+arr[j]+arr[k])%3==0){                     triples++;                 }             }         }     }     return triples; }
let sum = 0     for(let i = 0; i < n; i++){         for(let j = i + 1; j < n; j++){             for(let k = j + 1; k < n; k++){                 let val1 = i * i - i + 1                 let val2 = j * j - j + 1                 let val3 = k * k - k + 1                 if((val1 + val2 + val3) % 3 === 0){                     sum++                 }             }         }     }     return sum }
var a = [];     for(var i = 1; i <= n; i++){         a.push(i * i - i + 1);     }     var count = 0;     for(var i = 0; i < a.length; i++){         for(var j = i + 1; j < a.length; j++){             for(var k = j + 1; k < a.length; k++){                 if((a[i] + a[j] + a[k]) % 3 === 0){                     count++;                 }             }         }     }     return count; }
const array = [];     for(let i = 1; i<=n; i++){         array.push(i*i-i+1);     }     let count = 0;     for(let i = 0; i<array.length; i++){         for(let j = i+1; j<array.length; j++){             for(let k = j+1; k<array.length; k++){                 if((array[i]+array[j]+array[k])%3 === 0){                     count++;                 }             }         }     }     return count; }
if(n<3) return 0;     let count = 0;     let arr = [1];     for(let i=2; i<=n; i++){         arr.push(i*i-i+1);     }     for(let i=0; i<arr.length-2; i++){         for(let j=i+1; j<arr.length-1; j++){             for(let k=j+1; k<arr.length; k++){                 if((arr[i]+arr[j]+arr[k])%3==0){                     count++;                 }             }         }     }     return count; }
let arr = [];     let count = 0;     for(let i = 1; i <= n; i++){         arr.push(i * i - i + 1);     }     for(let i = 0; i < arr.length; i++){         for(let j = i + 1; j < arr.length; j++){             for(let k = j + 1; k < arr.length; k++){                 if((arr[i] + arr[j] + arr[k]) % 3 === 0){                     count++;                 }             }         }     }     return count; }
let arr = [];     let max = 0;     for(let i = 1; i <= n; i++){         let num = i * i - i + 1;         arr.push(num);         for(let j = 0; j < arr.length; j++){             for(let k = 0; k < arr.length; k++){                 if(k > j && j < i && i % 3 === 0){                     let sum = arr[j] + arr[k] + arr[i - 1];                     if(sum % 3 === 0){                         max++;                     }                 }             }         }     }     return max; }
// your code here     var arr = []     for(var i = 1; i<=n; i++){         arr.push(i*i-i+1)     }     var count = 0     for(var i = 0; i<arr.length; i++){         for(var j = i+1; j<arr.length; j++){             for(var k = j+1; k<arr.length; k++){                 if((arr[i]+arr[j]+arr[k])%3 === 0){                     count ++                 }             }         }     }     return count }
let arr = [];     for(let i = 1; i <= n; i++){         arr.push(i * i - i + 1);     }     let num = 0;     for(let i = 0; i < arr.length; i++){         for(let j = i + 1; j < arr.length; j++){             for(let k = j + 1; k < arr.length; k++){                 if((arr[i] + arr[j] + arr[k]) % 3 === 0){                     num++;                 }             }         }     }     return num; }
var array = [];     var count = 0;     for(let i = 1; i <= n; i++){         array.push(i * i - i + 1);     }     for(let i = 0; i < array.length; i++){         for(let j = 0; j < array.length; j++){             for(let k = 0; k < array.length; k++){                 if(i < j && j < k && (array[i] + array[j] + array[k]) % 3 == 0){                     count++;                 }             }         }     }     return count; }
let sum = 0; 	for(let i = 1; i <= n; i++){ 		for(let j = i+1; j <= n; j++){ 			for(let k = j+1; k <= n; k++){ 				if(((i*i-i+1)+(j*j-j+1)+(k*k-k+1))%3 === 0){ 					sum++; 				} 			} 		} 	} 	return sum; }
let a = [];   let count = 0;   for(let i = 1; i <= n; i++){     a.push(i * i - i + 1);   }   console.log(a);   for(let i = 0; i < a.length; i++){     for(let j = i + 1; j < a.length; j++){       for(let k = j + 1; k < a.length; k++){         if((a[i] + a[j] + a[k]) % 3 === 0){           count++;         }       }     }   }   return count; }
var arr = []     var c = 0     for(var i = 1; i <= n; i++){         arr.push(i*i - i + 1)     }     for(var i = 0; i < arr.length - 2; i++){         for(var j = i + 1; j < arr.length - 1; j++){             for(var k = j + 1; k < arr.length; k++){                 if((arr[i] + arr[j] + arr[k]) % 3 == 0){                     c++                 }             }         }     }     return c }
var array = [];     var count = 0;     var sum = 0;     for(var i = 1; i <= n; i++){         var j = i * i - i + 1;         array.push(j);     }     for(var i = 0; i < array.length; i++){         for(var j = i + 1; j < array.length; j++){             for(var k = j + 1; k < array.length; k++){                 sum = array[i] + array[j] + array[k];                 if(sum % 3 == 0){                     count++;                 }             }         }     }     return count; }
let a = [];     for(let i = 1; i <= n; i++){         a.push(i * i - i + 1);     }     let count = 0;     for(let i = 0; i < a.length; i++){         for(let j = i + 1; j < a.length; j++){             for(let k = j + 1; k < a.length; k++){                 if((a[i] + a[j] + a[k]) % 3 === 0){                     count++;                 }             }         }     }     return count; }
let a = [];     for(let i = 1; i<=n; i++){         a.push(i*i-i+1);     }     let k = 0;     for(let i = 0; i<a.length-2; i++){         for(let j = i+1; j<a.length-1; j++){             for(let l = j+1; l<a.length; l++){                 if((a[i]+a[j]+a[l])%3===0){                     k++;                 }             }         }     }     return k; }
const a = Array.from({length: n}, (v, i) => i * i - i + 1);     let counter = 0;     for(let i = 0; i < a.length; i++){         for(let j = i + 1; j < a.length; j++){             for(let k = j + 1; k < a.length; k++){                 if((a[i] + a[j] + a[k]) % 3 === 0){                     counter++;                 }             }         }     }     return counter; }
var count = 0;     var array = []     for(var i = 1; i <= n; i++){         array.push(i*i - i + 1)     }     for(var i = 0; i < array.length - 2; i++){         for(var j = i + 1; j < array.length - 1; j++){             for(var k = j + 1; k < array.length; k++){                 if((array[i] + array[j] + array[k]) % 3 === 0){                     count++                 }             }         }     }     return count }
let result = ((a%10) * (b%10))      return result }
return (a*b)%10; }
return (a * b) % 10; }
var a = a.toString();     var b = b.toString();     return (a[a.length-1] * b[b.length-1]); }
let unitDigitOfA = a % 10;     let unitDigitOfB = b % 10;     return unitDigitOfA * unitDigitOfB; }
let unitDigitOfA = Math.abs(a % 10);     let unitDigitOfB = Math.abs(b % 10);     return unitDigitOfA * unitDigitOfB; }
let numA = a.toString().split('').reverse()[0];   let numB = b.toString().split('').reverse()[0];   let result = numA * numB;   return result; }
let newA = a.toString();     let newB = b.toString();     let firstNum = newA.split('');     let secondNum = newB.split('');     let result = (parseInt(firstNum[1]) * parseInt(secondNum[1]));     return result;   }
var product = a * b;     var unit = product % 10;     return unit; }
let aArr = a.toString().split('');     let bArr = b.toString().split('');     aArr.pop();     bArr.pop();     let aArrStr = aArr.join('');     let bArrStr = bArr.join('');     let aNum = parseInt(aArrStr);     let bNum = parseInt(bArrStr);     let result = aNum * bNum;     return result; }
let unitA = a % 10;     let unitB = b % 10;     return unitA * unitB; }
return (a % 10) * (b % 10); }
var a = String(a); 	var b = String(b); 	var unitA = a.substr(a.length-1); 	var unitB = b.substr(b.length-1); 	var product = Number(unitA) * Number(unitB); 	return product; }
return parseInt(a.toString().split('').pop())  	* parseInt(b.toString().split('').pop()); }
return (a%10)*(b%10); }
let aa = Math.abs(a).toString().split('').map(Number);     let bb = Math.abs(b).toString().split('').map(Number);     return aa[aa.length-1] * bb[bb.length-1]; }
return Math.abs(a * b).toString().split('').pop() * 1; }
let aString = ('' + a);     let bString = ('' + b);     return parseInt(aString[aString.length - 1]) * parseInt(bString[bString.length - 1]); }
let sum = 0;     for(let i = 0; i < k; i++){         if(arr[i] < 10){             sum += arr[i];         }         else if(arr[i] < 100){             sum += arr[i];         }     }     return sum; }  let arr = [111,21,3,4000,5,6,7,8,9]; let k = 4;
let sum = 0;     for(let i = 0; i < k; i++){         let num = arr[i].toString();         if(num.length <= 2){             sum += arr[i];         }     }     return sum; }
return arr.reduce((acc, curr, i) => {         return i < k && curr.toString().length <= 2 ? acc + curr : acc;     }, 0); }
let sum = 0;   for(let i = 0; i < k; i++){     if(arr[i] < 100){       sum += arr[i];     }   }   return sum; }
return arr.slice(0, k).filter(x => x >= 10 && x <= 99).reduce((a, c) => a + c, 0); }
let result = 0;   for(let i = 0; i < k; i++){     if(arr[i] >= 10 && arr[i] < 100){       result += arr[i];     }   }   return result; }
var output = 0;     var count = 0;     for(var i = 0; i < arr.length; i++){         var a = arr[i];         var temp = arr[i];         while(temp >= 10){             temp = Math.floor(temp / 10);         }         count++;         if(temp <= 2 && count <= k){             output += a;         }     }     return output; }
let arr_len = arr.length   let count = 0   let sum = 0   for(let i = 0; i < arr_len; i++){     if(count < k){       let s = arr[i].toString()       if(s.length === 1 || s.length === 2){         sum += arr[i]         count++       }     }else{       break     }   }   return sum }
// Code goes here     let sum = 0;     for(let i = 0; i < k; i++){         if(arr[i] < 100){             sum += arr[i];         }     }     return sum; }
//set up variables   let two_sum = 0;    //loop through array   for(let i = 0; i < k; i++){     //determine if elements in array are greater than ten     if(arr[i] < 10){       //add number to two_sum if less than ten       two_sum += arr[i];     } else if(arr[i] >= 10 && arr[i] < 100){       //add number to two_sum if between ten and one hundred       two_sum += arr[i];     }   }   return two_sum; } add_elements([111,21,3,4000,5,6,7,8,9], 4); //24
let sum = 0;     for(let i = 0; i < k; i++){         if(arr[i] >= 10 && arr[i] <= 99){             sum += arr[i];         }     }     return sum; }
let sum = 0;     for(let i = 0; i < k; i++){         sum += arr[i];     }     return sum; }
return (arr.filter(v => v < 100).length < k) ? arr.reduce((total,v) => total + v, 0) : arr.filter(v => v < 100).reduce((total,v) => total + v, 0); }
let sum = 0;     for(let i = 0; i < k; i++){         if(arr[i] > 99){             break;         }         sum += arr[i];     }     return sum; }  let arr = [111,21,3,4000,5,6,7,8,9]; let k = 4;
// add code here }
let i = 0, sum = 0;     while(i < k){         if(arr[i] >= 10 && arr[i] <= 99){             sum += arr[i];         }         i++;     }     return sum; }
let sum = 0;     for(let i = 0; i < k; i++){         if(arr[i] < 100){             sum += arr[i];         }     }     return sum; } let arr = [111,21,3,4000,5,6,7,8,9]; let k = 4;
let sum = 0;     for(let i = 0; i < k; i++){         if(arr[i] < 100){             sum += arr[i];         }     }     return sum; } let arr = [111,21,3,4000,5,6,7,8,9];
let count = 0;   let i = 0;   while(i < arr.length && count < k){     if(arr[i] > 9 && arr[i] < 100){       count++;     }     i++;   }   return arr.slice(0,i).reduce((a,b) => {     if(b > 9 && b < 100){       return a + b;     }     return a;   }, 0); }
var x_numerator = parseInt(x.split("/")[0]);     var x_denominator = parseInt(x.split("/")[1]);     var n_numerator = parseInt(n.split("/")[0]);     var n_denominator = parseInt(n.split("/")[1]);     var result = simplifyFraction(x_numerator * n_numerator, x_denominator * n_denominator);     if (result.denominator == 1) {         return true;     } else {         return false;     } }
var xArray = x.split('/');   var nArray = n.split('/');   var xNum = Number(xArray[0]);   var xDen = Number(xArray[1]);   var nNum = Number(nArray[0]);   var nDen = Number(nArray[1]);   var xNumCopy = xNum;   var xDenCopy = xDen;   if(xNum < 0){     xNumCopy = Math.abs(xNum);   }   if(xDen < 0){     xDenCopy = Math.abs(xDen);   }   if(nNum < 0){     nNum = Math.abs(nNum);   }   if(nDen < 0){     nDen = Math.abs(nDen);   }   var xProduct = (xNumCopy*nDen);   var xDenProduct = (xDenCopy*nNum);   var gcdProduct = gcd(xProduct, xDenProduct);   if(gcdProduct === 1){     return false;   }   else{     return true;   } }
var num1 = x.split('/')[0];   var den1 = x.split('/')[1];   var num2 = n.split('/')[0];   var den2 = n.split('/')[1];   var product = (num1 * num2) / (den1 * den2);   return product % 1 === 0; }
let a = x.split('/');     let b = n.split('/');     return a[0]/a[1] * b[0]/b[1] % 1 === 0 ? true : false; }
var xD = parseInt(x.split('/')[1]);   var nD = parseInt(n.split('/')[1]);   var gcdD = gcd(xD, nD);   var x = x.split('/')[0]/gcdD;   var n = n.split('/')[0]/gcdD;   return x === n; }
var product = multiply(x, n);     var num = product.split("/")[0];     var den = product.split("/")[1];     var remainder = num % den;     if(remainder === 0){         return true;     }     return false; }
let x_numerator = x.split('/')[0]   let x_denominator = x.split('/')[1]   let n_numerator = n.split('/')[0]   let n_denominator = n.split('/')[1]   if(Number(x_numerator) * Number(n_denominator) === Number(n_numerator) * Number(x_denominator)) {     return true   } else {     return false   } }
var frac1 = x.split('/').map(Number),       frac2 = n.split('/').map(Number),       dec1 = (frac1[0] / frac1[1]),       dec2 = (frac2[0] / frac2[1]),       num = dec1 * dec2,       whole = Math.floor(num),       rest = num - whole;   if (rest === 0) {     return true;   } else {     return false;   } }
const [numeratorX, denominatorX] = x.split('/').map(Number);     const [numeratorN, denominatorN] = n.split('/').map(Number);     return (numeratorX / denominatorX) * (numeratorN / denominatorN) % 1 === 0; }
let num = x.split('/');     let den = n.split('/');     let fract = (num[0]*den[1])/(num[1]*den[0]);     return fract % 1 === 0; }
let numerator = x.split('/')[0] / n.split('/')[0];     let denominator = x.split('/')[1] / n.split('/')[1];     return numerator % 1 === 0 && denominator % 1 === 0; }
return x=='1/1'||n=='1/1'||x[2]==n[2]&&+x[0]*+n[2]==+n[0]*+x[2] }
var x_num = x.split("/")[0] * n.split("/")[1]; 	var x_den = x.split("/")[1] * n.split("/")[0]; 	return (x_num % x_den) == 0; }
let x1 = Number(x.split('/')[0])     let x2 = Number(x.split('/')[1])     let n1 = Number(n.split('/')[0])     let n2 = Number(n.split('/')[1])     return (x1 * n2) % (x2 * n1) === 0 ? true : false }
let xFraction = x.split('/');   let nFraction = n.split('/');   let xDecimal = xFraction[0] / xFraction[1];   let nDecimal = nFraction[0] / nFraction[1];   return xDecimal * nDecimal % 1 === 0; }
var a = x.split("/");     var b = n.split("/");     var c = (a[0]*b[1])/(a[1]*b[0]);     if(c % 1 === 0){         return true;     }else{         return false;     } }
const [xNum, xDen] = x.split('/');     const [nNum, nDen] = n.split('/');     const resultNum = xNum * nNum;     const resultDen = xDen * nDen;     if (resultNum % resultDen === 0) {         return true;     }     return false; }
let xNumerator = x.split('/')[0];   let xDenominator = x.split('/')[1];   let nNumerator = n.split('/')[0];   let nDenominator = n.split('/')[1];   return (xNumerator * nDenominator) % (xDenominator * nNumerator) === 0 ? true : false; }
let xArr = x.split('/')   let nArr = n.split('/')   let first = xArr[0]*nArr[1]   let second = xArr[1]*nArr[0]   if(first/second%1 === 0){     return true   } else {     return false   } }
// ... }
//YOUR CODE HERE     let arr=[];     for(let i=1;i<xs.length;i++){       arr.push(xs[i]*i);     }     return arr; }
xs.shift(); //the first element is x^0 and will be 0, just remove it 	return xs.map(function(e, i){ return (i+1) * e; }); }
var ret = []     for(var i = 1; i < xs.length; i++){         ret.push(xs[i] * i)     }     return ret }
var dx = [0];     for (var i = 0; i < xs.length; i++){         dx.push(xs[i] * (i + 1));     }     return dx.slice(1); }
var list = []; 	for(var i = 1; i < xs.length; i++){ 		list.push(xs[i] * i); 	} 	return list; }
var i = 1;     var res = [];     for(i = 1; i < xs.length; i++){     	res.push(xs[i] * i);     }     return res; }
var ys = [];   for (var i = 1; i < xs.length; i++){     ys.push(xs[i] * i);   }   return ys; }
var i,     solution = [],     numberOfCoefficients = xs.length;   for(i = 1; i < numberOfCoefficients; i++){     solution.push(xs[i] * i);   }   return solution; }
var newArr = []; 	for(var i = 0; i < xs.length - 1; i++){ 		newArr.push(xs[i+1] * (i+1)); 	} 	return newArr; }
let result = []; 	for(let i = 1; i < xs.length; i++){ 		result.push(xs[i] * i); 	} 	return result; }
var new_xs = []; 	var n = 0; 	for(var i = 1; i < xs.length; i++){ 		new_xs[n] = xs[i] * i; 		n++; 	} 	return new_xs; }
var copy = xs.slice();   var deriv = [];   for (var i = 0; i < copy.length; i++){     deriv.push(copy[i] * i);   }   return deriv.slice(1); }
//slide 8     const new_xs = [];     for (let i = 1; i < xs.length; i++){         new_xs.push(xs[i] * i);     }     return new_xs; }
// todo }
var result = [];   var i = 0;   var length = xs.length;   var coefficient;   for(; i < length; i++){     coefficient = i * xs[i];     if(coefficient !== 0){       result.push(coefficient);     }   }   return result; }
//[3, 1, 2, 4, 5] 	var res = [];  	for(var i = 1; i < xs.length; i++){ 		res.push(xs[i] * i); 	}  	return res; }
return xs.map((v, i) => i * v).slice(1); }
var result = []; 	for(var i = 1; i < xs.length; i++){ 		result.push(xs[i] * i); 	} 	return result; }
if (text.length == 0){     return '';   }   else if (text[0] == 'a' || text[0] == 'e' || text[0] == 'i' || text[0] == 'o' || text[0] == 'u' || text[0] == 'A' || text[0] == 'E' || text[0] == 'I' || text[0] == 'O' || text[0] == 'U'){     return remove_vowels(text.slice(1));   }   else{     return text[0] + remove_vowels(text.slice(1));   } }
return text.replace(/[aeiouAEIOU]/g, ''); }
var reg = /[aeiou]/gi; 	return text.replace(reg, ''); }
var vowels = "aeiouAEIOU";     var text = text.split("");     for(var i = 0; i < text.length; i++){         for(var j = 0; j < vowels.length; j++){             if(text[i] == vowels[j]){                 text[i] = "";             }         }     }     text = text.join("");     return text; }
if(text === ''){         return '';     }else{         return text.replace(/[aeiou]/ig, '');     } }
let vowels = new Set(['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']);     let output = "";     for (let x of text){         if (!vowels.has(x)){             output += x;         }     }     return output; }
var vowels = "aeiouAEIOU";     var newText = "";     for (var i = 0; i < text.length; i++){         if (vowels.indexOf(text[i]) == -1){             newText += text[i];         }     }     return newText; }
var vowels = ['a', 'e', 'i', 'o', 'u']; 	var answer = ''; 	for (var i = 0; i < text.length; i++) { 		if (vowels.indexOf(text[i]) == -1) { 			answer += text[i]; 		} 	} 	return answer; }
//if the text is empty 	if(text.length === 0){ 		return ''; 	} 	//if the text is just one letter 	if(text.length === 1){ 		//if the text is not a vowel then return it 		if(text !== 'a' && text !== 'e' && text !== 'i' && text !== 'o' && text !== 'u'){ 			return text; 		} 		//if the text is a vowel return '' 		else{ 			return ''; 		} 	} 	//if the text has more than one letter 	else{ 		//if the first letter is not a vowel, then return it + remove_vowels function on the next letter 		if(text[0] !== 'a' && text[0] !== 'e' && text[0] !== 'i' && text[0] !== 'o' && text[0] !== 'u'){ 			return text[0] + remove_vowels(text.slice(1)); 		} 		//if the first letter is a vowel, then return remove_vowels function on the next letter 		else{ 			return remove_vowels(text.slice(1)); 		} 	} }
text=text.replace(/[aeiou]/g,"");   return text; }
var vowels = ['a', 'e', 'i', 'o', 'u'];     var result = '';     for (var i = 0; i < text.length; i++){         if (vowels.indexOf(text[i]) == -1){             result += text[i];         }     }     return result; }
return text.replace(/[aeiou]/gi, ''); }
return text.replace(/[aeiou]/gi, ''); }
const vowels = ['a', 'e', 'i', 'o', 'u'];     let result = '';     for (const char of text) {         if (!vowels.includes(char)) {             result += char;         }     }     return result; }
var result = '';     for (var i = 0; i < text.length; i++){         if (text[i] != 'a' && text[i] != 'e' && text[i] != 'i' && text[i] != 'o' && text[i] != 'u' && text[i] != 'A' && text[i] != 'E' && text[i] != 'I' && text[i] != 'O' && text[i] != 'U'){             result += text[i];         }     }     return result; }
var vowels = "aeiouAEIOU"; 	var result = ""; 	for(var i = 0; i < text.length; i++){ 		if(vowels.indexOf(text[i]) == -1){ 			result += text[i]; 		} 	} 	return result; }
return text.replace(/[aeiouAEIOU]/g, ''); }
var vowels = ['a', 'e', 'i', 'o', 'u']; 	var text_array = text.split(''); 	for (var i = 0; i < text_array.length; i++) { 		if (vowels.indexOf(text_array[i]) != -1) { 			text_array.splice(i, 1); 			i--; 		} 	} 	return text_array.join(''); }
//Checking the string for vowels and removing them 	var vowels = /[aeiou]/g; 	var str = text.replace(vowels, ''); 	return str; }
return s.split(/[\s,]+/); }
return s.replace(/\s/g,',').split(',') }
var words = s.split(/[\s,]+/);   return words; }
// convert string to an array with the split method     var arr = s.split(" ");     return arr; }
return s.split(/[ ,]+/); }
var result = [];     if (s) {         var ret = s.split(',');         ret.forEach(function (i) {             if (i) {                 result.push(i.trim());             }         });     }     return result; }
return s.split(' ').filter(a => a); }
return s.split(/,| /)     // return s.split(/[\s,]+/) }
return s.split(/[\s,]+/g); }
return s.split(/[\s,]+/); }
return s.split(/,| /) }
return s.split(/[\s,]+/); }
return s.split(/[ ,]+/g); }
if(x % 2 == 0) return x;     if(y % 2 == 0) return y;     else return -1; }
if(x % 2 === 0)         return x;     if(y % 2 === 0)         return y;     return -1; }
if(x%2==0 && y%2==0){ 		if(x<y){ 			return y; 		} 		return x; 	} 	if(x%2==0 && y%2!=0){ 		return x; 	} 	if(x%2!=0 && y%2==0){ 		return y; 	} 	return -1; }
for(var i = y; i >= x; i--){     if(i % 2 === 0){       return i;     }   }   return -1; }
// Your code here }
for(var i = y; i >= x; i--){         if(i % 2 == 0){             return i;         }     }     return -1; }
if(x % 2 == 0 && y % 2 == 0){ 		return y; 	} 	else if(x % 2 == 0 && y % 2 != 0){ 		return x; 	} 	else if(x % 2 != 0 && y % 2 == 0){ 		return y; 	} 	else{ 		return -1; 	} }
// Your answer here }
let evens = [];   for (let i = x; i <= y; i++){     if (i % 2 === 0){       evens.push(i);     }   }   if (evens.length === 0){     return -1;   }   else {     return Math.max(...evens);   } }
if(x>y){ 		return -1; 	} 	if(x%2==0){ 		return x; 	} 	else{ 		return x+1; 	} }
var num = -1; 	var num2 = Math.max(x, y); 	 	for(var i = x; i <= num2; i++){ 		if(i % 2 == 0 && i > num){ 			num = i; 		} 	} 	 	return num; 	 }
var x = prompt("Enter a number");     var y = prompt("Enter another number");     var a = x;     var b = y;     if(x>y){         while(a>=b){             if(a%2 == 0){                 return a;             }             a--;         }     }     else if(y>x){         while(b>=a){             if(b%2 == 0){                 return b;             }             b--;         }     }     else{         return "This is not a valid range";     } } alert(choose_num());
if(x % 2 === 0){         for(let i = x; i <= y; i++){             if(i % 2 === 0 && i < y){                 x = i;             }         }         return x;     }     else if(y % 2 === 0){         for(let i = y; i >= x; i--){             if(i % 2 === 0 && i > x){                 y = i;             }         }         return y;     }     else{         return -1;     } }
var array = [];     for(var i = x; i <= y; i++){         if(i % 2 == 0){             array.push(i);         }     }     return array[array.length - 1] || -1; }
var result = -1;  	//your code here     for (var i = x; i <= y; i++) {         if (i % 2 == 0) {             result = i;         }     } 	return result; }
var result = 0; 	var num = 0; 	 	if(x<=y){ 		for(var i=x; i<=y; i++){ 			if(i%2 == 0){ 				result = i; 			} 		} 	} 	else{ 		result = -1; 	} 	console.log(result); }  choose_num(10, 20); choose_num(20, 10); choose_num(10, 21); choose_num(5, 10);
if(x > y){         return -1;     }     if(x%2 === 0){         return x;     }     return choose_num(x+1, y); }
if(x > y){         return -1;     }     if(x % 2 == 0){         return x;     }     else{         x++;         return choose_num(x, y);     } }
var n = Math.max(x, y);     for(i = n; i >= Math.min(x, y); i--){         if(i % 2 == 0){             return i;         }     }     return -1; }
var array = []; 	array.push(2); 	array.push(3); 	var i = 2; 	var j = 0; 	while(i<n){ 		array.push(array[j]+array[j+1]); 		if(isPrime(array[j+2])){ 			i++; 		} 		j++; 	} 	return array[array.length-1]; }
var count = 2;     var nth_fib = 1;     var fib_1 = 1;     var fib_2 = 1;     while(count<=n){         nth_fib = fib_1 + fib_2;         fib_2 = fib_1;         fib_1 = nth_fib;         if(is_prime(nth_fib)){             count += 1;         }     }     return nth_fib; }
}
var fib_num = fib(n);     var prime_fib_num = 0;     var i = 0;     while (prime_fib_num < n){         if (is_prime(fib_num)){             i++;             prime_fib_num = i;         }         fib_num = fib(fib_num);     }     return fib_num; }
var i = 0; 	var j = 1; 	var count = 0; 	var result = 0; 	while(count<n){ 		if(isPrime(i)){ 			if(i%2 == 0){ 				result = i; 				count++; 			} 		} 		var k = i+j; 		i = j; 		j = k; 	} 	return result; }
var a = 2, b = 3, i = 0;   while(i < n){     var sum = a + b;     if(isPrime(sum)){       i++;     }     a = b;     b = sum;   }   return a; }
return FibonacciRecursive(n); }
var counter = 0; 	var fibonacci = fib(0); 	var i = 0; 	while(counter < n){ 		if(prime(fibonacci)){ 			counter++; 		} 		i++; 		fibonacci = fib(i); 	} 	return fibonacci; }
var fib = fibonacci(n);     if(fib >= 2 && prime(fib)){         return fib;     }     else{         return prime_fib(n+1);     } }
if(n==1){     return 2;   }   if(n==2){     return 3;   }   let fibn1=2;   let fibn2=3;   let fibn=5;   let fib=5;   let num=3;   while(num<n){     if(is_prime(fibn)){       num++;       fib=fibn;     }     fibn=fibn1+fibn2;     fibn1=fibn2;     fibn2=fibn;   }   return fib; }
var prim = 2; 	var fib1 = 1; 	var fib2 = 2; 	for(var i = 0; i<n; i++){ 		var fib = fib1 + fib2; 		fib1 = fib2; 		fib2 = fib; 		for(var j = 2; j< fib; j++){ 			if(fib%j == 0){ 				break; 			} 			else if(j == fib-1){ 				prim = fib; 			} 		} 	} 	return prim; }
let prime_fib_list = [];     let fib_list = fibonacci_num(100);     for(let i = 0; i < fib_list.length; i++){         if(is_prime(fib_list[i])){             prime_fib_list.push(fib_list[i]);         }     }     return prime_fib_list[n - 1]; }
var i=0;   var first = 0;   var second = 1;   var count = 0;   while(count<n){     var fib = first + second;     if(isPrime(fib)){       count++;     }     first = second;     second = fib;   }   return fib; }
var i = 1;     var fib1 = 1;     var fib2 = 1;     var fibN = 1;     var count = 0;     while(i <= n){         if(isPrime(fibN)){             count += 1;         }         if(count == n){             return fibN;         }         fibN = fib1 + fib2;         fib1 = fib2;         fib2 = fibN;         i += 1;     }     return fibN; }
var nth_number = 0;     var current_number = 0;     var prev_number = 0;     var next_number = 1;     var count = 0;     while(count < n){         if(is_prime(current_number)){             nth_number = current_number;             count++;         }         current_number = prev_number + next_number;         prev_number = next_number;         next_number = current_number;     }     return nth_number; }
var prime_fib_num = 0; 	var fib_num = 0; 	var count = 0; 	var prime_count = 0; 	var fib_arr = [0,1]; 	while(count <= n){ 		fib_num = fib_arr[count-1] + fib_arr[count]; 		fib_arr.push(fib_num); 		count++; 		if(is_prime(fib_num)){ 			prime_count++; 			prime_fib_num = fib_num; 		} 	} 	return prime_fib_num; }
if(n == 1){ 		return 2; 	}else if(n == 2){ 		return 3; 	}else{ 		var fN = 2; 		var fNm1 = 1; 		var fNm2 = 0; 		var count = 2; 		while(count < n){ 			fN = fNm1 + fNm2; 			if(isPrime(fN)){ 				count++; 			} 			fNm2 = fNm1; 			fNm1 = fN; 		} 		return fN; 	} }
var num = 0;     var fibonacci = 0;     var fibonacci_prime = 0;     var first = 0;     var second = 1;     var i = 0;     while(i < n){         fibonacci = first + second;         first = second;         second = fibonacci;         if(is_prime(fibonacci)){             i += 1;             num = fibonacci;         }     }     return num; }
var i = 2;     var count = 0;     while(count < n){         if(is_prime(fib(i))){             count++;         }         i++;     }     return fib(i-1); }
// Write your code here... }
if (n % 2 === 0){     return true;   } else {     return false;   } }
let x = n - 8;     if (x % 2 != 0 || x < 0){         return false;     } else {         return true;     } }
var i = 0, sum = 0;     while(sum < n){         sum += 2*i;         i++;     }     return sum == n; }
var result = false;   var even = 2;   var i = 0;   while (even <= n && i < 3) {     result = result || is_equal_to_sum_even(n - even);     even += 2;     i++;   }   return result || n == 0; }
}
return (n/2) % 1 === 0 }
for(let i = 1; i < n; i++){         for(let j = 1; j < n; j++){             for(let k = 1; k < n; k++){                 for(let l = 1; l < n; l++){                     if((i * 2) + (j * 2) + (k * 2) + (l * 2) == n){                         return true;                     }                 }             }         }     }     return false; }
// Your code here     var isTrue = false;     for(var i = 1; i < n; i++){         for(var j = i + 1; j < n; j++){             for(var k = j + 1; k < n; k++){                 for(var l = k + 1; l < n; l++){                     if(i + j + k + l == n && (i % 2 == 0) && (j % 2 == 0) && (k % 2 == 0) && (l % 2 == 0)){                         isTrue = true;                     }                 }             }         }     }     return isTrue; }
let sum = 0;   let evenNumber = 2;   while(evenNumber <= n){     sum += evenNumber;     evenNumber += 2;   }   return sum === n; }
//write your code here }
return false; }
//variables     let total = 0;     let remainder = 0;     let count = 0;     //loop through and adding     for(i = 0; i < n; i++){         //checking for the remainder         remainder = i % 2;         //checking for the remainder         if(remainder == 0){             //adding to the total             total += i;             //checking for the total to equal the given number             if(total == n){                 //adding to the count                 count++;             }//end of if statement         }//end of if statement     }//end of for loop     //checking for count to equal four     if(count == 4){         //returning true         return true;     }//end of if statement     //returning false     return false; }//end of function
return sum_of_numbers(n) }
let answer = false;     let list = [2, 4, 6, 8];     let i = 0;     while (i < list.length) {         if (list[i] === n) {             answer = true;         }         i++;     }     return answer; }
return n%2 === 0 && n !== 0 }
let result = n % 2 == 0 ? (n - 2) : n     let count = 1     for(let i = 0; i < n / 2 - 1; i++) {         if (result >= 0) {             result -= 4             count++         }     }     return count == 4 ? true : false }
// if (n % 2 !== 0) {     //     return false;     // }     // var res = [];     // for (let i = 0; i < n; i++) {     //     for (let j = 0; j < n; j++) {     //         for (let k = 0; k < n; k++) {     //             for (let l = 0; l < n; l++) {     //                 var sum = i + j + k + l;     //                 if (sum === n) {     //                     var is_odd = i % 2 !== 0 || j % 2 !== 0 || k % 2 !== 0 || l % 2 !== 0;     //                     if (!is_odd) {     //                         res.push([i, j, k, l]);     //                     }     //                 }     //             }     //         }     //     }     // }     // return res.length > 0;     var count = 0;     for (let i = 0; i < n; i++) {         for (let j = 0; j < n; j++) {             for (let k = 0; k < n; k++) {                 for (let l = 0; l < n; l++) {                     var sum = i + j + k + l;                     if (sum === n) {                         var is_odd = i % 2 !== 0 || j % 2 !== 0 || k % 2 !== 0 || l % 2 !== 0;                         if (!is_odd) {                             count += 1;                         }                     }                 }             }         }     }     return count === 4; }
var sum = 0; 	if(n === 0) 		return false; 	for(var i = 2; i <= n; i+=2){ 		sum += i; 		if(sum === n) 			return true; 	} 	return false; }
let beats = []   let split = music_string.split(' ')   for (let i = 0; i < split.length; i++) {     let note = split[i]     if (note == 'o') {       beats.push(4)     } else if (note == 'o|') {       beats.push(2)     } else if (note == '.|') {       beats.push(1)     }   }   return beats }
let bars = music_string.split(' ');     let result = [];     for (let i = 0; i < bars.length; i++) {         if (bars[i] === 'o') {             result.push(4);         } else if (bars[i] === 'o|') {             result.push(2);         } else if (bars[i] === '.|') {             result.push(1);         }     }     return result; }
var note = ''; 	var beats = []; 	var i = 0; 	var res = []; 	while(i < music_string.length){ 		if(music_string[i] == ' '){ 			if(note == 'o'){ 				beats.push(4); 			} 			else if(note == 'o|'){ 				beats.push(2); 			} 			else if(note == '.|'){ 				beats.push(1); 			} 			note = ''; 		} 		else{ 			note += music_string[i]; 		} 		i++; 	} 	if(note == 'o'){ 		beats.push(4); 	} 	else if(note == 'o|'){ 		beats.push(2); 	} 	else if(note == '.|'){ 		beats.push(1); 	} 	return beats; }
let result = [];     const map = {         'o': 4,         'o|': 2,         '.|': 1     };     music_string.split(' ').forEach(function(note){         result.push(map[note]);     });     return result; }
var beats = {'o': 4, 'o|': 2, '.|': 1};     var array = music_string.split(' ');     var result = [];     for (var i = 0; i < array.length; i++) {         result.push(beats[array[i]]);     }     return result; }
return music_string.split(' ').map(m => {         switch(m) {             case 'o':                 return 4;             case 'o|':                 return 2;             case '.|':                 return 1;         }     }); }
var beats = [];   var new_music_string = music_string.split(' ');   for (i=0; i<new_music_string.length; i++){     if (new_music_string[i] == 'o'){       beats.push(4);     }     else if (new_music_string[i] == 'o|'){       beats.push(2);     }     else if (new_music_string[i] == '.|'){       beats.push(1);     }   }   return beats; }
let output = [],         i = 0,         obj = {             'o': '4',             'o|': '2',             '.|': '1'         };     while(music_string.length){         output.push(Number(obj[music_string.slice(0, 2)]));         music_string = music_string.slice(2, music_string.length);     }     return output; }
var countArray = [];   for (var i = 0; i < music_string.length; i++){     if (music_string[i] == 'o'){       countArray.push(4);     }     else if (music_string[i] == 'o' && music_string[i+1] == '|'){       countArray.push(2);     }     else if (music_string[i] == '.' && music_string[i+1] == '|'){       countArray.push(1);     }   }   return countArray; }
var beats = {         'o' : 4,         'o|' : 2,         '.|' : 1     };     var result = [];     var notes = music_string.split(' ');     notes.forEach(function(note){         result.push(beats[note]);     });     return result; }  module.exports = {     fibonacci: fibonacci,     format_date: format_date,     find_longest_word: find_longest_word,     get_words_with_length: get_words_with_length,     find_duplicate_id: find_duplicate_id,     get_words_with_two_vowels: get_words_with_two_vowels,     get_words_with_x_vowels: get_words_with_x_vowels,     get_words_ending_with_ing: get_words_ending_with_ing,     get_words_with_b_and_ing: get_words_with_b_and_ing,     map_words_to_camel_case: map_words_to_camel_case,     map_words_to_snake_case: map_words_to_snake_case,     map_words_to_all_caps: map_words_to_all_caps,     map_words_to_length: map_words_to_length,     map_words_to_first_letter: map_words_to_first_letter,     map_words_to_array_of_chars: map_words_to_array_of_chars,     map_words_to_length_of_first_and_last_chars: map_words_to_length_of_first_and_last_chars,     remove_chars_from_first_and_last: remove_chars_from_first_and_last,     get_nth_item: get_nth_item,     concat_first_two_strings: concat_first_two_strings,     find_first_
//parse the music string and create an array of numbers     var array = [];     if(music_string === ''){         return array;     }     var temp = music_string.split(" ");     for(var i = 0; i < temp.length; i++){         if(temp[i] === 'o'){             array.push(4);         }         else if(temp[i] === 'o|'){             array.push(2);         }         else if(temp[i] === '.|'){             array.push(1);         }     }     return array; }
var notes = ['o|', '.|', 'o'];     var beats = [2, 1, 4];     var parsed_music = music_string.split(' ');     var result = [];     for (var i = 0; i < parsed_music.length; i++){         for (var j = 0; j < notes.length; j++){             if (parsed_music[i] == notes[j]){                 result.push(beats[j]);             }         }     }     return result; }
return music_string.split(' ').map(x => {         switch(x) {             case 'o': return 4;             case 'o|': return 2;             case '.|': return 1;         }     }); }
var result = [];   var beats = 0;   for(var i = 0; i < music_string.length; i++){     if(music_string[i] === 'o'){       beats = 4;     }else if(music_string[i] === '|'){       beats = beats/2;     }else if(music_string[i] === '.'){       beats = 1;     }     result.push(beats);   }   return result; }
var result = []; 	var array_of_notes = music_string.split(' '); 	for (var i = 0; i < array_of_notes.length; i++) { 		if (array_of_notes[i].charAt(0) == 'o') { 			if (array_of_notes[i].charAt(1) == '|') { 				result.push(2); 			} 			else { 				result.push(4); 			} 		} 		else { 			result.push(1); 		} 	} 	return result; }
const note_types = ['whole', 'half', 'quarter'];     const music_notes = music_string.split(' ');     const values = [4, 2, 1];     let result = [];     for (let note of music_notes){         if (note[0] === 'o') {             if (note.length === 1) {                 result.push(values[0]);             } else {                 result.push(values[1]);             }         } else {             result.push(values[2]);         }     }     return result; }
var notes = music_string.split(' '); 	var note_value = ['o', 'o|', '.|', '..']; 	var note_time = [4, 2, 1, 0.5]; 	var time = []; 	var i = 0; 	while(notes[i]){ 		var j = 0; 		while(note_value[j]){ 			if(notes[i] == note_value[j]){ 				time.push(note_time[j]); 			} 			j++; 		} 		i++; 	} 	return time; } parse_music('o o| .| o| o| .| .| .| .| o o');
let result = []; 	let notes = music_string.split(' '); 	notes.forEach(function(item){ 		switch(item){ 			case 'o': 				result.push(4); 				break; 			case 'o|': 				result.push(2); 				break; 			case '.|': 				result.push(1); 				break; 		} 	}); 	return result; }
}
var letters = {};     var i = 0;     while(i < s0.length){         if(letters[s0[i]] === undefined){             letters[s0[i]] = 1;         } else {             letters[s0[i]] += 1;         }         i++;     }     i = 0;     while(i < s1.length){         if(letters[s1[i]] === undefined){             return false;         } else {             letters[s1[i]] -= 1;         }         i++;     }     var j = 0;     for(var key in letters){         if(letters[key] !== 0){             return false;         }     }     return true; }
let s0_dict = {}; 	let s1_dict = {}; 	for (let i=0; i<s0.length; i++){ 		let char = s0[i]; 		if (s0_dict[char]){ 			s0_dict[char] += 1; 		} 		else{ 			s0_dict[char] = 1; 		} 	} 	for (let i=0; i<s1.length; i++){ 		let char = s1[i]; 		if (s1_dict[char]){ 			s1_dict[char] += 1; 		} 		else{ 			s1_dict[char] = 1; 		} 	} 	for (let key in s0_dict){ 		if (!s1_dict[key] || s0_dict[key] !== s1_dict[key]){ 			return false; 		} 	} 	for (let key in s1_dict){ 		if (!s0_dict[key] || s0_dict[key] !== s1_dict[key]){ 			return false; 		} 	} 	return true; }
if(s0.length !== s1.length){         return false;     }     var obj = {};     for(var i = 0; i < s0.length; i++){         var s = s0[i];         if(obj[s]){             obj[s]++;         }else{             obj[s] = 1;         }     }     for(var i = 0; i < s1.length; i++){         var s = s1[i];         if(obj[s]){             obj[s]--;         }else{             return false;         }     }     for(var key in obj){         if(obj[key] !== 0){             return false;         }     }     return true; }
if(s0.length != s1.length){         return false;     }     if(s0 == "" && s1 == ""){         return true;     }     var s0 = s0.split("");     var s1 = s1.split("");     for(var i = 0; i < s0.length; i++){         var index = s1.indexOf(s0[i]);         if(index == -1){             return false;         }         s1.splice(index, 1);     }     return true; }
if(s0.length !== s1.length){         return false;     }     for(var i = 0; i < s0.length; i++){         if(s0.indexOf(s1[i]) !== -1){             var newS0 = s0.slice(0, s0.indexOf(s1[i])) + s0.slice(s0.indexOf(s1[i]) + 1, s0.length);             var newS1 = s1.slice(0, i) + s1.slice(i + 1, s1.length);             if(same_chars(newS0, newS1)){                 return true;             }         }     }     return false; }
if(s0.length !== s1.length){         return false;     }     if(s0.length === 0){         return true;     }     let s0freq = {};     let s1freq = {};     for(let i = 0; i < s0.length; i++){         if(s0freq[s0[i]]){             s0freq[s0[i]]++;         } else {             s0freq[s0[i]] = 1;         }         if(s1freq[s1[i]]){             s1freq[s1[i]]++;         } else {             s1freq[s1[i]] = 1;         }     }     for(let i = 0; i < s0.length; i++){         if(s0freq[s0[i]] !== s1freq[s0[i]]){             return false;         }     }     return true; }
var n0 = s0.length, n1 = s1.length; 	if(n0 > n1){ 		return false; 	} 	var a0 = s0.split('').sort(), a1 = s1.split('').sort(); 	for(var i=0; i<n0; i++){ 		if(a0[i] != a1[i]){ 			return false; 		} 	} 	return true; }
var empty = []; 	var str1 = s0.split(""); 	var str2 = s1.split(""); 	str1.sort(); 	str2.sort(); 	for(var i = 0; i < str1.length; i++){ 		if(str1[i] != str2[i]){ 			return false; 		} 	} 	return true; }
if (s0.length != s1.length) {     return false;   }   var chars = {};   for (var i = 0; i < s0.length; i++) {     if (chars[s0[i]] === undefined) {       chars[s0[i]] = 1;     } else {       chars[s0[i]]++;     }   }   for (var i = 0; i < s1.length; i++) {     if (chars[s1[i]] === undefined) {       return false;     } else {       chars[s1[i]]--;     }   }   return true; }
//split then sort 	// 	-> array of characters 	// -> no duplicates 	// -> 	// "abcd" 	// s0 = "eabcdzzzz" 	// s1 = "dddzzzzzzzddeddabc" 	//   a b c d e z 	// d 4 1 1 0 0 5 	// e 1 0 0 0 1 0 	// a 0 1 0 0 0 0 	// b 0 0 1 0 0 0 	// c 0 0 0 1 0 0 	// z 0 0 0 0 0 5 	// dddzzzzzzzddeddabc 	// eabcdzzzz 	// array of characters 	// and count (hash table) 	// for each string 	// 	for each character 	// 		count++ 	// 	// for each string 	// 	for each character 	// 		count-- 	// 		if count < 0 	// 			return false 	// return true 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	// 	//
if(s0.length !== s1.length){         return false;     }     let charCount = {};     for(let i = 0; i < s0.length; i++){         if(charCount[s0[i]] === undefined){             charCount[s0[i]] = 1;         }else{             charCount[s0[i]]++;         }     }     for(let i = 0; i < s1.length; i++){         if(charCount[s1[i]] === undefined){             return false;         }else{             charCount[s1[i]]--;         }     }     return true; }
return (new Set(s0)).size === (new Set(s1)).size; }
// TODO: this is your task.     var s0 = s0.toLowerCase();     var s1 = s1.toLowerCase();     if (s0.length != s1.length) {         return false;     }     var a0 = [];     var a1 = [];     for (var i = 0; i < s0.length; i++) {         a0.push(s0[i]);         a1.push(s1[i]);     }     a0.sort();     a1.sort();     return (a0.join('') == a1.join('')); }
var s0a = s0.split('').sort().join('')   var s1a = s1.split('').sort().join('')   return s0a === s1a }
if(s0.length != s1.length){ 		return false; 	} 	for(let i = 0; i < s0.length; i++){ 		if(s0.indexOf(s1[i]) < 0){ 			return false; 		} 	} 	return true; }
if(s0.length != s1.length){ 		return false; 	} 	for(var i = 0; i < s0.length; i++){ 		for(var j = 0; j < s1.length; j++){ 			if(s0[i] == s1[j]){ 				s1 = s1.substring(0, j) + s1.substring(j + 1); 				break; 			} 		} 	} 	return (s1.length == 0); }
if(s0.length !== s1.length){ 		return false; 	}  	var hash = {}; 	for(var i = 0; i < s0.length; i++){ 		if(hash[s0[i]] === undefined){ 			hash[s0[i]] = 1; 		} else { 			hash[s0[i]]++; 		} 	}  	for(var i = 0; i < s1.length; i++){ 		if(hash[s1[i]] === undefined){ 			return false; 		} else { 			hash[s1[i]]--; 		} 	}  	return true; }
let tmp = {};     for(let i=0; i<s0.length; i++){         tmp[s0[i]] = tmp[s0[i]] + 1 || 1;     }     for(let i=0; i<s1.length; i++){         if(tmp[s1[i]]){             tmp[s1[i]] = tmp[s1[i]] - 1;         }     }     for(let key in tmp){         if(tmp[key] !== 0){             return false;         }     }     return true; }
var x = s0.split('').sort().join('');   var y = s1.split('').sort().join('');   if (x == y){     return true;   }   else{     return false;   } }
let max=0;     let maxword="";     for(let i=0;i<words.length;i++){         if(max<getUnique(words[i])){             max=getUnique(words[i]);             maxword=words[i];         }     }     return maxword; }
var max=0;     var long="";     for(var i=0;i<words.length;i++){         var count=0;         for(var j=0;j<words[i].length;j++){             if(words[i].indexOf(words[i][j])==j){                 count++;             }         }         if(count>max){             max=count;             long=words[i];         }     }     return long; }
var string = "";   for(var i = 0; i < words.length; i++){     var count = 0;     for(var j = 0; j < words[i].length; j++){       if(words[i].lastIndexOf(words[i][j]) === words[i].indexOf(words[i][j])){         count++;       }     }     if(count > string.length){       string = words[i];     }   }   return string; }
var max_word = "";   var max_length = 0;   for(var i = 0; i < words.length; i++){     var current_word = words[i];     var seen = [];     var current_length = 0;     for(var j = 0; j < current_word.length; j++){       var current_char = current_word[j];       if(seen.indexOf(current_char) == -1){         seen.push(current_char);         current_length += 1;       }     }     if(current_length > max_length){       max_length = current_length;       max_word = current_word;     }   }   return max_word; }
// your code here.. }
let obj = {}     let max = 0     let maxWord = ''     for(let i = 0; i < words.length; i++){         obj[words[i]] = 0         for(let j = 0; j < words[i].length; j++){             if(words[i].indexOf(words[i][j]) == j){                 obj[words[i]] ++             }         }         if(obj[words[i]] > max){             max = obj[words[i]]             maxWord = words[i]         }     }     return maxWord }
let result = words[0];     for(let i = 1; i < words.length; i++){         if(words[i].length > result.length){             result = words[i];         }     }     return result; } let t = find_max(["name", "of", "string"]);
var max = 0;   var result = '';   for(var i = 0; i < words.length; i++){     var word = words[i];     var currentMax = getUniqueCount(word);     if(currentMax > max){       max = currentMax;       result = word;     }   }   return result; }
let words2 = words.map(e => [e, e.split('').filter((v, i, a) => a.indexOf(v) === i).length])     console.log(words2)     words2.sort((a, b) => b[1] - a[1])     console.log(words2)     let max_count = words2[0][1]     let max_words = []     for (let i = 0; i < words2.length; i++){         if (words2[i][1] < max_count){             break         }         max_words.push(words2[i][0])     }     console.log(max_words)     max_words.sort()     return max_words[0] }
var splitWords = [];     var max = 0;     var index = 0;     var word = "";     var len = words.length;     for(var i = 0; i < len; i++){         splitWords.push(words[i].split(""));     }     for(var i = 0; i < len; i++){         if(max < new Set(splitWords[i]).size){             max = new Set(splitWords[i]).size;             index = i;         }     }     for(var i = 0; i < len; i++){         if(i !== index){             if(max === new Set(splitWords[i]).size){                 if(words[i] < words[index]){                     index = i;                 }             }         }     }     return words[index]; }
var max=0;   var result = "";   for(var i=0; i<words.length; i++){     var word=words[i];     var temp=0;     for(var j=0; j<word.length; j++){       for(var k=j+1; k<word.length; k++){         if(word[j]===word[k]){           temp++;         }       }     }     if(temp>max){       max=temp;       result=word;     }   }   return result; }
let max=0;     let maxStr="";     for(let i=0;i<words.length;i++){         if(max<uniq(words[i])){             max=uniq(words[i]);             maxStr=words[i];         }     }     return maxStr; }
return words.sort(function(a,b){     if(a.length < b.length){       return -1;     }     if(a.length > b.length){       return 1;     }     if(a.length === b.length){       if(a < b){         return -1;       }       if(a > b){         return 1;       }     }     return 0;   }).pop(); }
var count_chars = words.map(function(word){ 		var count = 0; 		for(var i = 0; i < word.length; i++){ 			if(word.indexOf(word[i]) == i){ 				count++; 			} 		} 		return count; 	}); 	var max = Math.max.apply(null, count_chars); 	return words[count_chars.indexOf(max)]; }
var max = words[0];   for(var i = 0; i < words.length; i++){     if(new Set(words[i]).size > new Set(max).size){       max = words[i];     }   }   return max; }
var mostUniqueChars = 0;   var wordMostUniqueChars = "";   var charsArray = [];   var chars = {};   words.forEach(function(word){     charsArray = word.split("");     charsArray.forEach(function(char){       if(chars[char] == undefined){         chars[char] = 1;       }else{         chars[char] += 1;       }     });     console.log(chars);     console.log(Object.keys(chars).length);     if(Object.keys(chars).length > mostUniqueChars){       mostUniqueChars = Object.keys(chars).length;       wordMostUniqueChars = word;     }     chars = {};   });   return wordMostUniqueChars; }
var map = {}; 	words.forEach(function(word){ 		var word_map = {}; 		word.split('').forEach(function(letter){ 			word_map[letter] = true; 		}); 		map[word] = Object.keys(word_map).length; 	}); 	var sorted = Object.keys(map).sort(function(a,b){ 		return map[b] - map[a]; 	}); 	return sorted[0]; }
var result = "";   if(words.length === 0){     return false;   }    var current_longest = get_unique_chars(words[0]);   for(var i = 1; i < words.length; i++){     var word = words[i];     var unique_chars = get_unique_chars(word);     if(unique_chars.length > current_longest.length){       current_longest = unique_chars;       result = word;     }else if(unique_chars.length === current_longest.length){       if(word < result){         result = word;       }     }   }   return result; }
var result = '';   var max_unique = 0;   var unique_chars = [];   for(var i = 0; i < words.length; i++){     var chars = words[i].split('');     var uniques = [];     for(var j = 0; j < chars.length; j++){       if(uniques.indexOf(chars[j]) == -1){         uniques.push(chars[j]);       }     }     if(uniques.length > max_unique){       max_unique = uniques.length;       result = words[i];     }else if(uniques.length == max_unique){       if(words[i] < result){         result = words[i];       }     }   }   return result; }
// create regular expressions     const reg = /^[a-zA-Z]+[0-9]{0,3}\.txt$|^[a-zA-Z]+[0-9]{0,3}\.exe$|^[a-zA-Z]+[0-9]{0,3}\.dll$/     if(reg.test(file_name)){         return 'Yes'     }     return 'No' }
let regex = /^[a-zA-Z][a-zA-Z0-9]{0,2}\.(txt|exe|dll)$/   return regex.test(file_name) ? 'Yes' : 'No' }
if (file_name.match(/[0-9]/g)===null || file_name.match(/[0-9]/g).length<4){ 		if (file_name.match(/\./g)===null || file_name.match(/\./g).length==1){ 			if (file_name.match(/[A-Za-z]+\.[a-zA-Z]+/g)===null || file_name.match(/[A-Za-z]+\.[a-zA-Z]+/g).length==1){ 				var ext = file_name.match(/[A-Za-z]+\.[a-zA-Z]+/g)[0].split('.')[1]; 				if (ext=="txt" || ext=="exe" || ext=="dll"){ 					return "Yes"; 				} 			} 		} 	} 	return "No"; }
//'^([a-zA-Z][a-zA-Z0-9]{0,2})\.((txt)|(exe)|(dll))$' 	let reg = /^([a-zA-Z][a-zA-Z0-9]{0,2})\.((txt)|(exe)|(dll))$/; 	let res = reg.test(file_name); 	console.log(res); 	if(res){ 		return 'Yes'; 	} 	return 'No'; }
// Write your code here }
var toReturn = false;     var digits = 0;     var i = 0;     while(i < file_name.length && digits <= 3){         if(file_name[i] >= '0' && file_name[i] <= '9'){             digits++;         }         i++;     }     if(digits > 3){         return toReturn;     }     var dot = 0;     for(var j = 0; j < file_name.length; j++){         if(file_name[j] == '.'){             dot++;         }     }     if(dot != 1){         return toReturn;     }     if(file_name[0] < 'a' || file_name[0] > 'z' && file_name[0] < 'A' || file_name[0] > 'Z'){         return toReturn;     }     var first_dot_index = file_name.indexOf('.');     var sub_after_dot = file_name.substring(first_dot_index + 1);     if(sub_after_dot != 'txt' && sub_after_dot != 'exe' && sub_after_dot != 'dll'){         return toReturn;     }     toReturn = true;     return toReturn; }
//write your code here }
const file_arr = file_name.split('.');     let count_digits = 0;     for(let i = 0; i < file_arr[0].length; i++){         if(file_arr[0][i] >= '0' && file_arr[0][i] <= '9'){             count_digits++;         }     }     if(count_digits >= 4){         return 'No';     }     if(file_arr.length !== 2){         return 'No';     }     if(file_arr[0][0] < 'a' || file_arr[0][0] > 'z'){         return 'No';     }     if(file_arr[1] !== 'txt' && file_arr[1] !== 'exe' && file_arr[1] !== 'dll'){         return 'No';     }     return 'Yes'; }
}
}
if (/^[a-zA-Z][a-zA-Z0-9]{0,2}\.[a-zA-Z0-9]{3}$/.test(file_name)){         return 'Yes';     }     return 'No'; }
if(!/^[a-zA-Z]+([\w.]+)?$/.test(file_name)){         return 'No';     }     const file_name_array = file_name.split('.');     const file_name_without_extension = file_name_array[0];     const file_extension = file_name_array[1];     if(file_name_without_extension.match(/\d/g).length > 3 || !/^(txt|exe|dll)$/.test(file_extension)){         return 'No';     }     return 'Yes'; }
if (file_name.match(/[0-9]/g) == null) {         return 'No';     }     if (file_name.match(/[0-9]/g).length > 3) {         return 'No';     }     if (file_name.match(/\./g) == null) {         return 'No';     }     if (file_name.match(/\./g).length != 1) {         return 'No';     }     var file_name_split = file_name.split('.');     if (file_name_split[0].length == 0) {         return 'No';     }     if (file_name_split[0].match(/[a-zA-Z]/g) == null) {         return 'No';     }     if (file_name_split[1] != 'txt' && file_name_split[1] != 'exe' && file_name_split[1] != 'dll') {         return 'No';     }     return 'Yes'; }
//your code here }
let reg = /^[a-zA-Z][a-zA-Z0-9]{0,3}\.(txt|exe|dll)$/;     if(reg.test(file_name)){         return 'Yes';     }else{         return 'No';     } }
file_name = file_name.split(".")     var file_name_check_result = 'Yes'     if(file_name.length>2){         file_name_check_result = 'No'     }else if(file_name[0].match(/[0-9]/gi) == null){         file_name_check_result = 'No'     }else if(file_name[0].match(/[0-9]/gi).length>3){         file_name_check_result = 'No'     }else if(file_name[1] != 'txt' && file_name[1] != 'exe' && file_name[1] != 'dll'){         file_name_check_result = 'No'     }     return file_name_check_result }
if (file_name.match(/[a-zA-Z]\w*\.[a-zA-Z]{3}/)){ 		if (file_name.match(/[0-9]{4}/)){ 			return 'No'; 		} 		return 'Yes'; 	} 	return 'No'; }
var digits = ["0","1","2","3","4","5","6","7","8","9"]; 	var alphapet = "abcdefghijklmnopqrstuvwxyz"; 	var file_types = ["txt","exe","dll"]; 	var count = 0; 	var file_name_split = file_name.split("."); 	if(file_name_split.length!=2){ 		return "No"; 	} 	var file_type = file_name_split[1]; 	var count_type = 0; 	var check_type = 0; 	for(var i=0;i<file_types.length;i++){ 		if(file_type===file_types[i]){ 			check_type = 1; 		} 	} 	if(check_type===0){ 		return "No"; 	} 	var file_name = file_name_split[0]; 	var first_char = file_name[0]; 	var check_char = 0; 	for(var i=0;i<alphapet.length;i++){ 		if(first_char===alphapet[i]){ 			check_char = 1; 		} 	} 	if(check_char===0){ 		return "No"; 	} 	for(var i=0;i<file_name.length;i++){ 		var char = file_name[i]; 		for(var j=0;j<digits.length;j++){ 			if(char===digits[j]){ 				count += 1; 			} 		} 	} 	if(count>3){ 		return "No"; 	} 	return "Yes"; }
let regex = /^([a-zA-Z]{1}[a-zA-Z0-9]{0,12})\.(txt|exe|dll)$/;   let str = file_name.match(regex);   if(str === null){     return "No";   }   return "Yes"; }
//your code here 	return false; }
let x = Math.pow(a, 2) + Math.pow(b, 2);   let y = Math.pow(c, 2);   if (x == y) {     return true;   } else {     return false;   } }
// Your code here. }
if(a > b && a > c){         return (a * a == (b * b) + (c * c));     }     else if(b > a && b > c){         return (b * b == (a * a) + (c * c));     }     else if(c > a && c > b){         return (c * c == (a * a) + (b * b));     }     else{         return false;     } }
let max = Math.max(a, b, c); 	let min = Math.min(a, b, c); 	let mid = a + b + c - max - min; 	return max * max === min * min + mid * mid; }
if (is_pythagoras(a, b, c)){         return true;     } else {         return false;     } }
var hyp = Math.max(a, b, c);     var opp = 0;     var adj = 0;     if (hyp === a) {         opp = b;         adj = c;     } else if (hyp === b) {         opp = a;         adj = c;     } else {         opp = a;         adj = b;     }     if (hyp * hyp === opp * opp + adj * adj) {         return true;     } else {         return false;     } }
if(a>b && a>c){     return (a*a == b*b + c*c);   }   else if(b>a && b>c){     return (b*b == a*a + c*c);   }   else if(c>a && c>b){     return (c*c == a*a + b*b);   } }
if ((a*a) + (b*b) == (c*c)) {         return true;     } else {         return false;     } }
let hypotenuse = Math.max(a, b, c);     let sum = a + b + c;     let angle = (sum - hypotenuse) * (sum - hypotenuse);     let cSquare = hypotenuse * hypotenuse;     if(angle === cSquare){         return true;     } else {         return false;     } }
let x = [a, b, c];     x.sort((a, b) => a - b);     return Math.pow(x[0], 2) + Math.pow(x[1], 2) === Math.pow(x[2], 2); }
var hypotenuse = Math.max(a, b, c);     var sumOfSquaresOfOtherSides = Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) - Math.pow(hypotenuse, 2);     return Math.pow(hypotenuse, 2) == sumOfSquaresOfOtherSides; }
var ab = Math.pow(a, 2);     var bc = Math.pow(b, 2);     var ac = Math.pow(c, 2);     var result = ab + bc;     if(result == ac){         return true;     }else{         return false;     } }
// your code here     //var a = 3, b = 4, c = 5;     if(a <= 0 || b <= 0 || c <= 0){       return false;     }     var aSq = Math.pow(a, 2);     var bSq = Math.pow(b, 2);     var cSq = Math.pow(c, 2);     if(aSq + bSq == cSq || bSq + cSq == aSq || cSq + aSq == bSq){       return true;     }     return false; }
// Code here }
return Math.pow(a, 2) + Math.pow(b, 2) === Math.pow(c, 2) || Math.pow(b, 2) + Math.pow(c, 2) === Math.pow(a, 2) || Math.pow(a, 2) + Math.pow(c, 2) === Math.pow(b, 2) }
if(Math.pow(a, 2) + Math.pow(b, 2) == Math.pow(c, 2)){ 		return true; 	} 	return false; }
if(a > b && a > c){     return a*a == b*b + c*c;   }   if(b > a && b > c){     return b*b == a*a + c*c;   }   if(c > a && c > b){     return c*c == a*a + b*b;   } }
let cSquare = c * c;     let aSquare = a * a;     let bSquare = b * b;     if (cSquare == aSquare + bSquare){         return true;     }     else{         return false;     } }
return values.filter(isNumber) }
var i, len = values.length, result = [];     for(i = 0; i < len; i++){         if(typeof values[i] === 'number' && values[i] % 1 === 0){             result.push(values[i]);         }     }     return result; }
return values.filter(function(value){         return typeof value === 'number' && value % 1 === 0;     }); }
const filteredArr = [];     for(let i = 0; i < values.length; i++){         if(typeof values[i] === 'number' && Number.isInteger(values[i])){             filteredArr.push(values[i]);         }     }     return filteredArr; }
const filtered = values.filter(value => Number.isInteger(value)); 	return filtered; }
var b = [];     for(i in values){         if(typeof values[i] == "number"){             b.push(values[i]);         }     }     return b; }
return values.filter(function(value){         return typeof value === 'number' && value % 1 === 0;     }); }
return values.filter(x => typeof x === 'number' && x % 1 === 0); }
var integer = []; 	for(var i = 0; i < values.length; i++){ 		if(typeof values[i] === 'number' && isNaN(values[i]) === false){ 			integer.push(values[i]); 		} 	} 	return integer; }
return values.filter(function(item){         return typeof item === 'number' && item % 1 === 0;     }); }
var integers = [];     for (var i = 0; i < values.length; i++){         if (typeof values[i] === 'number' && values[i] % 1 === 0){             integers.push(values[i]);         }     }     return integers; }
function filter_fn(value){         return (Number.isInteger(value));     }     return (values.filter(filter_fn)); }
var results = []; 	for(var i = 0; i < values.length; i++){ 		if(typeof values[i] === 'number' && values[i] % 1 === 0){ 			results.push(values[i]); 		} 	} 	return results; }
const arr = values.filter(value => typeof value === 'number' && !Number.isNaN(value));     return arr; }
return values.filter(function(value){         return Number.isInteger(value);     }); }
// your code here     let temp = [];     for(let x of values){         if(typeof x === 'number' && !isNaN(x)){             temp.push(x);         }     }     return temp; }
function filter_fn(val){         return isinstance(val, int);     }     return Array.prototype.filter.call(values, filter_fn); }
return _.filter(values, function(val){ 		return typeof val === 'number' && (val%1 === 0); 	}); }
// YOUR CODE HERE     return values.filter(n => typeof n == 'number' && Math.floor(n) == n);     throw `NotImplementedError: ${inspect(values)}`; }
let s = b + b;     return s.includes(a); }
return a.includes(b) || a.includes(b.slice(1) + b[0]); }
b_arr = b.split('');     for(let i = 0; i < b_arr.length; i++){         b_arr.push(b_arr.shift());         if(a.includes(b_arr.join(''))){             return true;         }     }     return false; }
return b + b.repeat(2).includes(a); }
var i = 0;     while(i<a.length){         var letter = a[i];         var j = b.indexOf(letter);         if(j==-1){             i++;             continue;         }         var sub1 = b.substring(j) + b.substring(0,j);         if(a.indexOf(sub1)>-1){             return true;         }         else{             i++;         }     }     return false; }
var pat = b + b;     console.log(pat);     return pat.indexOf(a) != -1 ? true : false; }
if (a.includes(b)) {         return true;     }     for (let i = 0; i < b.length; i++) {         let letters = b.split('');         let letter = letters.splice(0, 1);         let newB = letters.join('') + letter;         if (a.includes(newB)) {             return true;         }     }     return false; }
let i = 0;   let rot = b.split('');   let final = '';   while(i < rot.length){     let x = rot.pop();     rot.unshift(x);     final = rot.join('');     if(a.includes(final)) return true;     i++;   }   return false; }
var new_b = b.slice(b.length-1) + b.slice(0, b.length-1);      if(a.indexOf(b)>-1){           return true;      }      else if(a.indexOf(new_b)>-1){           return true;      }      else{           return false;      } }
var c = "";   var j = 0;   if(a.length < b.length){     return false;   }   while(j < b.length){     c += b.charAt(j);     j++;   }   while(c != b){     if(a.includes(c)){       return true;     }     var d = c.charAt(0);     c = c.slice(1, c.length);     c += d;   }   return false; }
let rotate = b.slice(1) + b[0];     if(a.indexOf(b) === -1 && a.indexOf(rotate) === -1){         return false;     }     else {         return true;     } }
return a.includes(b.substring(b.length-1) + b.substring(0, b.length-1)); }
var long,short;   if(a.length > b.length){     long = a;     short = b;   }else{     long = b;     short = a;   }   var short_length = short.length;   var short_first_letter = short[0];   for(var i = 0; i < long.length; i++){     if(long[i] == short_first_letter){       if(long.substring(i,i+short_length) == short){         return true;       }     }   }   var short_last_letter = short[short_length-1];   for(var i = 0; i < long.length; i++){     if(long[i] == short_last_letter){       if(long.substring(i-short_length+1,i+1) == short){         return true;       }     }   }   return false; }
var c = '';     for(var i = 0; i < b.length; i++){         c = b.slice(i, b.length) + b.slice(0, i);         if(a.includes(c)){             return true;         }     }     return false; }
var n = a.length;     var m = b.length;     if(n<m){         return false;     }     if(n==m){         if(a==b){             return true;         }         return false;     }     var bb = b+b;     return bb.indexOf(a)>=0; }
let originalWord = b;     let newWord = b;     for(let i = 0; i < b.length; i++){         if(a.includes(newWord)){             return true;         }         newWord = newWord.substring(1) + newWord.substring(0,1);     }     return false; }
if (a.length < b.length) {         return false;     }     let bRots = [b];     for (let i = 0; i < b.length - 1; i++) {         bRots.push(bRots[i].slice(1) + bRots[i][0]);     }     for (let i = 0; i < bRots.length; i++) {         if (a.includes(bRots[i])) {             return true;         }     }     return false; }
if (a.length != b.length) {     return false;   }   let aRepeat = a.repeat(2);   return aRepeat.includes(b); }
var length= a.length;     for(var i=0; i<length; i++){         if(a.indexOf(b)>-1){             return true;         }         else{             a=a.charAt(length-1)+a.substring(0,length-1);         }     }     return false; }
var output = 0;     var str = string.toLowerCase();     for(var i = 0; i < str.length; i++){         if(str.lastIndexOf(str[i]) == str.indexOf(str[i])){             output++;         }     }     return output; }
var array=string.split("");     return new Set(array).size; }
var char_dict = {}   for (var i = 0; i < string.length; i++){     char_dict[string[i].toLowerCase()] = 0   }   return Object.keys(char_dict).length }
//solution 1:     // var lower = string.toLowerCase().split('');     // return lower.filter(function(elem, index, self){     //     return index == self.indexOf(elem);     // }).length;      //solution 2:     return string.length == [...new Set(string.toLowerCase())].length; }
var count = 0; 	var characters = []; 	for (var i = 0; i < string.length; i++) { 		if (characters.indexOf(string[i].toLowerCase()) == -1) { 			characters.push(string[i].toLowerCase()); 			count++; 		} 	} 	return count; }
return (string.split('').sort().join('').match(/(.)\1*/g).length); }
return new Set(string.toLowerCase()).size; }
const uniq = [...new Set(string.toLowerCase())]     return uniq.length }
// Declare a new Set called count_distinct_characters   let count_distinct_characters = new Set();   // Loop over the characters in the string   for (let char of string){     // Add each character to the count_distinct_characters set     count_distinct_characters.add(char);   }   // Return the size of the set   return count_distinct_characters.size; }
var count = 0;   var letter_list = [];   for (var i = 0; i < string.length; i++){     if (letter_list.indexOf(string[i].toLowerCase()) < 0){       letter_list.push(string[i].toLowerCase());       count ++;     }   }   return count; }
let chars = string.toLowerCase().split('');     return new Set(chars).size; }
let array = string.split('');     let distinctCharacters = new Set(array);     return distinctCharacters.size; }
//Convert string to lower case, then split it into array of characters     var string_array = string.toLowerCase().split('');     //get unique characters     var unique_array = string_array.filter(function(item, pos) {         return string_array.indexOf(item) == pos;     });     return unique_array.length; }
//your code goes here, return an integer     var allLetters = [];     var distinctLetters = [];     for (var i = 0; i < string.length; i++) {       allLetters.push(string[i].toLowerCase());     }     for (var i = 0; i < allLetters.length; i++) {       if (distinctLetters.indexOf(allLetters[i]) === -1) {         distinctLetters.push(allLetters[i]);       }     }     return distinctLetters.length; }
var splitString = string.split(""); 	var newArray = []; 	var count = 0; 	for(var i = 0; i < splitString.length; i++){ 		if(newArray.indexOf(splitString[i]) === -1){ 			newArray.push(splitString[i]); 			count++; 		} 	} 	return count; }
var str = string.toLowerCase();     var out = new Set();     for (var i = 0; i < str.length; i++){         out.add(str[i]);     }     return out.size; }
var distinct = []; 	for (var i = 0; i < string.length; i++) { 		var letter = string[i].toLowerCase(); 		if(distinct.indexOf(letter) === -1){ 			distinct.push(letter); 		} 	} 	return distinct.length; }
var allCharacters = string.split('');     var distinctCharacters = [];     for (var i = 0; i < allCharacters.length; i++){         if (distinctCharacters.indexOf(allCharacters[i].toLowerCase()) == -1){             distinctCharacters.push(allCharacters[i].toLowerCase());         }     }     return distinctCharacters.length; }
let count=0;     let str=string.toLowerCase();     for(let i=0;i<str.length;i++){         if(str.indexOf(str[i])===i){             count++;         }     }     return count; }
const length1 = lst1.reduce((acc, item) => acc + item.length, 0);     const length2 = lst2.reduce((acc, item) => acc + item.length, 0);     return length1 < length2 ? lst1 : length1 === length2 ? lst1 : lst2; }
let sum1 = 0;     let sum2 = 0;     for(let i = 0; i < lst1.length; i++){         sum1 += lst1[i].length;     }     for(let i = 0; i < lst2.length; i++){         sum2 += lst2[i].length;     }     if(sum1 < sum2){         return lst1;     }     else if(sum1 > sum2){         return lst2;     }     else{         return lst1;     } }
const c1 = lst1.join('').length;     const c2 = lst2.join('').length;     return c1 <= c2 ? lst1 : lst2; }
if(lst1.length === 0 && lst2.length === 0){ 		return []; 	} 	if(lst1.length !== 0 && lst2.length !== 0){ 		let t1 = 0; 		let t2 = 0; 		lst1.forEach(element => { 			t1 += element.length; 		}); 		lst2.forEach(element => { 			t2 += element.length; 		}); 		if(t1 > t2){ 			return lst2; 		}else if(t1 < t2){ 			return lst1; 		}else{ 			return lst1; 		} 	} }
let lst1sum = lst1.reduce((acc, cv) => acc + cv.length, 0);     let lst2sum = lst2.reduce((acc, cv) => acc + cv.length, 0);     if(lst1sum < lst2sum){         return lst1;     } else {         return lst2;     } }
let lettersLst1 = [];     let lettersLst2 = [];     lst1.forEach(function(word){         lettersLst1.push(word.length);     });     lst2.forEach(function(word){         lettersLst2.push(word.length);     });     let sumLst1 = lettersLst1.reduce(function(a, b){         return a + b;     });     let sumLst2 = lettersLst2.reduce(function(a, b){         return a + b;     });     if(sumLst1 < sumLst2){         return lst1;     } else if(sumLst1 > sumLst2){         return lst2;     } else {         return lst1;     } }
let str1 = lst1.join('')     let str2 = lst2.join('')     if(str1.length === str2.length){         return lst1     }else if(str1.length < str2.length){         return lst1     }else{         return lst2     } }
let total = 0;     for(let num of lst1){         for(let i = 0; i < num.length; i++){             total += num.charCodeAt(i);         }     }     let total2 = 0;     for(let num of lst2){         for(let i = 0; i < num.length; i++){             total2 += num.charCodeAt(i);         }     }     if(total < total2){         return lst1;     }     else if(total2 < total){         return lst2;     }     else{         return lst1;     } }
var sum1 = 0;   var sum2 = 0;   var result;   for(var i = 0; i < lst1.length; i++){     sum1 += lst1[i].length;   }   for(var i = 0; i < lst2.length; i++){     sum2 += lst2[i].length;   }   if(sum1 < sum2){     result = lst1;   }else if(sum1 > sum2){     result = lst2;   }else{     result = lst1;   }   return result; }
var lst1_total = 0;     var lst2_total = 0;     for(var i = 0; i < lst1.length; i++){         lst1_total += lst1[i].length;     }     for(var i = 0; i < lst2.length; i++){         lst2_total += lst2[i].length;     }     if(lst1_total > lst2_total){         return lst2;     }     else{         return lst1;     } }
let lst1_count = 0;     let lst2_count = 0;     for(let i = 0; i < lst1.length; i++){         lst1_count += lst1[i].length;     }     for(let i = 0; i < lst2.length; i++){         lst2_count += lst2[i].length;     }     if(lst1_count == lst2_count){         return lst1;     }     else if(lst1_count < lst2_count){         return lst1;     }     else{         return lst2;     } }
let count1 = 0;   let count2 = 0;   for(let i = 0; i < lst1.length; i++){     count1 += lst1[i].length;   }   for(let i = 0; i < lst2.length; i++){     count2 += lst2[i].length;   }   if(count1 < count2){     return lst1;   }   return lst2; }
var total1 = 0;     var total2 = 0;     if(lst1.length == 0 && lst2.length == 0){         return [];     }     else{         for(var i = 0; i < lst1.length; i++){             total1 += lst1[i].length;         }         for(var i = 0; i < lst2.length; i++){             total2 += lst2[i].length;         }         if(total1 > total2){             return lst2;         }         else if(total1 < total2){             return lst1;         }         else{             return lst1;         }     } }
let total1 = 0;     let total2 = 0;     for(let i = 0; i < lst1.length; i++){         total1 += lst1[i].length;     }     for(let i = 0; i < lst2.length; i++){         total2 += lst2[i].length;     }     if(total1 < total2){         return lst1;     }else{         return lst2;     } }
var total1 = 0;    var total2 = 0;    for(var i = 0; i < lst1.length; i++){        total1 += lst1[i].length;    }    for(var j = 0; j < lst2.length; j++){        total2 += lst2[j].length;    }    if(total1 < total2){        return lst1;    }    else if(total1 > total2){        return lst2;    }    else{        return lst1;    } }
if(lst1.length == 0 && lst2.length == 0){     return [];   }   let lst1TotalChar = 0;   let lst2TotalChar = 0;   for(let i = 0; i < lst1.length; i++){     lst1TotalChar += lst1[i].length;   }   for(let i = 0; i < lst2.length; i++){     lst2TotalChar += lst2[i].length;   }   if(lst1TotalChar <= lst2TotalChar){     return lst1;   }   return lst2; }
if(lst1.length === 0 && lst2.length === 0){         return [];     }     if(lst1.length > lst2.length){         return lst2;     }     if(lst1.length < lst2.length){         return lst1;     }     return lst1; }
let matchTotal = 0;     let strTotal = 0;     let count = 0;     let index = 0;     for(let i = 0; i < lst1.length; i++){         matchTotal += lst1[i].length;     }     for(let i = 0; i < lst2.length; i++){         strTotal += lst2[i].length;     }     if(matchTotal < strTotal){         return lst1;     }else if(matchTotal > strTotal){         return lst2;     }else{         while(count < 2){             if(lst1[index] === lst2[index]){                 index++;             }else{                 count++;             }         }         if(count === 2){             return lst1;         }else{             return lst2;         }     } }
var a = Math.max(interval1[0], interval2[0]);   var b = Math.min(interval1[1], interval2[1]);   var l = b - a;   if (l <= 0) return "NO";   if (isPrime(l)) return "YES";   return "NO"; }
let start = Math.max(interval1[0], interval2[0]);     let end = Math.min(interval1[1], interval2[1]);     if (start <= end){         if (start <= 1){             return "NO";         }         for (let i = 2; i < end; i++){             if (end % i === 0){                 return "NO";             }         }         return "YES";     } else {         return "NO";     } }
let start = Math.max(interval1[0], interval2[0]);   let end = Math.min(interval1[1], interval2[1]);   let dif = end - start;   if (dif < 0) return "NO";   if (dif < 3) return "YES";   let prime = true;   for (let i = 2; i < dif - 1; i++) {     if (dif % i === 0) {       prime = false;       break;     }   }   return prime ? "YES" : "NO"; }
let point1 = interval1[0];   let point2 = interval1[1];   let point3 = interval2[0];   let point4 = interval2[1];   if (point1 > point4 || point3 > point2) {     return "NO";   }   let max = Math.max(point1, point3);   let min = Math.min(point2, point4);   if (max === min) {     return "NO";   }   for (let i = 2; i < min - max; i++) {     if ((min - max) % i === 0) {       return "NO";     }   }   return "YES"; }
let intersection = [];     for(let i = interval1[0]; i < interval1[1]; i++){         for(let j = interval2[0]; j < interval2[1]; j++){             if(i === j){                 intersection.push(i);             }         }     }     // console.log(intersection);     if(intersection.length === 0){         return "NO";     } else if(isPrime(intersection.length)){         return "YES";     } else {         return "NO";     } }
let int = 0;   let result = 'NO';   const start1 = interval1[0];   const end1 = interval1[1];   const start2 = interval2[0];   const end2 = interval2[1];   if (interval1[0] >= interval2[0] && interval1[0] <= interval2[1]) {     int = end1 - start1;   } else if (interval1[1] >= interval2[0] && interval1[1] <= interval2[1]) {     int = end1 - start2;   } else if (interval2[0] >= interval1[0] && interval2[0] <= interval1[1]) {     int = end2 - start2;   } else if (interval2[1] >= interval1[0] && interval2[1] <= interval1[1]) {     int = end2 - start1;   }   if (int > 1) {     result = 'YES';   }   return result; }
function isPrime(number){         if(number === 1){             return false;         }         if(number < 0){             number = -number;         }         let arr = [2, 3, 5, 7];         if(arr.includes(number)){             return true;         }         for(let i = 0; i < arr.length; i++){             if(number % arr[i] === 0){                 return false;             }         }         for(let i = arr[arr.length - 1] + 2; i < number; i += 2){             if(number % i === 0){                 return false;             }         }         return true;     }     if(interval1[0] > interval2[1] || interval2[0] > interval1[1]){         return "NO";     }     if(interval1[0] > interval2[0]){         if(interval1[1] < interval2[1]){             return isPrime(interval1[1] - interval1[0] + 1) ? "YES" : "NO";         }         return isPrime(interval1[1] - interval2[0] + 1) ? "YES" : "NO";     }     if(interval1[1] < interval2[1]){         return isPrime(interval1[1] - interval2[0] + 1) ? "YES" : "NO";     }     return isPrime(interval2[1] - interval2[0] + 1) ? "YES" : "NO"; }
if(interval1[0] > interval2[1] || interval2[0] > interval1[1]){         return "NO";     }     let p = interval1[0] > interval2[0] ? interval1[0] : interval2[0];     let q = interval1[1] < interval2[1] ? interval1[1] : interval2[1];     return isPrime(q - p + 1) ? "YES" : "NO"; }
if (interval1[0] < interval2[0]) {         if (interval1[1] < interval2[0]) return "NO";         else return isPrime(interval2[0] - interval1[1]) ? "YES" : "NO";     } else {         if (interval2[1] < interval1[0]) return "NO";         else return isPrime(interval1[0] - interval2[1]) ? "YES" : "NO";     } }
//interval1     let start1 = interval1[0];     let end1 = interval1[1];     //interval2     let start2 = interval2[0];     let end2 = interval2[1];     //variable to store the start of the interval of the intersection     let start;     //variable to store the end of the interval of the intersection     let end;     //variable to store the result of the function     let result;     //variable to store the length of the intersection     let length;     //variable to store the test of the current number     let test;     //the condition that the intervals of the intersection     if (start1 >= start2 && start1 <= end2){         start = start1;     } else if (start2 >= start1 && start2 <= end1){         start = start2;     } else {         return "NO";     }     if (end1 >= start2 && end1 <= end2){         end = end1;     } else if (end2 >= start1 && end2 <= end1){         end = end2;     } else {         return "NO";     }     //the length of the intersection     length = end - start;     //the test of the length      for (let i = length; i > 0; i--){         test = length % i;         if (test === 0 && i !== 1 && i !== length){             result = "NO";             return result;         } else {             result = "YES";         }     }     return result; }
//check the intersection   let firstIntervalStart = interval1[0];   let firstIntervalEnd = interval1[1];   let secondIntervalStart = interval2[0];   let secondIntervalEnd = interval2[1];   let result = [];   if(firstIntervalStart > secondIntervalEnd || secondIntervalStart > firstIntervalEnd){     return "NO";   }else if(firstIntervalStart <= secondIntervalStart && firstIntervalEnd >= secondIntervalStart && firstIntervalEnd <= secondIntervalEnd){     result.push(secondIntervalStart);     result.push(firstIntervalEnd);   }else if(firstIntervalStart <= secondIntervalStart && firstIntervalEnd >= secondIntervalEnd){     result.push(secondIntervalStart);     result.push(secondIntervalEnd);   }else if(firstIntervalStart >= secondIntervalStart && firstIntervalEnd <= secondIntervalEnd){     result.push(firstIntervalStart);     result.push(firstIntervalEnd);   }else if(firstIntervalStart >= secondIntervalStart && firstIntervalStart <= secondIntervalEnd && firstIntervalEnd >= secondIntervalEnd){     result.push(firstIntervalStart);     result.push(secondIntervalEnd);   }   let intervalLength = result[1] - result[0];   //check if it is prime   for(let i = 2; i < intervalLength; i++){     if(intervalLength % i === 0){       return "NO";     }   }   return "YES"; }
function getIntersection(interval1, interval2){         let int1 = [...interval1];         let int2 = [...interval2];         int1 = int1.sort((a, b) => {             return a - b;         });         int2 = int2.sort((a, b) => {             return a - b;         });         let s = 0;         let e = 0;         let ints = [];         if(int1[0] > int2[0]){             s = int1[0];         } else {             s = int2[0];         }         if(int1[1] < int2[1]){             e = int1[1];         } else {             e = int2[1];         }         if(s <= e){             ints.push(s, e);         }         return ints;     }     function checkPrime(n){         let nSqrt = Math.sqrt(n);         for(let i = 2; i <= nSqrt; i++){             if(n % i === 0){                 return false;             }         }         return true;     }     let intersection = getIntersection(interval1, interval2);     if(intersection.length === 0){         return "NO";     }     if(checkPrime(intersection[1] - intersection[0] + 1)){         return "YES";     } else {         return "NO";     } }
let set = new Set();   let arr = [];   for(let i = interval1[0]; i <= interval1[1]; i++){     set.add(i);   }   for(let i = interval2[0]; i <= interval2[1]; i++){     if(set.has(i)){       arr.push(i);     }   }   if(arr.length === 0){     return "NO";   }   for(let i = 2; i < arr.length; i++){     if(arr.length % i === 0){       return "NO";     }   }   return "YES"; }
let start = Math.max(interval1[0], interval2[0]);     let end = Math.min(interval1[1], interval2[1]);     let length = end - start;     let primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];     return length < 2 || primes.includes(length) ? "YES" : "NO"; }
let a = interval1[0];   let b = interval1[1];   let c = interval2[0];   let d = interval2[1];   if (a >= c) {     if (a <= d) {       if (b <= d) {         return isPrime(b - a + 1) ? "YES" : "NO";       } else {         return isPrime(d - a + 1) ? "YES" : "NO";       }     } else {       return "NO";     }   } else {     if (b >= c) {       if (b <= d) {         return isPrime(b - c + 1) ? "YES" : "NO";       } else {         return isPrime(d - c + 1) ? "YES" : "NO";       }     } else {       return "NO";     }   } }
let start = Math.max(interval1[0], interval2[0]); 	let end = Math.min(interval1[1], interval2[1]); 	let newInterval = [start, end]; 	if (newInterval[0] > newInterval[1]) { 		return "NO"; 	} 	let numbers = [...Array(newInterval[1]-newInterval[0]+1).keys()]; 	for (let i = 2; i <= Math.sqrt(newInterval[1]); i++) { 		if (numbers.indexOf(i) !== -1) { 			for (let j = i * i; j <= newInterval[1]; j += i) { 				let remove = numbers.indexOf(j); 				if (remove !== -1) { 					numbers.splice(remove, 1); 				} 			} 		} 	} 	let length = numbers.length-2; 	if (numbers.indexOf(length) !== -1) { 		return "YES"; 	} else { 		return "NO"; 	} }
let arr = []   for(let i = interval1[0]; i <= interval1[1]; i++){     for(let j = interval2[0]; j <= interval2[1]; j++){       if(i === j){         arr.push(i)       }     }   }   let diff = arr[arr.length - 1] - arr[0]   if(diff === 0){     return "NO"   }   if(diff === 1){     return "YES"   }   if(isPrime(diff)){     return "YES"   }else{     return "NO"   } }
// your code here     if(interval1[0] >= interval2[1] || interval2[0] >= interval1[1]){         return "NO";     }     let start = interval1[0] > interval2[0] ? interval1[0] : interval2[0];     let end = interval1[1] < interval2[1] ? interval1[1] : interval2[1];     let val = end - start;     if(val <= 1){         return "NO";     }     let sq = Math.sqrt(val);     for(let i = 2; i <= sq; i++){         if(val % i === 0){             return "NO";         }     }     return "YES"; }
var i1 = [];   var i2 = [];   for(let i = interval1[0]; i <= interval1[1]; i++){     i1.push(i);   }   for(let i = interval2[0]; i <= interval2[1]; i++){     i2.push(i);   }   var interSect = [];   for(let i = 0; i < i1.length; i++){     for(let j = 0; j < i2.length; j++){       if(i1[i] === i2[j]){         interSect.push(i1[i]);       }     }   }   if(interSect.length < 1){     return "NO";   }   for(let i = 2; i < interSect.length; i++){     if(interSect.length % i === 0){       return "NO";     }   }   return "YES"; }
var a = 0; 	var b = 0; 	var c = 2; 	var d = 0; 	for(var i = 3; i <= n; i++){ 		d = a + b + c; 		a = b; 		b = c; 		c = d; 	} 	return d; }
let result = [0,0,2,0];     for(let i = 4; i <= n; i++){         result[0] = result[1];         result[1] = result[2];         result[2] = result[3];         result[3] = result[0] + result[1] + result[2];     }     return result[3]; }
}  module.exports = {     sumDigits: sumDigits,     countChars: countChars,     reverseString: reverseString,     removeOdd: removeOdd,     sumMatrix: sumMatrix,     factorial: factorial,     removeEven: removeEven,     oddOnly: oddOnly,     array2D: array2D,     binarySearch: binarySearch,     myFind: myFind,     myFindIndex: myFindIndex,     myIncludes: myIncludes,     myConcat: myConcat,     myPush: myPush,     fib: fib,     fib2: fib2,     fib3: fib3,     fib4: fib4 };
if(n < 4){         if(n == 0){             return 0;         }else if(n == 1){             return 0;         }else if(n == 2){             return 2;         }else if(n == 3){             return 0;         }     }     return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4); }
let a = 0, b = 0, c = 2, d = 0, e;     if (n==0) {         return a;     } else if (n==1) {         return b;     } else if (n==2) {         return c;     } else if (n==3) {         return d;     } else {         for (let i=4; i<=n; i++) {             e = a + b + c + d;             a = b;             b = c;             c = d;             d = e;         }         return e;     } }
if(n <= 1){         return 0;     }     if(n == 2){         return 2;     }     let f4 = [0, 0, 2, 0];     for(let i = 3; i < n; i++){         f4[i%4] = f4[(i-1)%4] + f4[(i-2)%4] + f4[(i-3)%4] + f4[(i-4)%4];     }     return f4[(n-1)%4]; }
//base cases   if(n === 0){     return 0;   }   if(n === 1){     return 0;   }   if(n === 2){     return 2;   }   if(n === 3){     return 0;   }   //initialize variables   var a = 0;   var b = 0;   var c = 2;   var d = 0;   //dynamic programming   for(var i = 4; i <= n; i++){     var temp = a + b + c + d;     a = b;     b = c;     c = d;     d = temp;   }   return d; }
//Basic algorithm, pretty straightforward.  	var i = 2; 	var a = 0; 	var b = 0; 	var c = 2; 	var d = 0; 	if(n == 0){ 		return 0; 	} 	if(n == 1){ 		return 0; 	} 	if(n == 2){ 		return 2; 	} 	if(n == 3){ 		return 0; 	} 	while(i < n){ 		d = a + b + c; 		a = b; 		b = c; 		c = d; 		i++; 	} 	return d; }
if(n == 0){         return 0;     }     if(n == 1){         return 0;     }     if(n == 2){         return 2;     }     if(n == 3){         return 0;     }     let a = 0;     let b = 0;     let c = 2;     let d = 0;     let result = 0;     for(let i = 4; i <= n; i++){         result = a + b + c + d;         a = b;         b = c;         c = d;         d = result;     }     return result; }
var array = [0,0,2,0]; 	var sum = 0; 	var i = 4; 	var x = 0; 	var y = 0; 	var z = 0; 	var a = 0; 	while(i <= n){ 		x = array[0]; 		y = array[1]; 		z = array[2]; 		a = array[3]; 		sum = x + y + z + a; 		array[0] = array[1]; 		array[1] = array[2]; 		array[2] = array[3]; 		array[3] = sum; 		i++; 	} 	return sum; }
var fibs = [0,0,2,0];   if(n < 4){     return fibs[n];   }   for(var i = 4; i <= n; i++){     fibs[i%4] = fibs[(i-1)%4] + fibs[(i-2)%4] + fibs[(i-3)%4] + fibs[(i-4)%4];   }   return fibs[n%4]; }
if(n == 0){         return 0;     }else if(n == 1){         return 0;     }else if(n == 2){         return 2;     }else if(n == 3){         return 0;     }else{         return fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4);     } }
var a=0,b=0,c=2,d=0,sum=0;     for(var i=0;i<n;i++){         sum=a+b+c+d;         a=b;         b=c;         c=d;         d=sum;     }     return sum; }
var n1 = 0;     var n2 = 0;     var n3 = 2;     var n4 = 0;     var fib4 = 0;     for(var i = 0; i < n; i++){         fib4 = n1 + n2 + n3 + n4;         n1 = n2;         n2 = n3;         n3 = n4;         n4 = fib4;     }     return fib4; }
let n1 = 0;     let n2 = 0;     let n3 = 2;     let n4 = 0;     let temp = 0;     if(n == 0){         return 0;     }     if(n == 1){         return 0;     }     if(n == 2){         return 2;     }     if(n == 3){         return 0;     }     if(n > 3){         for(let i = 4; i < n; i++){             temp = n1 + n2 + n3 + n4;             n1 = n2;             n2 = n3;             n3 = n4;             n4 = temp;         }     }     return n1 + n2 + n3 + n4; }
//YOUR CODE HERE }
var s=0; 	for(var i=0;i<=n;i++){ 		s+=fib4_helper(i); 	} 	return s; }
var vals = [0,0,2,0]; 	if(n<4){ 		return vals[n]; 	} 	for(var i=4;i<=n;i++){ 		vals[i%4] = vals[0] + vals[1] + vals[2] + vals[3]; 	} 	return vals[n%4]; }
if(n < 0) return undefined; 	if(n == 0) return 0; 	if(n == 1) return 0; 	if(n == 2) return 2; 	if(n == 3) return 0; 	var a = 0; 	var b = 0; 	var c = 2; 	var d = 0; 	for(var i = 4; i <= n; i++){ 		var tmp = a; 		a = b; 		b = c; 		c = d; 		d = tmp + b + c + d; 	} 	return d; }
var count = 0; 	var vowelList = ['A','E','I','O','U']; 	for(var i = 0; i < s.length; i++){ 		if(i % 2 == 0 && vowelList.indexOf(s[i]) >= 0){ 			count++; 		} 	} 	return count; }
let result = 0;     let vowel = "AEIOU";     for(let i = 0; i < s.length; i++){         if(i % 2 == 0 && vowel.includes(s[i])){             result += 1;         }     }     return result; }
var num = 0;   var list = s.split("");   for(var i = 0; i < list.length; i++){     if((list[i] == "A" || list[i] == "E" || list[i] == "I" || list[i] == "O" || list[i] == "U") && i % 2 === 0){       num += 1;     }   }   return num; }
var i = 0; 	var count = 0; 	while (i < s.length){ 		if (s[i] === "A" || s[i] === "E" || s[i] === "I" || s[i] === "O" || s[i] === "U"){ 			count = count + 1; 		} 		i = i + 2; 	} 	return count; }
let count = 0;   for(let i = 1; i < s.length; i+=2){     if(s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U'){       count += 1;     }   }   return count; }
var uppercase = 0;     for(i=0; i<s.length; i++){         if(i%2 ==0 && s[i] == s[i].toUpperCase()){             uppercase = uppercase + 1;         }     }     return uppercase; }
var count = 0; 	for(var i = 0; i < s.length; i += 2){ 		if(s[i] == s[i].toUpperCase() && (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')){ 			count++; 		} 	} 	return count; }
let count = 0; 	for(let i = 0; i < s.length; i++){ 		if(i % 2 === 0 && s[i] === s[i].toUpperCase() && (s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U')){ 			count++; 		} 	} 	return count; }
let count = 0;     let upVowels = ['A', 'E', 'I', 'O', 'U'];     for(let i = 0; i < s.length; i++){         if(upVowels.includes(s[i]) && i % 2 == 0){             count++;         }     }     return count; }
var count = 0;     for(var i = 0; i < s.length; i++){         if(s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U'){             if(i % 2 === 0){                 count += 1;             }         }     }     return count; }
let count = 0; 	for(let i = 0; i < s.length; i++){ 		if(s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U'){ 			if(i % 2 === 0){ 				count++; 			} 		} 	} 	return count; }
var count = 0;     for(var i = 0; i < s.length; i++){         if(s[i] == "A" || s[i] == "E" || s[i] == "I" || s[i] == "O" || s[i] == "U"){             if(i % 2 === 0){                 count++;             }         }     }     return count; }
let count = 0;     for(let i = 0; i < s.length; i++){         if(i % 2 == 0 && isVowel(s[i])) count++;     }     return count; }
var vowels = ["A", "E", "I", "O", "U"]; 	var count = 0; 	for (var i = 0; i < s.length; i++) { 		for (var j = 0; j < vowels.length; j++) { 			if (s[i] === vowels[j] && i % 2 === 0) { 				count += 1; 			} 		} 	} 	return count; }
let cnt = 0;   for(let i = 0; i < s.length; i += 2){     if(s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U'){       cnt++;     }   }   return cnt; }
s = s.toLowerCase(); 	var count = 0; 	for(var i = 0; i < s.length; i++){ 		if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u'){ 			if(i % 2 == 0){ 				count++; 			} 		} 	} 	return count; }
// count number of uppercase vowels in even indices     var count = 0;     for (var i = 0; i < s.length; i++) {         if ((i % 2 == 0) && (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')) {             count += 1;         }     }     return count; }
var string = s.toLowerCase();     var count = 0;     for(var i = 0; i < string.length; i+=2){         if(string[i] === 'a' || string[i] === 'e' || string[i] === 'i' || string[i] === 'o' || string[i] === 'u'){             count++;         }     }     return count; }
var upperVowels = 0;     for(var i = 0; i < s.length; i++){         if(s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U'){             if(i % 2 == 0){                 upperVowels++;             }         }     }     return upperVowels; }
var results = []   var counter = 0   var last = 0   for(var i = 0; i < paren_string.length; i++){     var current = paren_string[i]     if(current === '('){       counter += 1     }     if(current === ')'){       counter -= 1     }     if(counter === 0){       results.push(paren_string.slice(last, i + 1))       last = i + 1     }   }   return results }
// write your code here }
var paren_groups = [];   var paren_stack = [];   var last_paren = null;   var paren_count = 0;   var last_paren_idx = 0;   for (var i = 0; i < paren_string.length; i++) {     var c = paren_string[i];     if (c === '(' || c === ')') {       if (last_paren && c !== last_paren) {         paren_stack.push(c);         last_paren = c;         paren_count++;       } else if (last_paren && c === last_paren) {         paren_stack.pop();         last_paren = paren_stack[paren_stack.length - 1];         paren_count++;       } else {         last_paren = c;         paren_count++;       }     }      if (paren_count % 2 === 0) {       paren_groups.push(paren_string.slice(last_paren_idx, i + 1));       last_paren_idx = i + 1;     }   }   return paren_groups; }
const groups = [];     let group = '';     for (const paren of paren_string) {         if (paren === '(' || paren === ')') {             group += paren;         }         if (group.length === 2) {             groups.push(group);             group = '';         }     }     return groups; }
//code here }
var bal_paren = [];     var temp = [];     var front = 0;     var back = 0;     for(var i = 0; i < paren_string.length; i++){         if(paren_string[i] == '('){             temp.push(paren_string[i]);             front++;         }         else if(paren_string[i] == ')'){             temp.push(paren_string[i]);             back++;         }         if(front == back){             bal_paren.push(temp.join(''));             temp = [];             front = 0;             back = 0;         }     }     return bal_paren; }
if(!paren_string){         return paren_string;     }     let list = [];     let open = [];     let close = [];     let t = paren_string.replace(/\s/g, '');     for(let i = 0; i < t.length; i++){         if(t[i] === '('){             open.push(i);         }         if(t[i] === ')'){             close.push(i);         }     }     for(let i = 0; i < open.length; i++){         if(close[i] < open[i+1]){             list.push(t.slice(open[i], close[i]+1));         }     }     return list; }
let regex_pattern = /\([^()]*\)/g;     let regex_match = regex_pattern.exec(paren_string);     let result = [];     while (regex_match !== null){         result.push(regex_match[0]);         regex_match = regex_pattern.exec(paren_string);     }     return result; }
let paren_array = paren_string.split(" ").join("").split("");     let result = [];     let cur_paren_string = "";     let count = 0;     for (let i = 0; i < paren_array.length; i++){         if (paren_array[i] === "("){             count++;         }         if (paren_array[i] === ")"){             count--;         }         cur_paren_string += paren_array[i];         if (count === 0){             result.push(cur_paren_string);             cur_paren_string = "";         }     }     return result; }
var paren_list = [];   var temp_paren_list = [];   var i = 0;   for (i = 0; i < paren_string.length; i++){     if (paren_string[i] === '('){       temp_paren_list.push(paren_string[i]);     } else if (paren_string[i] === ')'){       temp_paren_list.push(paren_string[i]);       if (temp_paren_list.length === 2){         paren_list.push(temp_paren_list.join(''));         temp_paren_list = [];       }     }   }   return paren_list; }
return paren_string.replace(/\s/g, '').split(/\)(\()/).map(e => e.replace(/\(/g, '').replace(/\)/g, '')); }
var paren_array = paren_string.split(" ").join("").split("")   var paren_counter = 0   var paren_strings = []   var count = 0   while (count < paren_array.length){     if (paren_array[count] === "("){       paren_counter++     } else if (paren_array[count] === ")"){       paren_counter--     }     if (paren_counter === 0){       paren_strings.push(paren_array.slice(0, count + 1).join(""))       paren_array = paren_array.slice(count + 1)       count = 0     } else {       count++     }   }   return paren_strings }
var arr = [],       left_paren = '(',       right_paren = ')',       open_paren = 0,       close_paren = 0,       temp_string = '';    for(var i = 0; i < paren_string.length; i++){     if(paren_string[i] === left_paren){       open_paren += 1;     }else if(paren_string[i] === right_paren){       close_paren += 1;     }      if(open_paren === close_paren){       arr.push(temp_string);       temp_string = '';       open_paren = 0;       close_paren = 0;     }else{       temp_string += paren_string[i];     }   }   return arr; }
// your code here     var i;     var arr = [];     var cur = '';     var count = 0;     var list = [];     for (i = 0; i < paren_string.length; i++) {         if (paren_string[i] == '(') {             count += 1;         }         else if (paren_string[i] == ')') {             count -= 1;         }         cur += paren_string[i];         if (count == 0) {             list.push(cur);             cur = '';         }     }     return list; }
let stack = [], result = [], start = 0, end = 0; 	for(let i = 0; i < paren_string.length; i++){ 		if(paren_string[i] === '('){ 			stack.push(paren_string[i]); 		}else if(paren_string[i] === ')'){ 			stack.pop(); 		} 		if(stack.length === 0){ 			result.push(paren_string.slice(start, i + 1)); 			start = i + 1; 		} 	} 	return result; }
//validate arguments     if (paren_string === '') {         return [];     }     if (paren_string.match(/[^()]/)) {         throw new Error('Invalid characters passed to separate_paren_groups()');     }     var groups = [];     var group = '';     var is_in_group = false;     for (var i = 0; i < paren_string.length; i++) {         var paren = paren_string[i];         if (paren === '(') {             if (is_in_group) {                 group += paren;             } else {                 is_in_group = true;                 group = paren;             }         } else if (paren === ')') {             if (is_in_group) {                 group += paren;                 groups.push(group);                 is_in_group = false;             } else {                 throw new Error('Unbalanced right parenthesis at index ' + i);             }         }     }     if (is_in_group) {         throw new Error('Unbalanced left parenthesis at index ' + i);     }     return groups; }
//check that the strings are balanced.     let open = 0;     let close = 0;     for(let i = 0; i < paren_string.length; i++){         if(paren_string[i] === '('){             open++;         }else if(paren_string[i] === ')'){             close++;         }     }     if(open !== close){         return 'Not balanced';     }     //create a new list that splits on spaces.     let split_paren_string = paren_string.split(' ');     //create an empty array to hold our groups.     let groups = [];     //loop through our split string.     for(let i = 0; i < split_paren_string.length; i++){         let current_group = '';         //if we see an open paren, start adding to our current group.         if(split_paren_string[i][0] === '('){             current_group += split_paren_string[i];             //if the current group is not balanced, add the next item to it.             if(current_group.length % 2 !== 0){                 current_group += split_paren_string[i + 1];                 i++;             }             //push the current group to our groups list.             groups.push(current_group);         }     }     return groups; }
var acc = [];     var result = [];     for(var i = 0; i < paren_string.length; i++){         if(paren_string[i] === '('){             acc.push(paren_string[i]);         }         else if(paren_string[i] === ')'){             acc.push(paren_string[i]);             result.push(acc.join(''));             acc = [];         }     }     return result; }
var res = []; 	var start = 0; 	var end = 0; 	for(var i = 0; i < paren_string.length; i++){ 		if(paren_string[i] == "("){ 			start = i; 		} 		if(paren_string[i] == ")"){ 			end = i; 			res.push(paren_string.slice(start, end+1)); 		} 	} 	return res; }
let evens = 0; 	let odds = 0; 	for(let i = 1; i <= n; i++){ 		if(is_palindrome(i)){ 			if(i % 2 == 0){ 				evens++; 			} else { 				odds++; 			} 		} 	} 	return [evens, odds]; }
let even = 0;     let odd = 0;     let str = '';     for(let i = 1; i <= n; i++){         str = i.toString();         if(str.length % 2 === 0){             even++;         } else {             odd++;         }     }     return [even, odd]; }
let count = [0, 0];     for(let i = 1; i <= n; i++){         if(is_palindrome(i.toString())){             if(i % 2 === 0){                 count[0]++;             } else {                 count[1]++;             }         }     }     return count; }
var arr = [1,2,3];     var even_odd = [1,2];     if(n <= 3){         return even_odd;     }     for(var i = 4; i <= n; i++){         var is_palindrome = true;         for(var j = 0; j < Math.floor(arr.length/2); j++){             if(arr[j] != arr[arr.length - 1 - j]){                 is_palindrome = false;                 break;             }         }         if(is_palindrome == true){             if(i % 2 == 0){                 even_odd[0]++;             }else{                 even_odd[1]++;             }         }         arr.push(i);     }     return even_odd; }
// your code here }
let evens = 0;     let odds = 0;     for(let i = 1; i <= n; i++){         if(is_palindrome(i.toString())){             if(i % 2 == 0){                 evens++;             }else{                 odds++;             }         }     }     return [evens, odds]; }
var odd = 0, even = 0;     for(let i = 1; i <= n; i++){         if(is_palindrome(i)){             if(i % 2 == 0){                 even += 1;             }             else{                 odd += 1;             }         }     }     return [even, odd]; }
let nArr = n.toString().split('');     let nArrLen = nArr.length;     let evenLen = Math.floor(nArrLen/2);     let oddLen = nArrLen % 2 === 0 ? evenLen : evenLen + 1;     let even = 0;     let odd = 0;     for(let i = 0; i < evenLen; i++){         even = even + 1;     }     for(let i = 0; i < oddLen; i++){         odd = odd + 1;     }     return [even, odd]; }
if(n < 1 || n > Math.pow(10, 3)){     return 'invalid';   }   let count_even = 0;   let count_odd = 0;   let number = 1;   while(number <= n){     if(is_palindrome(number)){       if(number % 2 == 0){         count_even += 1;       }else{         count_odd += 1;       }     }     number += 1;   }   return [count_even, count_odd]; }
let even_count = 0;   let odd_count = 0;   for(let i = 1; i <= n; i++){     let current_number = i.toString();     if(current_number.length === 1){       odd_count++;     }     else if(current_number.length === 2){       if(current_number[0] === current_number[1]){         even_count++;       }       else{         odd_count++;       }     }     else{       let palindrome = true;       for(let j = 0; j < current_number.length/2; j++){         if(current_number[j] !== current_number[current_number.length - j - 1]){           palindrome = false;           break;         }       }       if(palindrome){         if(current_number.length % 2 !== 0){           odd_count++;         }         else{           even_count++;         }       }     }   }   return [even_count, odd_count]; }
var evens = 0;   var odds = 0;   var str = "" + n;   if(str.length === 1) return [evens, odds];   if(str.length === 2){     odds++;     if(Number(str[0]) === Number(str[1])) evens++;     return [evens, odds];   }   if(str.length === 3){     var n = Number(str);     var palindromes = [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44, 55, 66, 77, 88, 99, 101, 111, 121, 131, 141, 151, 161, 171, 181, 191, 202, 212, 222, 232, 242, 252, 262, 272, 282, 292, 303, 313, 323, 333, 343, 353, 363, 373, 383, 393, 404, 414, 424, 434, 444, 454, 464, 474, 484, 494, 505, 515, 525, 535, 545, 555, 565, 575, 585, 595, 606, 616, 626, 636, 646, 656, 666, 676, 686, 696, 707, 717, 727, 737, 747, 757, 767, 777, 787, 797, 808, 818, 828, 838, 848, 858, 868, 878, 888, 898, 909, 919, 929, 939, 949, 959, 969, 979, 989, 999];     palindromes.forEach(function(num){       if(num > n) return;       if(num % 2 === 0) evens++;       else odds++;     });     return [evens, odds];   } }
var even = 0, odd = 0;     for(var i = 1; i <= n; i++){         if(is_palindrome(i)){             if(i % 2 == 0){                 even++;             }else{                 odd++;             }         }     }     return [even, odd]; }
let evens = 0;   let odds = 0;   for(let i = 1; i <= n; i++){     if(i.toString() === i.toString().split('').reverse().join('')){       if(i.toString().length % 2 === 0){         evens++       } else {         odds++       }     }   }   return [evens, odds] }
let even = 0;     let odd = 0;     for(let i = 1; i <= n; i++){         if(is_palindrome(i)){             if(i % 2 === 0){                 even++;             }else{                 odd++;             }         }     }     return [even, odd]; }
let count_odd = 0;   let count_even = 0;   for(let i = 1; i <= n; i++){     if(is_palindrome(i)){       if(i % 2 == 0){         count_even += 1;       } else {         count_odd += 1;       }     }   }   return {even: count_even, odd: count_odd}; }
var even = 0; 	var odd = 0; 	for(var i = 1; i <= n; i++){ 		if(i < 10){ 			odd++; 		}else if(i == reverse(i)){ 			if(i % 2 == 0){ 				even++; 			}else{ 				odd++; 			} 		} 	} 	return [even, odd]; }
let nums = get_nums(n);     let even = 0;     let odd = 0;     for(let num of nums){         if(is_palindrome(num)){             num.toString().length % 2 === 0 ? even++ : odd++;         }     }     return [even, odd]; }
if(n===1)return [0,1];     if(n===2)return [1,1];     let evens = 0;     let odds = 0;     for(let i=1;i<=n;i++){         if(i.toString() === i.toString().split('').reverse().join('')){             if(i%2===0)evens++;             else odds++;         }     }     return [evens,odds]; }
//i: int     //o: list     //c: 1 <= n <= 10^3     //e:      let even = 0;     let odd = 0;     for(let i = 1; i <= n; i++){         if(is_palindrome(i)){             if(i % 2 === 0){                 even++;             }else{                 odd++;             }         }     }     return [even, odd]; }
var even = [];   if(a < b){     for(var i = a; i <= b; i++){       if(i % 2 === 0){         even.push(i);       }     }   } else {     for(var i = b; i <= a; i++){       if(i % 2 === 0){         even.push(i);       }     }   }   return even; }
var evens = [];     for(var i = a; i <= b; i++){         if(i % 2 === 0){             evens.push(i);         }     }     return evens; }
let result = [];   if(a < b){     for(let i = a; i <= b; i++){       if(i % 2 === 0){         result.push(i);       }     }   } else {     for(let i = b; i <= a; i++){       if(i % 2 === 0){         result.push(i);       }     }   }   return result; }
let arr = [];     if(a < b){         for(let i = a; i <= b; i++){             if(i % 2 === 0){                 arr.push(i);             }         }     }else{         for(let i = b; i <= a; i++){             if(i % 2 === 0){                 arr.push(i);             }         }     }     return arr; }
var result = []; 	var min = Math.min(a, b); 	var max = Math.max(a, b); 	for(var i = min; i <= max; i++){ 		if(i % 2 === 0){ 			result.push(i); 		} 	} 	return result; }
if(a > b){         var aux = a;         a = b;         b = aux;     }     var result = [];     while(a <= b){         if(a % 2 == 0){             result.push(a);         }         a++;     }     return result; }
var arr = []     if(a<b){         for(var i = a; i<=b; i++){             if(i%2 == 0){                 arr.push(i)             }         }     }else{         for(var i = b; i<=a; i++){             if(i%2 == 0){                 arr.push(i)             }         }     }     return arr }
var array = [];   if (a > b){     for (var i = b; i <= a; i++){       if (i % 2 === 0){         array.push(i);       }     }   } else {     for (var i = a; i <= b; i++){       if (i % 2 === 0){         array.push(i);       }     }   }   return array; }
if(b < a){        return generate_integers(b, a);    }    if(a % 2 == 0){        var array = [a];        for(var i = a+2; i <= b; i+=2){            array.push(i);        }        return array;    }    if(a % 2 != 0){        var array = [];        for(var i = a+1; i <= b; i+=2){            array.push(i);        }        return array;    } }
let evArr = [];   if(a < b){     for(let i = a; i <= b; i++){       if(i % 2 === 0){         evArr.push(i);       }     }   } else {     for(let i = b; i <= a; i++){       if(i % 2 === 0){         evArr.push(i);       }     }   }   return evArr; }
let arr = [];     if(a < b){         for(let i = a; i <= b; i++){             if(i % 2 === 0){                 arr.push(i);             }         }     } else if(a > b){         for(let i = b; i <= a; i++){             if(i % 2 === 0){                 arr.push(i);             }         }     }     return arr; }
let even_numbers = [];     for(let i = a; i <= b; i++){         if(i % 2 === 0){             even_numbers.push(i);         }     }     return even_numbers; }
var result = []   for(var i = a; i <= b; i++){     if(i % 2 === 0){       result.push(i)     }   }   return result; }
let integers = [];   if (a < b) {     for (let i = a; i <= b; i++) {       if (i % 2 === 0) {         integers.push(i);       }     }   } else {     for (let i = b; i <= a; i++) {       if (i % 2 === 0) {         integers.push(i);       }     }   }   return integers; }
var integersArray = [];     if(a < b){         for(var i = a; i <= b; i++){             if(i % 2 === 0){                 integersArray.push(i);             }         }     } else {         for(var i = b; i <= a; i++){             if(i % 2 === 0){                 integersArray.push(i);             }         }     }     return integersArray; }
let s = [];     for(let i = a; i <= b; i++){         if(i % 2 == 0){             s.push(i);         }     }     return s; }
if(a>b){         [a,b] = [b,a];     }     let result = [];     for(let i = a; i<=b; i++){         if(i%2 === 0){             result.push(i);         }     }     return result; }
let sorted = getSorted(a, b);     let result = [];     for(let i = sorted[0]; i <= sorted[1]; i++){         if(i % 2 === 0){             result.push(i);         }     }     return result; }
var i;   var result = [];   for(i = 0; i < numbers.length; i++) {     result.push(numbers[i]);     if(i < numbers.length - 1)       result.push(delimeter);   }   return result; }
const interspersed = numbers.reduce((acc, curr, idx) => {         if (idx == 0) {             return acc.concat(curr);         } else {             return acc.concat(delimeter, curr);         }     }, []);     return interspersed; }
let numbers_copy = numbers.slice(0);   let new_list = [];   let i = 0;   while (i < numbers_copy.length){     new_list.push(numbers_copy[i]);     if (i !== numbers_copy.length - 1){       new_list.push(delimeter);     }     i += 1;   }   return new_list; }
var result = [];     for(var i = 0; i < numbers.length; i++){         result.push(numbers[i]);         if(i != numbers.length - 1){             result.push(delimeter);         }     }     return result; }
return []; }
return foldr(function(x,y){ 		return cat(x, [delimeter, y]); 	}, [], numbers); }
var result = [];     for(var i = 0; i < numbers.length; i++){         result.push(numbers[i]);         if(i < numbers.length - 1){             result.push(delimeter);         }     }     return result; }
var x = numbers.shift();     if(x === undefined){         return [];     }     else{         return [x].concat(delimeter, intersperse(numbers, delimeter));     } }
return is_null(numbers) 		? null 		: pair(head(numbers), 			   pair(delimeter, intersperse(tail(numbers), delimeter))); }
//console.log("numbers: ", numbers);     if(numbers.length === 0){         return [];     } else if(numbers.length === 1){         return numbers;     } else {         var a = [numbers[0]];         var b = [delimeter].concat(numbers.slice(1));         //console.log("a: ", a);         //console.log("b: ", b);         return a.concat(intersperse(b, delimeter));     } }
return is_null(numbers)         ? null         : pair(head(numbers),                pair(delimeter,                     intersperse(tail(numbers), delimeter))); }
if(numbers.length <= 1){         return numbers;     }     var ret = [];     for(var i = 0; i < numbers.length; i++){         ret.push(numbers[i]);         if(i < numbers.length - 1){             ret.push(delimeter);         }     }     return ret; }
var result = [];     for(var i = 0; i < numbers.length - 1; i++){         result.push(numbers[i]);         result.push(delimeter);     }     if(numbers.length !== 0){         result.push(numbers[numbers.length - 1]);     }     return result; }
return _.reduce(numbers, function(memo, number){       memo.push(number);       memo.push(delimeter);       return memo;     }, []).slice(0, -1); }
if(numbers.length === 0){         return numbers;     }     return [numbers[0]].concat(intersperse(numbers.slice(1), delimeter).reduce(function(result, element){         return result.concat([delimeter, element]);     }, [])); }
//YOUR CODE HERE     if (numbers.length === 0) {         return [];     }     var result = [numbers[0]];     for (var i = 1; i < numbers.length; i++) {         result.push(delimeter);         result.push(numbers[i]);     }     return result; }
var ans = []; 	for(var i = 0; i < numbers.length; i++){ 		ans.push(numbers[i]); 		if(i != numbers.length - 1){ 			ans.push(delimeter); 		} 	} 	return ans; }
if (numbers.length == 0) {         return [];     } else {         return [numbers[0]].concat(intersperse(numbers.slice(1), delimeter)).reduce(function(acc, x) {             if (acc.length > 0) {                 return acc.concat([delimeter, x]);             } else {                 return acc.concat([x]);             }         }, []);     } }
return numbers.length == 0 ? numbers : [numbers[0]].concat(intersperse(numbers.slice(1), delimeter)).reduce(function(prev, curr){ 		return prev.concat([delimeter, curr]); 	}); }
var result = [];   var max = numbers[0];   result.push(max);   for(var i = 1; i < numbers.length; i++){     if(numbers[i] > max){       max = numbers[i];     }     result.push(max);   }   return result; }
var _numbers = numbers.slice();     var max = _numbers[0];     var max_index = 0;     for(var i = 1; i < _numbers.length; i++){         if(_numbers[i] > max){             max = _numbers[i];             max_index = i;         }         _numbers[i] = max;     }     return _numbers; }
let max_so_far = numbers[0]; 	let res = [max_so_far]; 	for(let i = 1; i < numbers.length; i++){ 		if(numbers[i] > max_so_far){ 			max_so_far = numbers[i]; 		} 		res.push(max_so_far); 	} 	return res; }  let input = [1, 2, 3, 2, 3, 4, 2]; let expected = [1, 2, 3, 3, 3, 4, 4]; let actual = rolling_max(input);
return [...(function*(){     var rollingMax = numbers[0];     yield rollingMax;     for(var n of numbers.slice(1)){       rollingMax = Math.max(rollingMax, n);       yield rollingMax;     }   })()]; }
return numbers.map(function(number, index){     var sublist = numbers.slice(0, index + 1);     return Math.max.apply(Math, sublist);   }); }
var result = [];     if(numbers.length > 0){         result.push(numbers[0]);         for(var i = 1; i < numbers.length; i++){             if(numbers[i] > result[i-1]){                 result.push(numbers[i]);             }             else{                 result.push(result[i-1]);             }         }     }     return result; }
var result = [];   var max = null;   for(var i = 0; i < numbers.length; i++){     max = Math.max(max, numbers[i]);     result.push(max);   }   return result; }
let max = numbers[0];     return numbers.map(n => {         if(n > max){             max = n;         }         return max;     }); }
var max_list = []; 	var max = 0; 	for(var i = 0; i < numbers.length; i++){ 		if(numbers[i] > max){ 			max = numbers[i]; 		} 		max_list.push(max); 	} 	return max_list; }
var temp = [];     for(var i = 0; i < numbers.length; i++){         temp.push(Math.max.apply(Math, numbers.slice(0, i+1)));     }     return temp; }
var max = [];     for(i=0; i< numbers.length; i++){         max[i] = Math.max.apply(null, numbers.slice(0,i+1));     }     return max; }
return numbers.map((number, index) => {         const slice = numbers.slice(0, index+1);         return Math.max(...slice);     }); }
var sequence = [];     for(var i = 0; i < numbers.length; i++){         var currentMax = 0;         for(var j = 0; j <= i; j++){             if(numbers[j] > currentMax){                 currentMax = numbers[j];             }         }         sequence.push(currentMax);     }     return sequence; }
let result = []; 	let currentMax = numbers[0]; 	result.push(currentMax); 	for(i = 1; i < numbers.length; i++){ 		if(numbers[i] > currentMax){ 			currentMax = numbers[i]; 		} 		result.push(currentMax); 	} 	return result; }
var arr = [];     for(var i = 0; i < numbers.length; i++){         arr.push(Math.max.apply(null, numbers.slice(0, i+1)));     }     return arr; }
if(numbers == null || numbers.length == 0)         return [];     var res = [];     var index = 0;     var max = numbers[0];     while(index < numbers.length){         if(numbers[index] > max)             max = numbers[index];         res.push(max);         index++;     }     return res; }
let max_array = [];     let i;     let len = numbers.length;     let current_max = 0;     for(i = 0; i < len; i++){         current_max = Math.max(current_max, numbers[i]);         max_array.push(current_max);     }     return max_array; }
var res = [];     for(var i = 0; i < numbers.length; i++){         var max = numbers[i];         for(var j = 0; j <= i; j++){             if(numbers[j] > max){                 max = numbers[j];             }         }         res.push(max);     }     return res; }
let max = [];   let maxx = numbers[0];   for(let i = 0; i < numbers.length; i++){     if(numbers[i] > maxx){       maxx = numbers[i];     }     max.push(maxx);   }   return max; }
var current_prime = 2;     var max_prime = 1;     while(n > 1){         if(n % current_prime == 0){             max_prime = current_prime;             n = n / current_prime;         }         else{             current_prime++;         }     }     return max_prime; }
var factors = [], i;     for (i = 2; i <= n; i++) {         while ((n % i) === 0) {             factors.push(i);             n /= i;         }     }     return factors[factors.length - 1]; }
var factors = [];     var largest = 0;     for (var i = 2; i < n; i++){         if (n % i === 0){             factors.push(i);         }     }     for (var i = 0; i < factors.length; i++){         if (is_prime(factors[i])){             largest = factors[i];         }     }     return largest; }
function prime_factors(n){         //Return a list of the prime factors of n         //>>>prime_factors(2048)         //[2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]         let factor = 2;         let result = [];         while (n > 1){             while (n % factor === 0){                 result.push(factor);                 n /= factor;             }             factor += 1;         }         return result;     }     //Return the largest prime factor of n. Assume n > 1 and is not a prime.     // >>> largest_prime_factor(13195)     // 29     // >>> largest_prime_factor(2048)     // 2     const factors = prime_factors(n);     const largest_factor = factors[factors.length - 1];     return largest_factor; }
//YOUR CODE HERE     let lpf=1;     for(let i=2;i<n;i++){         if(n%i===0){             lpf=i;             n=n/i;             i=1;         }     }     return lpf; }
// Fill in the code here to satisfy the doctests 	// Hint: remember the tip above! 	var cur = n; 	var prime = find_next_prime(1); 	var ans = 0; 	while(cur > 1){ 		if(cur % prime == 0){ 			cur = cur / prime; 			ans = prime; 		} 		else{ 			prime = find_next_prime(prime); 		} 	} 	return ans; }
//Initialize a prime number generator     var primes = prime_generator();     //Iterate over the prime numbers     for(let p of primes){         //When a prime p divides n, divide n by p         while(n % p == 0){             n /= p;         }         //When n is no longer divisible by p, we are done.         if(n == 1){             return p;         }     } }
var max = 0;     for(var i = 2; i < n; i++){         if(n % i == 0){             if(is_prime(i)){                 max = i;             }         }     }     return max; }
var prime_factors = [];   var factor = 2;   while (n > 1){     if (n % factor === 0){       prime_factors.push(factor);       n = n / factor;     } else {       factor++;     }   }   return Math.max.apply(null, prime_factors); }
var p = 2;     while (p <= n){         if (n % p === 0){             n = n / p;         } else {             p = p + 1;         }     }     return p; }
for(var i = Math.ceil(Math.sqrt(n)); i > 1; i--){ 		if(n % i == 0 && is_prime(i)){ 			return i; 		} 	} }
if (is_prime(n)){return n;}   for (let i = Math.ceil(Math.sqrt(n)); i >= 2; i--){     if (n % i === 0 && is_prime(i)){       return i;     }   } }
var i = 2;     while (i < n) {         if (n % i == 0) {             n = n / i;         } else {             i++;         }     }     return i; }
var i = 2;     while (i < n){         if (n % i == 0){             n = n / i;         } else {             i += 1;         }     }     return n; }
}
var largest = 0;   //We'll use this to keep track of whether n has already been divided.   var divided = false;   //Starting at 2 and stopping when n is 1.   for(var i = 2; n != 1; i++){     //Trying to divide n by i.     if(n % i == 0){       //If that works, we've found a prime factor.       divided = true;       //It's the largest so far.       largest = i;       //We want to keep dividing out the prime factor.       //But not keep trying to divide by the same factor.       while(n % i == 0){         n = n / i;       }     }   }   //If we've already divided n, then it's larger than 1,   //and we can return the largest prime factor.   if(divided){     return largest;   }   //Otherwise, n is a prime, so it's its own largest prime factor.   else{     return n;   } }
//get all prime factors of n     let primeFactors = get_prime_factors(n);     //return the largest one     return Math.max(...primeFactors); }
let factors = get_factors(n);   factors.reverse();   console.log(factors);   let isPrime = function(num){     if(num === 2){       return true;     }     let factors = get_factors(num);     return factors.length === 2 ? true : false;   }   for(let i = 0; i < factors.length; i++){     if(isPrime(factors[i])){       return factors[i];     }   } }
var prime = 2;     var max = 1;     while(n > 1){         if(n % prime == 0){             max = prime;             n = n / prime;         }         else{             prime = prime + 1;         }     }     return max; }
if (typeof lst === 'number'){         lst = Array.from(arguments);     }     let prime = [];     lst.forEach(element => {         if (prime.indexOf(element) === -1){             prime.push(element);         }     });     let primeNumber = Math.max(...prime);     let str = String(primeNumber);     let answer = 0;     for (let i = 0; i < str.length; i++){         answer += Number(str[i]);     }     return answer; }
let largest = Math.max(...lst); 	console.log(largest); 	let prime = isPrime(largest); 	console.log(prime); 	let sum = 0; 	if(prime === true){ 		for(let i = 0; i < largest.length; i++){ 			sum += largest[i]; 		} 	} 	return sum; }
lst = lst.sort((a,b)=>a-b)   let prime = 0;   for(let i = lst.length - 1; i >= 0; i--){     if(isPrime(lst[i])){       prime = lst[i];       break;     }   }   if(prime === 0){     return 0;   }   return prime.toString().split('').reduce((sum, num)=> parseInt(sum) + parseInt(num)) }
let primes = [];   lst.sort((a,b)=>b-a).forEach(i=>{     if(isPrime(i)){       primes.push(i);     }   });   return sumDigits(primes[0]) }
var largestPrime = 0;     for(var i = 0; i < lst.length; i++){         if(prime(lst[i]) && largestPrime < lst[i]){             largestPrime = lst[i];         }     }     return largestPrime; }
let arr = [];     lst.forEach(x => {         if(lst.length > 1 && isPrime(x)){             arr.push(x);         }     });     let sum = arr.reduce((a, b) => a + b, 0);     let sumString = sum.toString();     let sumArray = sumString.split('');     let sumResult = sumArray.reduce((a, b) => a + parseInt(b), 0);     return sumResult; }
var largest = 0;     var sum = 0;     var largestString = '';     for(var i = 0; i < lst.length; i++){         if(isPrime(lst[i]) === true){             if(lst[i] > largest){                 largest = lst[i];             }         }     }     largestString = largest.toString();     for(var j = 0; j < largestString.length; j++){         sum += parseInt(largestString[j]);     }     return sum; }
let jedi = [];   let master = [];   for(let i = 0; i < lst.length; i++){     jedi.push(lst[i]);     let jediLength = jedi.length;     for(let j = 0; j < jediLength; j++){       if(jedi[0] % jedi[j] === 0 && jedi[0] != jedi[j]){         jedi.shift();         break;       }     }   }   for(let i = 0; i < jedi.length; i++){     let element = jedi[i];     let nextElement = jedi[i+1];     if(nextElement !== undefined){       if(element > nextElement){         master.push(element);       }     }else{       master.push(element);     }   }   let element = master[0];   element = element.toString();   let counter = 0;   for(let i = 0; i < element.length; i++){     counter += parseInt(element[i]);   }   return counter; }
}
let n = Math.max(...lst);     let prime;     let sum = 0;     let i = 0;     while(i <= n){         if(isPrime(i)){             prime = i;         }         i++;     }     let str = prime.toString();     for(let i = 0; i < str.length; i++){         sum += parseInt(str[i]);     }     return sum; }
function isPrime(num) {     for(var i = 2; i < num; i++)       if(num % i === 0) return false;     return num > 1;   }   var max=Math.max.apply(null,lst);   for(var i=max;i>0;i--){     if(isPrime(i)){       var res=i.toString().split('').reduce(function(x,y){return +x + +y});       return res;     }   } }
let str = [... new Set(lst)].sort((a,b)=> b-a).filter(el=>{         if(el === 1) return false;         for(let i = 2; i < el; i++){             if(el % i === 0) return false;         }         return true;     })[0].toString();     return str.split('').reduce((acc, cur)=> acc + parseInt(cur), 0); }
}
let result;     //step one get all primes in the list     let primeList = []     for(let i = 0; i < lst.length; i++){         if(isPrime(lst[i])){             primeList.push(lst[i])         }     }     //step two get the largest prime     let largestPrime = Math.max(...primeList)     //step three get the largest prime's digits     let primeDigits = largestPrime.toString().split('').map(Number)     //step four get the sum of the digits     result = primeDigits.reduce((a,b) => a + b, 0)     return result }
if (lst == 0) {         return 0;     }     let b = lst.join('').split('').map(Number);     let sum = b.reduce((a, b) => a + b, 0);     return sum; }
let arr=[];     for(let i=0;i<lst.length;i++){         if(isPrime(lst[i])) arr.push(lst[i]);     }     let max=Math.max(...arr);     max=max.toString();     let count=0;     for(let j=0;j<max.length;j++){         count+=+max[j];     }     return count; }
var sum = 0;     var max = lst[0];     for(var i = 0; i < lst.length; i++){         if(max < lst[i]){             max = lst[i];         }     }     for(var i = 2; i < max; i++){         if(isPrime(i)){             var tmpSum = 0;             for(var j = 0; j < lst.length; j++){                 if(lst[j] == i){                     tmpSum += i;                 }             }             if(tmpSum >= sum){                 sum = tmpSum;             }         }     }     return sum; }
let res = lst.sort((a,b)=>b-a).filter(x=>x>=2).find(x=>isPrime(x));     return res.toString().split('').reduce((a,b)=>+a+ +b); }
//TODO: Write - Your - Code   let c=[]   lst.forEach(x=>{     if(isPrime(x))     c.push(x)   })   console.log(c)   let max=0   c.forEach(x=>{     if(x>max)     max=x   })   let str=max.toString()   let sum=0   for(let i=0;i<str.length;i++){     sum+=parseInt(str[i])   }   return sum }
if (lst.length === 0 || lst.length === 1) return null;     if (lst.length === 2) return lst[0] === lst[1] ? null : lst[1];     let first_min = lst[0];     let second_min = lst[1];     for (let i = 1; i < lst.length; i++){         if (lst[i] < first_min){             second_min = first_min;             first_min = lst[i];         }         else if (lst[i] < second_min && lst[i] !== first_min){             second_min = lst[i];         }     }     return second_min; }
let min = Math.min(...lst);     let minSecond = lst.filter(num => num > min);     if (minSecond.length > 0) {         return Math.min(...minSecond);     } else {         return null;     } }
if(lst.length < 2) return;     var min = Math.min(...lst);     var sec = Infinity;     for(var el of lst){         if(el > min && el < sec) sec = el;     }     return sec; }
if(lst.length==0){         return null;     }     var min=Math.min(...lst);     if(lst.indexOf(min)==-1){         return null;     }     if(lst.indexOf(min)!=-1){         var min_2=lst[lst.indexOf(min)];         var min_index_2=lst.indexOf(min);         for(var i=lst.indexOf(min);i<lst.length;i++){             if(lst[i]<min_2){                 min_2=lst[i];                 min_index_2=i;             }         }         if(min_index_2==lst.indexOf(min)){             return null;         }         return min_2;     } }
if(lst.length<2){         return null;     }     if(lst.length==2){         if(lst[0]==lst[1]){             return null;         }     }     let min=Math.min(...lst);     let min_index=lst.indexOf(min);     if(min_index==0){         return lst[1];     }     if(min_index==lst.length-1){         return lst[lst.length-2];     }     return Math.min(lst[min_index-1],lst[min_index+1]); }
if (lst.length <= 2) return null;   var min = lst[0];   var min_idx = 0;   for (var i = 1; i < lst.length; i++) {     if (lst[i] < min) {       min = lst[i];       min_idx = i;     }   }   var second_min = lst[0];   for (var i = 1; i < lst.length; i++) {     if (i != min_idx && lst[i] < second_min) {       second_min = lst[i];     }   }   return second_min; }
if(lst.length === 0){         return null;     }     else if(lst.length === 1){         return null;     }     else if(lst.length === 2){         if(lst[0] === lst[1]){             return null;         }         else{             if(lst[0] < lst[1]){                 return lst[0];             }             else{                 return lst[1];             }         }     }     else{         lst.sort(function(a, b){return a-b});         for(var i = 0; i < lst.length; i++){             if(lst[i] === lst[i+1]){                 continue;             }             else{                 return lst[i+1];             }         }     } }
return lst.sort(function(a,b){         return a - b;     })[1] ? lst.sort(function(a,b){         return a - b;     })[1] : null; }
var arr = []   if(lst.length > 1){     arr = lst.sort(function(a, b){return a-b});     for(var i = 0; i < arr.length; i++){       if(arr[i] !== arr[i+1]){         return arr[i+1];       }     }   }   return null; }
if(lst.length < 2) return null;     let set = new Set();     let min = Math.min(...lst);     set.add(min);     for(let i = 0; i < lst.length; i++){         if(lst[i] != min){             set.add(lst[i]);         }     }     return Math.min(...set); }
if(lst.length < 2){         return null;     }     let smallest = lst[0];     let secondSmallest = null;     for(let i = 1; i < lst.length; i++){         if(lst[i] < smallest){             secondSmallest = smallest;             smallest = lst[i];         }         else if(lst[i] < secondSmallest){             secondSmallest = lst[i];         }     }     return secondSmallest; }  module.exports = {     next_smallest }
if(lst.length < 2){         return null;     }     let sorted = lst.sort((a,b) => a-b);     return sorted[1]; }
let smallest = lst[0];     let secondSmallest = null;     let i = 0;     while(i < lst.length){         if(lst[i] < smallest){             secondSmallest = smallest;             smallest = lst[i];         }         else if(lst[i] < secondSmallest){             secondSmallest = lst[i];         }         i++     }     return secondSmallest; }
if (lst.length === 0) {         return null;     } else if (lst.length === 1) {         return null;     } else {         var min = Math.min(...lst);         var index = lst.indexOf(min);         lst.splice(index, 1);         return Math.min(...lst);     } }
var l = [];     var c = [];     var a = 0;     var b = 0;     if(lst.length == 0){         return null;     }     else{         if(lst.length > 2){             for(var i = 0; i < lst.length; i++){                 for(var j = i+1; j < lst.length; j++){                     if(lst[i] == lst[j]){                         a = a + 1;                     }                 }             }             if(a == 0){                 for(var i = 0; i < lst.length; i++){                     for(var j = i+1; j < lst.length; j++){                         if(lst[i] > lst[j]){                             c = lst[i];                             lst[i] = lst[j];                             lst[j] = c;                         }                     }                 }                 return lst[1];             }             else{                 return null;             }         }         else{             if(lst[0] == lst[1]){                 return null;             }             else{                 return lst[1];             }         }     } }
if(lst.length < 2){     return null;   }   lst.sort(function(a, b){return a-b});   let result = [];   result.push(lst[0]);   for(let i = 1; i < lst.length; i++){     if(lst[i] != lst[i-1]){       result.push(lst[i]);     }   }   if(result.length >= 2){     return result[1];   }else{     return null;   } }
let min = Math.min(...lst);     if(lst.length == 0){         return null;     }     if(lst.indexOf(min) == lst.lastIndexOf(min)){         return null;     }     let lst2 = lst.filter(x => x != min);     return Math.min(...lst2); }
if(lst.length == 0){         return null;     }     if(lst.length == 1){         return null;     }     let temp = lst[0];     for(let i = 0; i < lst.length; i++){         if(lst[i] < temp){             temp = lst[i];         }     }     let temp2 = lst[0];     for(let i = 0; i < lst.length; i++){         if(lst[i] > temp && lst[i] < temp2){             temp2 = lst[i];         }     }     return temp2; } let list = [5, 1, 4, 3, 2];
var smallest = Number.MAX_VALUE;     var secondSmallest = Number.MAX_VALUE;     if(lst.length==0) return "None";     for(var i=0;i<lst.length;i++){         if(lst[i]<smallest){             secondSmallest = smallest;             smallest = lst[i];         }else if(lst[i]<secondSmallest && lst[i]!=smallest){             secondSmallest = lst[i];         }     }     if(secondSmallest == Number.MAX_VALUE){         return "None";     }     return secondSmallest; }
var result = [];   var y = 0;   for(var i = 0; i < x; i++){     y = i;     result.push(i);     while(y >= base){       y = Math.floor(y / base);       result.push(y);     }   }   return result; }
console.log("change_base(" + x + "," + base + ")");     var result = "";     while(x > 0){         result = x % base + result;         x = Math.floor(x / base);     }     return result; }
if(x < base){     return x;   }   else{     return change_base(Math.floor(x/base), base) + x%base;   } }
}
/* your code here */ 	 }
if(x < base){         return x + '';     }     return change_base(Math.floor(x / base), base) + (x % base); }
var ans = ""; 	while(x > 0){ 		ans = (x % base) + ans; 		x = Math.floor(x / base); 	} 	return ans; }
var res = "" 	while(x != 0){ 		res = x % base + res 		x = Math.floor(x / base) 	} 	return res }
var list = [0,1,2,3,4,5,6,7,8,9];     var str = "";     while(x > 0){         str = list[x % base] + str;         x = parseInt(x / base);     }     return str; }
var result = '';     var rem = 0;     while(x >= base){         rem = x % base;         x = Math.floor(x / base);         result = String(rem) + result;     }     result = String(x) + result;     return result; }
var result=""; 	while(x>0){ 		result=x%base+result; 		x=Math.floor(x/base); 	} 	return result; }
var ten_to_base = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'A', 'B', 'C', 'D', 'E', 'F'];     var converted = "";     var x = Number(x);     var base = Number(base);     if (x === 0){         return "0";     }     if (base === 10){         return String(x);     }     while (x > 0){         var rem = x % base;         converted = ten_to_base[rem] + converted;         x = (x - rem) / base;     }     return converted; }
// TODO }
if(base>10){     throw 'base number should be less than 10';   }   var num = x;   var result = [];   while(num>=base){     result.push(num%base);     num = Math.floor(num/base);   }   result.push(num);   return result.reverse().join(''); }
var nums = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'];   var result = "";   while(x > 0){     result = nums[x % base] + result;     x = Math.floor(x / base);   }   return result; }
var digits = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";     if (x < base) return digits[x];     return change_base(Math.floor(x/base), base) + digits[x%base]; }
let isNegative = false;     if(x < 0){         isNegative = true;         x = -x;     }     let res = [];     while(x){         let r = x % base;         res.push(r);         x = Math.floor(x / base);     }     if(isNegative){         res.push('-');     }     return res.reverse().join(''); }
return ''.join(reversed(change_base_helper(x, base))); }
var ans = "";   while(x >= base){     var left = x % base;     x = Math.floor(x / base);     ans = left + ans;   }   ans = x + ans;   return ans; }
var boredoms = 0;   var sentences = S.split(/[\.\?\!]/);   sentences.forEach(function(sentence){     if(sentence.trim().slice(0,1) === "I"){       boredoms++;     }   });   return boredoms; }
let count = 0;     let sentences = S.split(/[.?!]/g);     for(sentence of sentences){         if(sentence.split(" ")[0] === "I"){             count += 1;         }     }     return count; }
var sentences = S.split(/[.!?]/g);   return sentences.filter(s => s.trim().split(' ')[0] === 'I').length; }
let count = 0;     let arr = S.split(" ");     for(let i = 0; i < arr.length; i++){         if(arr[i] == "I"){             count++;         }     }     return count; }
//remove white space and make string a list     var strList = S.replace(/\s/g, '').split(".");     var numberOfBoredoms = 0;     var i;     for(i = 0; i < strList.length; i++){         if(strList[i][0] == "I"){             numberOfBoredoms++;         }     }     return numberOfBoredoms; }
var arr = S.split(/[.?!]/); 	var count = 0; 	for(var i = 0; i < arr.length; i++){ 		var arr2 = arr[i].split(' '); 		if(arr2[0] === 'I'){ 			count += 1; 		} 	} 	return count; }
S = S.split(" ");     return(S.reduce((a,b) => b === "I" ? a+1 : a, 0)); }
var splits = S.split(/[\.\?\!]/);     var i=0;     for(var j=0;j<splits.length;j++){         if(splits[j].indexOf("I")===0){             i++;         }     }     return i; }
return S.split(/[!.?]+/).filter(e => e.startsWith("I")).length; }
var  str = S.split(".");   var  count = 0;   for(var i=0; i<str.length; i++){     if(str[i].charAt(0) == "I"){       count = count + 1;     }   }   return count; }
let boredoms = 0;     let wordArray = S.split(" ");     for(i = 0; i < wordArray.length; i++){         if(wordArray[i] == "I"){             boredoms++;         }     }     return boredoms; }
var phrases = S.split(/[.?!]/); 	var boredom_count = 0; 	for (var i = 0; i < phrases.length; i++){ 		if (phrases[i].charAt(0) == "I"){ 			boredom_count += 1; 		} 	} 	return boredom_count; }
var count = 0;   var splitByChar = S.split(/[.!?]/);   for(var i = 0; i < splitByChar.length; i++){     if(splitByChar[i].charAt(0) === "I"){       count++;     }   }   return count; }
var data = S.split(/[\.\?\!]/);   var boredomCount = 0;   for(var i = 0; i < data.length; i++){     if(data[i].startsWith("I")){       boredomCount++;     }   }   return boredomCount; } var result = is_bored("The sky is blue. The sun is shining. I love this weather");
var count = 0;     var arr = S.split(".");     for(var i = 0; i < arr.length; i++){         if(arr[i].charAt(0) == "I"){             count += 1;         }     }     return count; }
var arr = S.split(/[.!?]/);     return arr.filter(function(e){         return e.charAt(0) == 'I';     }).length; }
return S.split(".") 		.filter(function(sentence){return sentence.startsWith("I")}) 		.length; }
var list = S.split(/[.!?]/);     var result = 0;     list.forEach(function(word){         if(word.charAt(0) == "I"){             result++;         }     });     return result; }
//Code here }
//your code here   var array = [];   for(var i = 2; i < n; i++){     if(isPrime(i)){       array.push(i);     }   }   return array; }
var count=[];     if(n==0) return count;     for(var i=2;i<n;i++){         var isprime=true;         for(var j=2;j<i;j++){             if(i%j==0){                 isprime=false;                 break;             }         }         if(isprime)             count.push(i);     }     return count; }
var array = [];   var num = 2;   while(num < n){     if(check_prime(num)){       array.push(num);     }     num++;   }   return array; }
var arr = []     for(var i = 2; i < n; i++){         for(var j = 2; j < i; j++){             if(i % j === 0){                 break;             }             if(j == i-1){                 arr.push(i)             }         }     }     return arr }
let primeArr = [];     if(n == 0){         return primeArr;     }else if(n == 1){         return primeArr;     }else{         for(let i = 2; i < n; i++){             if(isPrime(i)){                 primeArr.push(i);             }         }         return primeArr;     } }
// list=[];     // for(var i=2;i<n;i++){     //     if(is_prime(i)){     //         list.push(i);     //     }     // }     // return list;     var array = Array.apply(null, Array(n)).map(function (_, i) {return i;});     return array.filter(is_prime); }
var arr = [];   if(n<=1){     return arr;   }   if(n<3){     arr.push(2);     return arr;   }   if(n<4){     arr.push(2);     arr.push(3);     return arr;   }   for(var i=2;i<n;i++){     if(i%2===0 || i%3===0){       continue;     }     else if(i%5===0 || i%7===0){       continue;     }     else{       arr.push(i);     }   }   return arr; }
if(n < 0){     return false;   }   else if(n === 0){     return [];   }   else if(n === 1){     return [];   }   else if(n === 2){     return [2];   }   else if(n === 3){     return [2,3];   }   else{     let ans = [2,3];     for(let i = 3; i < n; i++){       let isPrime = true;       for(let j = 2; j < i; j++){         if(i % j === 0){           isPrime = false;         }       }       if(isPrime){         ans.push(i);       }     }     return ans;   } }
var count = 0; 	var arr = []; 	for(var i = 2; i <= n; i++){ 		count = 0; 		for(var j = 2; j <= i/2; j++){ 			if(i % j == 0){ 				count++; 				break; 			} 		} 		if(count == 0 && i != 1){ 			arr.push(i); 		} 	} 	return arr; }
var arr = [];   for(var i = 2; i < n; i++){     if(isPrime(i)){       arr.push(i);     }   }   return arr; }
function isPrime(number) {       var start = 2;       while (start <= Math.sqrt(number)) {           if (number % start++ < 1) return false;       }       return number > 1;   }   var primeNumbers = [];   for (var i = 0; i < n; i++) {     if (isPrime(i)) {       primeNumbers.push(i);     }   }   return primeNumbers; }
var result = []; 	for(var i = 2; i < n; i++){ 		var count = 0; 		for(var j = 2; j < i; j++){ 			if(i % j === 0){ 				count++; 			} 		} 		if(count === 0){ 			result.push(i); 		} 	} 	return result; }
var result = [];     if( n === 0){         return result;     }     if( n === 1){         return result;     }     var is_prime = function(num){         for(var i = 2; i < num; i++){             if(num % i === 0){                 return false;             }         }         return true;     };     for(var i = 2; i < n; i++){         if(is_prime(i)){             result.push(i);         }     }     return result; }
if(n <= 1){     return [];   }   var result = [2];   for(var i = 3; i < n; i += 2){     if(isPrime(i)){       result.push(i);     }   }   return result; }
var primeArray = []; for(var i = 2; i < n; i++){   if(isPrime(i)){     primeArray.push(i);   } }  return primeArray; }
if(n<=1){         return [];     }     let x = []     for(let i = 2; i<n; i++){         if(isPrime(i)){             x.push(i);         }     }     return x; }
let primes = [];     if(n === 0) return primes;     for(let i = 2; i < n; i++){         if(i < 2) continue;         for(let j = 2; j < i; j++){             if(i % j === 0) continue;         }         primes.push(i);     }     return primes; }
var arr = []; for(var i = 2; i<n; i++){ if(checkPrime(i)){ arr.push(i); } } return arr; }
let count = [];     for(let i = 2; i < n; i++){         for(let j = 2; j <= i; j++){             if(i === j){                 count.push(i);             }             if(i % j === 0){                 break;             }         }     }     return count; }
var newList = []; 	for(i=0; i<l.length; i++){ 		newList.push(l[i]+1); 	} 	return newList; }
let result = [];     for(let i = 0; i < l.length; i++){         result.push(l[i] + 1);     }     return result; }
return l.map(function(x){return x+1}); }
return map(incr, l); }
var r= [];   for(var i=0; i<l.length; i++){     r.push(l[i]+1);   }   return r; }
var lincr=[];     for(var i=0;i<l.length;i++){         lincr.push(l[i]+1);     }     return lincr; }
return l.map(i => i + 1); }
// Create new list     var incr_l = [];     for (i=0; i<l.length; i++){       incr_l.push(l[i]+1);     }     return incr_l; } var l = [1, 2, 3];
return l.map(x => x + 1); }
return l.map(x => x + 1); }
// return (null)?(null): l.map(x => x+1);     if(l == null){         return null;     }else{         var result=[];         for(var i=0; i<l.length; i++){             result.push(l[i]+1);         }         return result;     } }
return _.map(l, function(elem){     return elem + 1;   }); }
let result = []; 	for(let i = 0; i < l.length; i++){ 		result.push(l[i] + 1); 	} 	return result; }
return l.map(function(i){         return i+1;     }); }
if(is_null(l)){         return null;     } else {         return pair(             head(l) + 1,             incr_list(tail(l))         );     } }
var il = new Array(); 	for(var i=0; i<l.length; i++){ 		il.push(l[i]+1); 	} 	return il; }
var newList = []; 	for(var i = 0; i < l.length; i++){ 		newList.push(l[i] + 1); 	} 	return newList; }
var count = 0;     for(var i = 0; i < arr.length; i++){         var sum = 0;         if(arr[i] >= 0){             while(arr[i] > 0){                 sum += arr[i] % 10;                 arr[i] = Math.floor(arr[i] / 10);             }         }         else{             while(arr[i] < 0){                 sum += Math.abs(arr[i] % 10);                 arr[i] = Math.ceil(arr[i] / 10);             }         }         if(sum > 0){             count++;         }     }     return count; }
var count = 0;   for(i=0; i<arr.length; i++){     if(get_signed_digits(arr[i]).reduce(function(a,b){return a+b;}) > 0){       count++;     }   }   return count; }
if(arr.length === 0){         return 0;     }     let count = 0;     for(let i = 0; i < arr.length; i++){         let sum = 0;         if(arr[i] < 0){             arr[i] = arr[i] * -1;         }         while(arr[i] > 0){             sum += arr[i] % 10;             arr[i] = Math.floor(arr[i] / 10);         }         if(sum > 0){             count++;         }     }     return count; }
var count = 0;     for(var i = 0; i < arr.length; i++){         // if(Math.abs(arr[i]) < 10){         //     if(arr[i] > 0){         //         count++;         //     }         // }         // else{         //     var numbers = Math.abs(arr[i]).toString().split("");         //     var sum = 0;         //     for(var j = 0; j < numbers.length; j++){         //         sum += parseInt(numbers[j]);         //     }         //     if(sum > 0){         //         count++;         //     }         // }         var number = Math.abs(arr[i]);         var sum = 0;         while(number > 0){             sum += number % 10;             number = Math.floor(number / 10);         }         if(sum > 0){             count++;         }     }     return count; }
var count = 0;     for(var i = 0; i < arr.length; i++){         var sum = 0;         var num = arr[i];         if(num < 0){             num = Math.abs(num);         }         while(num > 0){             sum += num % 10;             num = Math.floor(num / 10);         }         if(sum > 0){             count++;         }     }     return count; }
//if no elements in array return 0 	if(arr.length == 0){ 		return 0; 	} 	//if first element in array is positive and string length is 1 return true 	if(arr[0] > 0 && arr[0].toString().length == 1){ 		return 1; 	} 	//if first element in array is negative and string length is 1 return true 	if(arr[0] < 0 && arr[0].toString().length == 1){ 		return 1; 	} 	//if first element in array is positive 	if(arr[0] > 0){ 		//turn the number into a string 		var str = arr[0].toString(); 		//create an array of each string element 		var split = str.split(""); 		//make an empty array to store the summation of digits 		var sum = []; 		//loop through the array 		for(var i = 0; i < split.length; i++){ 			//turn the strings into integers and add them to sum array 			sum.push(parseInt(split[i])); 		} 		//declare variable to store sum of digits 		var sumOf = 0; 		//loop through the sum array 		for(var i = 0; i < sum.length; i++){ 			//add the array elements together 			sumOf += sum[i]; 		} 		//if the sum is greater than 0 return true 		if(sumOf > 0){ 			return 1; 		} 	} 	//if first element in array is negative 	if(arr[0] < 0){ 		//take the negative sign out 		var fix = arr[0].toString().substring(1); 		//turn number into a string 		var str = fix.toString(); 		//create an array of each string element 		var split = str.split(""); 		//make an empty array to store the summation of digits 		var sum = []; 		//loop through the array 		for(
let count = 0;     for(let i = 0; i < arr.length; i++){         if(arr[i] < 0){             count += Math.abs(arr[i] % 10);         }else{             count += arr[i] % 10;         }     }     return count; }
return arr.reduce(function(acc, element){     return acc + (signed_sum(element) > 0);   }, 0); }
var count = 0; 	var digit = 0; 	var sum = 0; 	for(var i = 0; i < arr.length; i++){ 		var num = arr[i]; 		//If the number is negative, we need to find the first digit. 		if(num < 0){ 			num = Math.abs(num); 			var str = num.toString(); 			digit = parseInt(str[0]); 			sum = sum + digit; 		} 		//Find the sum of all the digits 		while(num > 0){ 			digit = num % 10; 			sum = sum + digit; 			num = Math.floor(num / 10); 		} 		//Count the elements that have a sum of digits > 0 		if(sum > 0){ 			count = count + 1; 		} 		sum = 0; 	} 	return count; }
var sum = 0;   for(i = 0; i < arr.length; i++){     if(arr[i] > 0){       sum = sum + arr[i];     }     else{       sum = sum - arr[i];     }   }   return sum; }
// your code goes here }
return arr.filter(x => {         return sum_digits(x) > 0;     }).length; }
return arr.filter(x => { 		if (x > 0) { 			return x; 		} 		x = Math.abs(x); 		if (x < 0) { 			return x; 		} 	}).reduce((acc, val) => { 		let sum = 0; 		val = String(val); 		for (let i = 0; i < val.length; i++){ 			sum += Number(val[i]); 		} 		if (sum > 0) { 			acc++; 		} 		return acc; 	}, 0); }
var sum; 	var count = 0; 	for(var i = 0; i < arr.length; i++){ 		sum = 0; 		if(arr[i] < 0){ 			arr[i] = arr[i] * -1; 		} 		var num = arr[i].toString(); 		for(var j = 0; j < num.length; j++){ 			sum += parseInt(num[j]); 		} 		if(sum > 0){ 			count++; 		} 	} 	return count; }
let count = 0;     arr.forEach(num => {         let num_str = num.toString();         if (num < 0) num_str = num_str.substring(1);         let sum = 0;         for (let i = 0; i < num_str.length; i++){             sum += parseInt(num_str[i]);         }         if (sum > 0) count++;     });     return count; }
var res = 0;     for(var i = 0; i < arr.length; i++){         var sum = 0;         var num = Math.abs(arr[i]);         while(num > 0){             sum += num % 10;             num = Math.floor(num / 10);         }         if(sum > 0){             res++;         }     }     return res; }
let count = 0;   arr.forEach(function(item){     if(item > 0){       let digits = item.toString().split('');       let result = 0;       digits.forEach(function(number){         result += parseInt(number);       });       if(result > 0){         count += 1;       }     }else{       let number = item.toString().split('');       let res = 0;       number.forEach(function(num){         res += parseInt(num);       });       if(res + 1 > 0){         count += 1;       }     }   });   return count; }
return arr.filter(function(v){ 		var sum = 0; 		for(var i = 0; i < v.toString().length; i++){ 			sum += parseInt(v.toString()[i]); 		} 		return sum > 0; 	}).length; }
return arr.filter(function(x){     return (x.toString().split('').reduce(function(previousValue, currentValue){       return +previousValue + +currentValue;     }, 0) > 0);   }).length; }
return nums.map(     (num, i) => num + ' ' + i   ).sort().map(     (val) => Number(val.match(/\d+/)[0])   ); }
if(nums.length == 0){         return nums;     }     let sort = [];     let key = null;     let max = sumOfDigits(nums[0]);     let count = 0;     for(let i = 0; i < nums.length; i++){         let sum = sumOfDigits(nums[i]);         if(sum >= max){             max = sum;             key = nums[i];             count = 0;         }         if(i == nums.length - 1){             sort.push(key);             nums.splice(nums.indexOf(key), 1);             i = -1;             max = sumOfDigits(nums[0]);             count++;         }         if(count == nums.length){             break;         }     }     return sort; }
var index = 0;   var lookup = {};   var sorted = [];   var sortedKeys = [];   // make a copy of the array,   // and create a mapping of the number in array   // to the index of where it was in the array   // e.g. {0: 6, 1: 0, 2: 1, 3: 2, 4: 3, 5: 4, 6: 5}   //nums = nums.slice();   for (var j = 0; j < nums.length; j++) {     lookup[j] = index;     index++;   }   // sort the copied array   nums.sort(function(a, b) {     // if sum(a) < sum(b),     // return -1 and let sort() know that a should come before b     // (or if they are equal, use the index to determine which     // should come first based on the original array).     if (sum(a) < sum(b)) return -1;     if (sum(a) === sum(b)) return lookup[b] - lookup[a];     // if sum(a) > sum(b), return 1,     // (or if they are equal, use the index to determine which     // should come first based on the original array).     if (sum(a) > sum(b)) return 1;   });   //console.log(nums);   return nums; }
var sums = []     var answer = []     if (nums.length < 1){         return [];     }     else{         for (var i = 0; i < nums.length; i++){             var sum = 0;             for (var j = 0; j < nums[i].toString().length; j++){                 sum += parseInt(nums[i].toString()[j]);             }             sums.push(sum);         }         for (var i = 0; i < sums.length; i++){             for (var j = 0; j < sums.length; j++){                 if (sums[i] < sums[j]){                     var temp = sums[i];                     sums[i] = sums[j];                     sums[j] = temp;                     var temp2 = nums[i];                     nums[i] = nums[j];                     nums[j] = temp2;                 }             }         }         return nums;     } }
let sums = nums.map(sum_digits);     return quick_sort(nums, sums); }
var result = [];   var sorted = {};   nums.forEach(function(num, index){     var numArr = num.toString().split('');     if(sorted[numArr.reduce(function(a,b){       return parseInt(a) + parseInt(b);     })] == undefined){       sorted[numArr.reduce(function(a,b){         return parseInt(a) + parseInt(b);       })] = [index];     }else{       sorted[numArr.reduce(function(a,b){         return parseInt(a) + parseInt(b);       })].push(index);     }   });   var sortedKeys = Object.keys(sorted).sort(function(a,b){     return a - b;   });   sortedKeys.forEach(function(key){     var indexes = sorted[key];     indexes.forEach(function(index){       result.push(nums[index]);     });   });   return result; }
}
return nums.sort((a, b) => {         let a_sum = a.toString().split('').reduce((acc, num) => acc + parseInt(num), 0);         let b_sum = b.toString().split('').reduce((acc, num) => acc + parseInt(num), 0);         if (a_sum > b_sum) {             return 1;         } else if (a_sum < b_sum) {             return -1;         } else {             return a - b;         }     }); }
let arr = []     nums.forEach(num => arr.push(Math.abs(num).toString().split('').reduce((acc, cur) => +acc + +cur)))     let sortedArr = arr.slice().sort((a, b) => a - b)     let obj = {}     sortedArr.forEach((el, i) => obj[el] = i)     return arr.map(el => nums[obj[el]]) }
let sum = 0;     let results = [];     if(nums.length > 0){         for(let i = 0; i < nums.length; i++){             for(let j = 0; j < (nums[i].toString()).length; j++){                 sum += parseInt((nums[i].toString())[j]);             }             results.push([sum, i]);             sum = 0;         }         results.sort(function(a, b){             return a[0] - b[0];         });         for(let i = 0; i < results.length; i++){             results[i] = nums[results[i][1]];         }     }     return results; }
let arr = [];     let map = {};     for(let i=0; i<nums.length; i++){         arr.push([nums[i], sum_of_digits(nums[i])]);         if(!map[sum_of_digits(nums[i])]){             map[sum_of_digits(nums[i])] = [];         }         map[sum_of_digits(nums[i])].push(nums[i]);     }     let keys = Object.keys(map);     keys.sort((a,b)=>{         return a-b;     });     let finalArr = [];     for(let i=0; i<keys.length; i++){         map[keys[i]].sort((a,b)=>{             return a-b;         });         finalArr = finalArr.concat(map[keys[i]]);     }     return finalArr; }
var result = [];     if(nums.length > 0){         for(var i = 0; i < nums.length; i++){             var tmp = nums[i];             var num = Math.abs(tmp).toString();             var sum = 0;             for(var j = 0; j < num.length; j++){                 sum += Number(num[j]);             }             result.push([tmp, sum, i]);         }         result.sort(function(a, b){             if(a[1] === b[1]){                 return a[2] - b[2];             }             return a[1] - b[1];         });         var res = [];         for(var i = 0; i < result.length; i++){             res.push(result[i][0]);         }         return res;     }     return result; }
return nums.sort((a, b) => {         let sumA = a.toString().split('').reduce((a, b) => Number(a) + Number(b), 0);         let sumB = b.toString().split('').reduce((a, b) => Number(a) + Number(b), 0);         return sumA - sumB;     }); }
return nums.sort((a, b) => {         return [...String(a)].reduce((a, c) => a + Number(c), 0) - [...String(b)].reduce((a, c) => a + Number(c), 0) ||             nums.indexOf(a) - nums.indexOf(b);     }); }
let num_hash = {};   for (let i = 0; i < nums.length; i++){     let n = nums[i];     let n_array = n.toString().split('');     let n_sum = 0;     for (let j = 0; j < n_array.length; j++){       n_sum += parseInt(n_array[j]);     }     if (num_hash[n_sum]){       num_hash[n_sum].push(n);     }     else {       num_hash[n_sum] = [n];     }   }   let result = [];   let keys = Object.keys(num_hash);   keys.sort(function(a, b){return a - b});   for (let i = 0; i < keys.length; i++){     result = result.concat(num_hash[keys[i]]);   }   return result; }
if (nums.length == 0) {         return [];     }      let nums_to_points = [];     let points_to_num = {};     let max_point = 0;     for (let i = 0; i < nums.length; i++) {         let point = 0;         let num = nums[i];         while (num != 0) {             point += num % 10;             num = parseInt(num / 10);         }         nums_to_points.push(point);         points_to_num[point] = nums[i];         if (point > max_point) {             max_point = point;         }     }      let result = [];     for (let i = 0; i <= max_point; i++) {         if (points_to_num[i] != undefined) {             result.push(points_to_num[i]);         }     }     return result; }
// if (nums.length > 1){ 	// 	for (var i = 0; i < nums.length - 1; i++){ 	// 		for (var j = i + 1; j < nums.length; j++){ 	// 			if (get_sum_of_numbers(nums[i]) > get_sum_of_numbers(nums[j])){ 	// 				var temp = nums[i]; 	// 				nums[i] = nums[j]; 	// 				nums[j] = temp; 	// 			} 	// 		} 	// 	} 	// } 	var sorted_array = nums.slice().sort(function(a, b){ 		return get_sum_of_numbers(a) - get_sum_of_numbers(b); 	}); 	return sorted_array; }
return nums.map(function(num){         return {num: num, sum: sum_digits(num)};     }).sort(function(a, b){         if(a.sum !== b.sum){             return a.sum - b.sum;         }         return nums.indexOf(a.num) - nums.indexOf(b.num);     }).map(function(item){         return item.num;     }); }
return nums.map(e => {         return {num: e, points: e.toString().split('').reduce((a, b) => Number(a) + Number(b), 0)}     }).sort((a, b) => a.points - b.points).map(e => e.num); }
let sum = 0;     for (let i = 0; i < lst.length; i++){         if (i % 3 == 0){             lst[i] = lst[i] * lst[i];         }         if (i % 4 == 0 && i % 3 != 0){             lst[i] = lst[i] * lst[i] * lst[i];         }         sum += lst[i];     }     return sum; }
var sum = 0;   for (var i = 0; i < lst.length; i++) {     if ((i+1) % 3 == 0 && (i+1) % 4 != 0) {       sum += Math.pow(lst[i], 2);     } else if ((i+1) % 4 == 0) {       sum += Math.pow(lst[i], 3);     } else {       sum += lst[i];     }   }   return sum; }
var sum = 0;     for (var i = 0; i < lst.length; i++) {         if (i % 3 == 0) {             sum += Math.pow(lst[i], 2);         }         else if (i % 4 == 0 && i % 3 != 0) {             sum += Math.pow(lst[i], 3);         }         else {             sum += lst[i];         }     }     return sum; }
var sum = 0; 	for(var i = 0; i < lst.length; i++){ 		if(i % 3 == 0){ 			sum += lst[i]*lst[i]; 		} 		else if(i % 4 == 0 && i % 3 != 0){ 			sum += lst[i]*lst[i]*lst[i]; 		} 		else{ 			sum += lst[i]; 		} 	} 	return sum; }
var sum = 0;     for (i = 0; i < lst.length; i++) {         if (i % 3 == 0 && i % 4 != 0) {             sum += lst[i]*lst[i];         }         else if (i % 4 == 0 && i % 3 != 0) {             sum += lst[i]*lst[i]*lst[i];         }         else {             sum += lst[i];         }     }     return sum; }
var sum = 0;     for (var i = 0; i < lst.length; i++){         if (i % 3 == 0 && i % 4 != 0){             sum += lst[i]*lst[i];         }         else if (i % 4 == 0 && i % 3 != 0){             sum += lst[i]*lst[i]*lst[i];         }         else{             sum += lst[i];         }     }     return sum; }
let sum = 0; 	for (let i = 0; i < lst.length; i++){ 		if (i % 3 == 0){ 			sum += lst[i]**2; 		} else if (i % 4 == 0 && i % 3 != 0){ 			sum += lst[i]**3; 		} else { 			sum += lst[i]; 		} 	} 	return sum; }
var sum = 0; 	if (lst.length == 0){ 		return 0; 	} 	for (var i = 0; i < lst.length; i++){ 		if (i % 3 == 0 && i % 4 != 0){ 			sum += Math.pow(lst[i], 2); 		} 		else if (i % 4 == 0 && i % 3 != 0){ 			sum += Math.pow(lst[i], 3); 		} 		else { 			sum += lst[i]; 		} 	} 	return sum; }
var sum = 0; 	for(var i = 0; i < lst.length; i++){ 		if(i % 3 == 0 && i % 4 != 0){ 			sum += lst[i] * lst[i]; 		} 		else if(i % 4 == 0 && i % 3 != 0){ 			sum += lst[i] * lst[i] * lst[i]; 		} 		else{ 			sum += lst[i]; 		} 	} 	return sum; }
var sum = 0;     for (var i = 0; i < lst.length; i++){         if (i % 3 == 0){             sum += lst[i] * lst[i];         } else if (i % 4 == 0 && i % 3 != 0){             sum += lst[i] * lst[i] * lst[i];         } else {             sum += lst[i];         }     }     return sum; }
// Your code here 	var sum = 0; 	for (var i = 0; i < lst.length; i++) { 		if (i % 3 == 0 && i % 4 != 0) { 			sum += Math.pow(lst[i], 2); 		} 		else if (i % 4 == 0 && i % 3 != 0) { 			sum += Math.pow(lst[i], 3); 		} 		else { 			sum += lst[i]; 		} 	} 	return sum; }
if(lst.length == 0){     return 0;   }   var sum = 0;   for(var i = 0; i < lst.length; i++){     if(i % 3 == 0){       sum += lst[i] ** 2;     }     else if(i % 4 == 0 && i % 3 != 0){       sum += lst[i] ** 3;     }     else{       sum += lst[i];     }   }   return sum; }
var sum = 0;     if (lst.length > 0){         for (var i = 0; i < lst.length; i++){             if (i % 3 == 0 && i % 4 != 0){                 sum += Math.pow(lst[i], 2);             } else if (i % 4 == 0){                 sum += Math.pow(lst[i], 3);             } else {                 sum += lst[i];             }         }     }     return sum; }
var sum = 0;     for (var i = 0; i < lst.length; i++){         if (i % 3 == 0){             sum += Math.pow(lst[i], 2);         } else if (i % 4 == 0){             sum += Math.pow(lst[i], 3);         } else {             sum += lst[i];         }     }     return sum; }
// make a copy of the list     let lst_ = lst.slice();     for (let i = 0; i < lst_.length; i++){         // check if the index is a multiple of 3         if ((i+1) % 3 == 0){             // square it              lst_[i] = lst_[i] * lst_[i];         }         // check if the index is a multiple of 4         if ((i+1) % 4 == 0){             // cube it             lst_[i] = lst_[i] * lst_[i] * lst_[i];         }     }     // sum up the list     let sum = 0;     for (let i = 0; i < lst_.length; i++){         sum += lst_[i];     }     return sum; }
for(var i = 0; i < lst.length; i++){ 		if(i % 3 == 0 && i % 4 != 0){ 			lst[i] = lst[i] * lst[i]; 		} 		else if(i % 4 == 0 && i % 3 != 0){ 			lst[i] = lst[i] * lst[i] * lst[i]; 		} 	} 	return lst.reduce(function(a,b){return a+b;}); }
for(var i = 0; i < lst.length; i++){         if(i % 3 == 0){             lst[i] = lst[i] * lst[i];         }         if(i % 4 == 0 && i % 3 != 0){             lst[i] = lst[i] * lst[i] * lst[i];         }     }     var sum = 0;     for(var j = 0; j < lst.length; j++){         sum += lst[j];     }     return sum; }  var list1 = [1,2,3]; var list2 = []; var list3 = [-1,-5,2,-1,-5];
var sum = 0;     if (lst.length == 0){         return 0;     }     for (var i = 0; i < lst.length; i++){         if (i % 3 == 0 && i % 4 != 0){             sum += Math.pow(lst[i], 2);         }         else if (i % 4 == 0 && i % 3 != 0){             sum += Math.pow(lst[i], 3);         }         else {             sum += lst[i];         }     }     return sum; }
var sum = 0;     var counter = 0;     for (i = 0; i < lst.length; i++){         if (counter == 3){             counter += 1;             sum += lst[i]**2;         } else if (counter == 4){             counter = 1;             sum += lst[i]**3;         } else {             counter += 1;             sum += lst[i];         }     }     return sum; }
var output=""; 	var vowels = ['a','e','i','o','u']; 	for(var i=0;i<message.length;i++){ 		var letter = message[i]; 		var n = message.charCodeAt(i); 		//console.log(n); 		if(n >96 && n<123){ 			n = n-32; 			//console.log(n); 			output += String.fromCharCode(n); 		}else if(n>64 && n<91){ 			n = n+32; 			output += String.fromCharCode(n); 		}else{ 			output += message[i]; 		} 	} 	console.log(output); 	var output2=""; 	for(var i=0;i<output.length;i++){ 		var letter = output[i]; 		var n = output.charCodeAt(i); 		//console.log(n); 		if(n>96 && n<123){ 			if(n==97){ 				n=99; 			}else if(n==101){ 				n=103; 			}else if(n==105){ 				n=107; 			}else if(n==111){ 				n=113; 			}else if(n==117){ 				n=119; 			}else{ 				n+=2; 			} 			output2 += String.fromCharCode(n); 		}else{ 			output2 += output[i]; 		} 	} 	console.log(output2); } encode('test'); encode('This is a message'); encode('Hello World');
var encode = { 		a: "c", 		e: "g", 		i: "k", 		o: "q", 		u: "w", 	}; 	var result = []; 	for (var i = 0; i < message.length; i++) { 		var letter = message[i]; 		if (letter.toUpperCase() === letter){ 			letter = letter.toLowerCase(); 		} else { 			letter = letter.toUpperCase(); 		} 		if (encode[letter]){ 			result.push(encode[letter]); 		} else { 			result.push(letter); 		} 	} 	return result.join(""); }
//turn message into array, split by letters 	var messageArr = message.split(''); 	//turn letters into ascii codes 	var asciiArr = []; 	for (var i = 0; i < messageArr.length; i++) { 		asciiArr.push(messageArr[i].charCodeAt(0)); 	} 	//incrment ascii codes 	var newAsciiArr = []; 	for (var i = 0; i < asciiArr.length; i++) { 		newAsciiArr.push(asciiArr[i] + 2); 	} 	//turn ascii codes into letters 	var newMessageArr = []; 	for (var i = 0; i < newAsciiArr.length; i++) { 		newMessageArr.push(String.fromCharCode(newAsciiArr[i])); 	} 	//join letters into a message 	var newMessage = newMessageArr.join(''); 	return newMessage; } var a = encode('this is a message');
var code = "";     var codeList = {'A':'C', 'E':'G', 'I':'K', 'O':'Q', 'U':'W', 'Y':'A',                     'a':'c', 'e':'g', 'i':'k', 'o':'q', 'u':'w', 'y':'a'};     for (var i = 0; i < message.length; i++){         if (message[i] in codeList){             code += codeList[message[i]];         } else {             code += message[i];         }     }     return code; }
var vowels = ['a','e','i','o','u']; 	var encoded_message = ""; 	for(var i = 0; i < message.length; i++){ 		var current_letter = message[i]; 		var index_of_vowel = vowels.indexOf(current_letter.toLowerCase()); 		if(index_of_vowel != -1){ 			var new_index = index_of_vowel + 2; 			if(new_index > 4){ 				new_index = new_index - 5; 			} 			if(current_letter == current_letter.toUpperCase()){ 				encoded_message += vowels[new_index].toUpperCase(); 			} 			else{ 				encoded_message += vowels[new_index]; 			} 		} 		else{ 			if(current_letter == current_letter.toUpperCase()){ 				encoded_message += current_letter.toLowerCase(); 			} 			else{ 				encoded_message += current_letter.toUpperCase(); 			} 		} 	} 	return encoded_message; }
var output = '';     for(var i = 0; i < message.length; i++){         var letter = message[i];         if(letter === letter.toUpperCase()){             output += letter.toLowerCase();         } else {             output += letter.toUpperCase();         }     }     return output; }
var vowels = ['a', 'e', 'i', 'o', 'u'];     var encoded = [];     for (var i = 0; i < message.length; i++){         if (vowels.indexOf(message[i]) != -1){             encoded.push(vowels[(vowels.indexOf(message[i]) + 2) % 5]);         } else if (message[i] == message[i].toUpperCase()){             encoded.push(message[i].toLowerCase());         } else {             encoded.push(message[i].toUpperCase());         }     }     return encoded.join(''); }
var alphabet = "abcdefghijklmnopqrstuvwxyz";     var vowel = "aeiou";     var result = "";     //index     var a = 0;     var b = 0;     var newIndex = 0;     var i = 0;     //loop     for(i = 0; i < message.length; i++){         a = alphabet.indexOf(message[i]);         b = vowel.indexOf(message[i]);         //checks if lowercase         if(a >= 0 && a < alphabet.length){             if(message[i] === message[i].toUpperCase()){                 //adds 2 to index, changes to lowercase                 newIndex = a + 2;                 if(newIndex >= alphabet.length){                     newIndex = newIndex - alphabet.length;                 }                 result += alphabet[newIndex].toUpperCase();             }else{                 //adds 2 to index                 newIndex = a + 2;                 if(newIndex >= alphabet.length){                     newIndex = newIndex - alphabet.length;                 }                 result += alphabet[newIndex];             }         }         //checks if vowel         else if(b >= 0 && b < vowel.length){             if(message[i] === message[i].toUpperCase()){                 //adds 2 to index, changes to lowercase                 newIndex = b + 2;                 if(newIndex >= vowel.length){                     newIndex = newIndex - vowel.length;                 }                 result += vowel[newIndex].toUpperCase();             }else{                 //adds 2 to index                 newIndex = b + 2;                 if(newIndex >= vowel.length){                     newIndex = newIndex - vowel.length;                 }                 result += vowel[newIndex];             }         }         //if neither add the original letter         else{             result += message[i];         }     }     return result; }
var vowels = 'aeiouAEIOU';     var chars = message.split('');     for(var i = 0; i < chars.length; i++){         var charCode = chars[i].charCodeAt(0);         var index = vowels.indexOf(chars[i]);         if(index > -1){             if(index > 3){                 charCode += 2;             } else {                 charCode += 10;             }         } else {             if(charCode > 90){                 charCode -= 32;             } else {                 charCode += 32;             }         }         chars[i] = String.fromCharCode(charCode);     }     return chars.join(''); }
let alpha = 'abcdefghijklmnopqrstuvwxyz'     let result = message.split('').map(function(letter){         if(letter.toLowerCase() === letter){             return alpha[(alpha.indexOf(letter) + 2) % 26]         }         else{             return alpha[(alpha.indexOf(letter.toLowerCase()) + 2) % 26].toUpperCase()         }     })     return result.join('') }
var vowels = ['a', 'e', 'i', 'o', 'u'];   var encodedMessage = '';   for (var i = 0; i < message.length; i++) {     var char = message[i];     if (char === char.toUpperCase()) {       char = char.toLowerCase();     } else {       char = char.toUpperCase();     }     if (vowels.indexOf(char) > -1) {       if (char === 'u') {         char = 'a';       } else {         char = vowels[vowels.indexOf(char) + 1];       }     }     encodedMessage += char;   }   return encodedMessage; }
message = message.toLowerCase();     var result = "";     for(var i = 0; i < message.length; i++){         if(message[i]=="a"){             result += "c";         }else if(message[i]=="e"){             result += "g";         }else if(message[i]=="i"){             result += "k";         }else if(message[i]=="o"){             result += "q";         }else if(message[i]=="u"){             result += "y";         }else if(message[i]=="t"){             result += "G";         }else if(message[i]=="h"){             result += "K";         }else if(message[i]=="s"){             result += "C";         }else if(message[i]=="m"){             result += "M";         }else if(message[i]=="a"){             result += "C";         }else if(message[i]=="g"){             result += "S";         }else{             result += message[i];         }     }     return result; }
var results = '';   var alphabet = 'abcdefghijklmnopqrstuvwxyz';   for (var i = 0; i < message.length; i++) {     var char = message[i];     if (alphabet.indexOf(char.toLowerCase()) === -1) {       results += char;     } else if (char === char.toUpperCase()) {       results += alphabet[alphabet.indexOf(char.toLowerCase()) + 2].toUpperCase();     } else {       results += alphabet[alphabet.indexOf(char) + 2];     }   }   return results; }
var new_mess = message.split(" ");     var final_mess = [];     var alphabet = ["a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z"];     for(var i = 0; i < new_mess.length; i++){       var new_word = new_mess[i].split("");       var final_word = [];       for(var j = 0; j < new_word.length; j++){         if(new_word[j] === new_word[j].toUpperCase()){           var low = new_word[j].toLowerCase();           var index = alphabet.indexOf(low);           if(index === alphabet.length-2){             var new_letter = alphabet[0];             final_word.push(new_letter.toUpperCase());           }else if(index === alphabet.length-1){             var new_letter = alphabet[1];             final_word.push(new_letter.toUpperCase());           }else{             var new_letter = alphabet[index+2];             final_word.push(new_letter.toUpperCase());           }         }else{           var low = new_word[j].toLowerCase();           var index = alphabet.indexOf(low);           if(index === alphabet.length-2){             var new_letter = alphabet[0];             final_word.push(new_letter);           }else if(index === alphabet.length-1){             var new_letter = alphabet[1];             final_word.push(new_letter);           }else{             var new_letter = alphabet[index+2];             final_word.push(new_letter);           }         }       }       final_mess.push(final_word.join(""));     }     return final_mess.join(" "); }
vowels = { 		a: 'c', 		e: 'g', 		i: 'k', 		o: 'q', 		u: 'y' 	} 	var message = message.toLowerCase(); 	var result = ''; 	for (var i = 0; i < message.length; i++) { 		if (vowels[message[i]]){ 			result += vowels[message[i]]; 		} else { 			result += message[i]; 		} 	} 	console.log(result.toUpperCase()); } encode('This is a message');
const vowels = ['a', 'e', 'i', 'o', 'u'];     var letters = [];     for (var i = 0; i < message.length; i++){         letters.push(message[i]);     }     for (var j = 0; j < letters.length; j++){         var shift = letters[j].charCodeAt(0);         if (shift >= 65 && shift <= 90){             var newShift = shift + 32;             letters[j] = String.fromCharCode(newShift);         }         else if (shift >= 97 && shift <= 122){             newShift = shift - 32;             letters[j] = String.fromCharCode(newShift);         }         if (vowels.includes(letters[j])){             if (letters[j] === 'u'){                 letters[j] = 'a';             }             else {                 var newVowel = letters[j].charCodeAt(0) + 2;                 letters[j] = String.fromCharCode(newVowel);             }         }     }     return letters.join(''); }
// your code here }
var vowels = ['a', 'e', 'i', 'o', 'u'];     var encoded = "";     // if (typeof message != "string"){     //     throw "Value given was not a string";     // }     for (var i = 0; i < message.length; i++){         if (vowels.indexOf(message[i].toLowerCase()) !== -1){             if (message[i] === message[i].toUpperCase()){                 encoded += vowels[vowels.indexOf(message[i].toLowerCase()) + 2].toUpperCase();             } else {                 encoded += vowels[vowels.indexOf(message[i].toLowerCase()) + 2];             }         } else if (message[i] === message[i].toUpperCase()){             encoded += message[i].toLowerCase();         } else {             encoded += message[i].toUpperCase();         }     }     return encoded; }
var alphabet = 'abcdefghijklmnopqrstuvwxyz';     var alphabet_array = alphabet.split('');     var encoded_message = '';     var message_array = message.split('');     var vowels = 'aeiou'.split('');     var alphabet_position = 0;     var message_position = 0;     for (var i = 0; i < message_array.length; i++){         alphabet_position = alphabet_array.indexOf(message_array[i]);         message_position = vowels.indexOf(message_array[i]);         if (message_array[i] === message_array[i].toUpperCase()){             alphabet_position = alphabet_array.indexOf(message_array[i].toLowerCase());             if (message_position === -1){                 encoded_message += alphabet_array[alphabet_position].toUpperCase();             } else {                 encoded_message += vowels[message_position + 2].toUpperCase();             }         } else {             if (message_position === -1){                 encoded_message += alphabet_array[alphabet_position];             } else {                 encoded_message += vowels[message_position + 2];             }         }     }     return encoded_message; }
return Math.floor(Math.pow(n,2)/2); }
//TODO }
var L = []; 	var R = []; 	var l = 1; 	var r = 1; 	var collisions = 0; 	var max_index = n; 	for(var i = 0; i < n; i++){ 		L.push(l); 		R.push(r); 		l++; 		r++; 	} 	for(var i = 0; i < n; i++){ 		if(L[i] == R[max_index]){ 			collisions++; 			max_index--; 		} 	} 	return collisions; }
//YOUR CODE GOES HERE }
let collisions = 0;   for (let i = 0; i < n; i++) {     for (let j = 0; j < n; j++) {       if (j !== i){         collisions += 1;       }     }   }   return collisions; }
let A = [...Array(n)].map(e => Math.random());     let B = [...Array(n)].map(e => Math.random());     let collision_count = 0;     for(let i = 0; i < n; i++){         for(let j = 0; j < n; j++){             if(A[i] > B[j]){                 collision_count++;             }         }     }     return collision_count; }
//loop through the left to right cars and the right to left cars 	//see if the left car is farther than the right car 	//count the number of times that happens 	//return the count 	let count = 0; 	for(let i = 0; i < n; i++){ 		for(let j = 0; j < n; j++){ 			if(i > j){ 				count += 1; 			} 		} 	} 	return count; }
}
return 0; }
return n * (n - 1) / 2; }
return n*(n-1)/2; }
var carsLeft = Array.apply(null, {length: n}).map(Number.call, Number)     var carsRight = Array.apply(null, {length: n}).map(Number.call, Number)     var collisions = 0     for(var i = 0; i < n; i++){         if(carsLeft[i] < carsRight[i]){             collisions++         }     }     return collisions }
var counter = 0;     for(var i = 0; i < n; i++){         for(var j = 0; j < n; j++){             counter++;         }     }     return counter; }
}
return n * (n - 1) / 2; }
return n * (n - 1); }
return n*(n-1); }
return car_race_collision(n, n-1); }
//We are going to implement a sorting algorithm in which the     //left to right cars are sorted in increasing order.     //Then the right to left cars are sorted in decreasing order.     //The number of collisions is equal to the sum of the number of     //keys which are in the wrong place in the left-to-right array, plus     //the number of keys which are in the wrong place in the right-to-left array.     var i, collis = 0;     var left_to_right = new Array(n);     var right_to_left = new Array(n);     for (i = 0; i < n; i++) {         left_to_right[i] = n - i;         right_to_left[i] = i + 1;     }     //Only a fraction of the cars are in an incorrect location     //to the left of their actual location.     for (i = 0; i < n / 2; i++) {         //I will now swap left_to_right[i] with a random car to the right of left_to_right[i].         var i_target = i + 1 + Math.floor(Math.random() * (n - i - 1));         //i_target has to be in the range [i+1, n-1].         //i_target must be != i.         var tmp = left_to_right[i];         left_to_right[i] = left_to_right[i_target];         left_to_right[i_target] = tmp;     }     //Now, left_to_right[i] is in the wrong place for exactly i of the cars.     for (i = 0; i < n; i++) {         //If left_to_right[i] is not in the right place,         //then the car that's supposed to be in left_to_right[i]         //must be in the wrong place in right_to_left.         //Therefore, in the following "if" condition, we check if         //left_to_right[i] is not in the right place.         if (left_to_right[i] !=
return text === reverse(text); }
if (text == '') { 		return true; 	}  	if (text[0] == text[text.length - 1]) { 		return is_palindrome(text.slice(1, -1)); 	}  	return false; }
if (text.length <= 1){         return true;     } else if (text[0] == text[text.length - 1]){         return is_palindrome(text.slice(1, text.length - 1));     } else {         return false;     } }
var palindrome = text.split('').reverse().join('');     var result = palindrome === text;     return result; }
text = text.toLowerCase();     let reverseText = '';     for(let i = text.length - 1; i >= 0; i--){         reverseText += text[i];     }     return reverseText === text; }
if(text == ''){         return true;     }     else if(text[0] == text[text.length-1]){         return is_palindrome(text.slice(1,text.length-1));     }     else{         return false;     } }
if (text.length == 0){         return true;     } else {         if (text[0] == text[text.length - 1]){             return is_palindrome(text.slice(1, text.length - 1));         } else {             return false;         }     } }
return text == text.split('').reverse().join(''); }
var len = text.length;   for (var i = 0; i < Math.floor(len/2); i++) {     if (text[i] !== text[len - 1 - i]) {       return false;     }   }   return true; }
var reverseText = reverse(text);   return text == reverseText; }
//// YOUR CODE HERE     return false; }  test(is_palindrome(''), true); test(is_palindrome('aba'), true); test(is_palindrome('aaaaa'), true); test(is_palindrome('zbcd'), false);
if (text.length == 0) 		return true; 	return text[0] == text[text.length-1] && is_palindrome(text.slice(1,text.length-1)); }
if (text.length==0){ 		return true; 	} 	else if (text.length==1){ 		return true; 	} 	else if (text[0]==text[text.length-1]){ 		return is_palindrome(text.slice(1, text.length-1)); 	} 	else{ 		return false; 	} }
return text == reverse(text); }
return text.split('').reverse().join('') == text; }
if (text.length <= 1){         return true;     } else if (text[0] != text[text.length - 1]){         return false;     } else {         return is_palindrome(text.slice(1, text.length - 1));     } }
if (text.length < 2) {         return true;     }     else if (text[0] === text[text.length - 1]) {         return is_palindrome(text.slice(1, text.length - 1));     }     else {         return false;     } }
var n = text.length   for (var i = 0; i < n/2; i++){     if (text[i] != text[n-i-1]){       return false     }   }   return true }
return text === text.split('').reverse().join(''); }
const gradeMap = {         '4.0': 'A+',         '3.7': 'A',         '3.3': 'A-',         '3.0': 'B+',         '2.7': 'B',         '2.3': 'B-',         '2.0': 'C+',         '1.7': 'C',         '1.3': 'C-',         '1.0': 'D+',         '0.7': 'D',         '0.0': 'D-',         '-1.0': 'E'     }     return grades.map(num => gradeMap[Object.keys(gradeMap).reduce((acc, numKey) => parseFloat(numKey) < num ? numKey : acc, '-1.0')]) }
var letter_grades = [];     for(var i = 0; i < grades.length; i++){         if(grades[i] >= 4.0){             letter_grades.push('A+');         }         else if(grades[i] >= 3.7){             letter_grades.push('A');         }         else if(grades[i] >= 3.3){             letter_grades.push('A-');         }         else if(grades[i] >= 3.0){             letter_grades.push('B+');         }         else if(grades[i] >= 2.7){             letter_grades.push('B');         }         else if(grades[i] >= 2.3){             letter_grades.push('B-');         }         else if(grades[i] >= 2.0){             letter_grades.push('C+');         }         else if(grades[i] >= 1.7){             letter_grades.push('C');         }         else if(grades[i] >= 1.3){             letter_grades.push('C-');         }         else if(grades[i] >= 1.0){             letter_grades.push('D+');         }         else if(grades[i] >= 0.7){             letter_grades.push('D');         }         else if(grades[i] >= 0.0){             letter_grades.push('D-');         }         else if(grades[i] == 0.0){             letter_grades.push('E');         }     }     return letter_grades; }
var output = [];     for(var i = 0; i < grades.length; i++){         if(grades[i] == 4.0){             output.push('A+');         }         else if(grades[i] > 3.7){             output.push('A');         }         else if(grades[i] > 3.3){             output.push('A-');         }         else if(grades[i] > 3.0){             output.push('B+');         }         else if(grades[i] > 2.7){             output.push('B');         }         else if(grades[i] > 2.3){             output.push('B-');         }         else if(grades[i] > 2.0){             output.push('C+');         }         else if(grades[i] > 1.7){             output.push('C');         }         else if(grades[i] > 1.3){             output.push('C-');         }         else if(grades[i] > 1.0){             output.push('D+');         }         else if(grades[i] > 0.7){             output.push('D');         }         else if(grades[i] > 0.0){             output.push('D-');         }         else{             output.push('E');         }     }     return output; }
let letterGrades = [];     for(let i = 0; i < grades.length; i++){         if(grades[i] === 4.0){             letterGrades.push('A+');         }         else if(grades[i] >= 3.7){             letterGrades.push('A');         }         else if(grades[i] >= 3.3){             letterGrades.push('A-');         }         else if(grades[i] >= 3.0){             letterGrades.push('B+');         }         else if(grades[i] >= 2.7){             letterGrades.push('B');         }         else if(grades[i] >= 2.3){             letterGrades.push('B-');         }         else if(grades[i] >= 2.0){             letterGrades.push('C+');         }         else if(grades[i] >= 1.7){             letterGrades.push('C');         }         else if(grades[i] >= 1.3){             letterGrades.push('C-');         }         else if(grades[i] >= 1.0){             letterGrades.push('D+');         }         else if(grades[i] >= 0.7){             letterGrades.push('D');         }         else if(grades[i] >= 0.0){             letterGrades.push('D-');         }         else{             letterGrades.push('E');         }     }     return letterGrades; }
let scale = {4.0:'A+', 3.7:'A', 3.3:'A-', 3.0:'B+', 2.7:'B', 2.3:'B-', 2.0:'C+', 1.7:'C', 1.3:'C-', 1.0:'D+', 0.7:'D', 0.0:'D-', 'E':0};     return grades.map(grade => {         if(grade === 0) return 'E';         for(let key in scale){             if(grade > key) return scale[key];         }     }); }
let letter_grades = [];     let a = null;     for(let i = 0; i < grades.length; i++){         if(grades[i] == 4.0){             a = 'A+';         }         else if(grades[i] > 3.7){             a = 'A';         }         else if(grades[i] > 3.3){             a = 'A-';         }         else if(grades[i] > 3.0){             a = 'B+';         }         else if(grades[i] > 2.7){             a = 'B';         }         else if(grades[i] > 2.3){             a = 'B-';         }         else if(grades[i] > 2.0){             a = 'C+';         }         else if(grades[i] > 1.7){             a = 'C';         }         else if(grades[i] > 1.3){             a = 'C-';         }         else if(grades[i] > 1.0){             a = 'D+';         }         else if(grades[i] > 0.7){             a = 'D';         }         else if(grades[i] > 0.0){             a = 'D-';         }         else if(grades[i] == 0.0){             a = 'E';         }         letter_grades.push(a);     }     return letter_grades; }
let letter_grades = grades.map(function(grade){         if(grade == 4.0){             return 'A+';         }         else if(grade > 3.7){             return 'A';         }         else if(grade > 3.3){             return 'A-';         }         else if(grade > 3.0){             return 'B+';         }         else if(grade > 2.7){             return 'B';         }         else if(grade > 2.3){             return 'B-';         }         else if(grade > 2.0){             return 'C+';         }         else if(grade > 1.7){             return 'C';         }         else if(grade > 1.3){             return 'C-';         }         else if(grade > 1.0){             return 'D+';         }         else if(grade > 0.7){             return 'D';         }         else if(grade > 0.0){             return 'D-';         }         else{             return 'E';         }     });     return letter_grades; }
const grade_table = {     'A+': 4.0,     'A': 3.7,     'A-': 3.3,     'B+': 3.0,     'B': 2.7,     'B-': 2.3,     'C+': 2.0,     'C': 1.7,     'C-': 1.3,     'D+': 1.0,     'D': 0.7,     'D-': 0.0,     'E': 0.0   }   return grades.map(grade => {     return Object.keys(grade_table).find(key => grade_table[key] <= grade)   }) }
const Grade = {         "4.0" : 'A+',         "3.7" : 'A',         "3.3" : 'A-',         "3.0" : 'B+',         "2.7" : 'B',         "2.3" : 'B-',         "2.0" : 'C+',         "1.7" : 'C',         "1.3" : 'C-',         "1.0" : 'D+',         "0.7" : 'D',         "0.0" : 'D-',         "-0.1" : 'E'     }     let grade = []     for(let i = 0; i < grades.length; i++){         let key = ''         for(let j = 4.0; j >= -0.1; j -= 0.3){             if(grades[i] >= j){                 key = j.toString()                 break             }         }         grade.push(Grade[key])     }     return grade }
var grades = [].slice.call(arguments);     var letters = [];     grades.forEach(function(grade){         switch(true){             case (grade >= 4.0):                 letters.push('A+');                 break;             case (grade > 3.7):                 letters.push('A');                 break;             case (grade > 3.3):                 letters.push('A-');                 break;             case (grade > 3.0):                 letters.push('B+');                 break;             case (grade > 2.7):                 letters.push('B');                 break;             case (grade > 2.3):                 letters.push('B-');                 break;             case (grade > 2.0):                 letters.push('C+');                 break;             case (grade > 1.7):                 letters.push('C');                 break;             case (grade > 1.3):                 letters.push('C-');                 break;             case (grade > 1.0):                 letters.push('D+');                 break;             case (grade > 0.7):                 letters.push('D');                 break;             case (grade > 0.0):                 letters.push('D-');                 break;             case (grade == 0.0):                 letters.push('E');                 break;         }     });     return letters; }
let result = [];     for(let i = 0; i < grades.length; i++){         if(grades[i] == 4.0){             result.push('A+');         }         else if(grades[i] > 3.7){             result.push('A');         }         else if(grades[i] > 3.3){             result.push('A-');         }         else if(grades[i] > 3.0){             result.push('B+');         }         else if(grades[i] > 2.7){             result.push('B');         }         else if(grades[i] > 2.3){             result.push('B-');         }         else if(grades[i] > 2.0){             result.push('C+');         }         else if(grades[i] > 1.7){             result.push('C');         }         else if(grades[i] > 1.3){             result.push('C-');         }         else if(grades[i] > 1.0){             result.push('D+');         }         else if(grades[i] > 0.7){             result.push('D');         }         else if(grades[i] > 0.0){             result.push('D-');         }         else{             result.push('E');         }     }     return result; }
let grades_obj = { 		'4.0': 'A+', 		'3.7': 'A', 		'3.3': 'A-', 		'3.0': 'B+', 		'2.7': 'B', 		'2.3': 'B-', 		'2.0': 'C+', 		'1.7': 'C', 		'1.3': 'C-', 		'1.0': 'D+', 		'0.7': 'D', 		'0.0': 'D-', 		'0.0': 'E' 	} 	let solution = []; 	for(let i=0; i<grades.length; i++){ 		let current_grade = String(grades[i]); 		if(current_grade.includes('.')){ 			if(current_grade[2] === '7'){ 				if(current_grade[3] > '4'){ 					current_grade = current_grade.slice(0,2) + '7'; 				} else { 					current_grade = current_grade.slice(0,2) + '3'; 				} 			} else if(current_grade[2] === '3'){ 				if(current_grade[3] > '4'){ 					current_grade = current_grade.slice(0,2) + '3'; 				} else { 					current_grade = current_grade.slice(0,2) + '0'; 				} 			} else if(current_grade[2] === '0'){ 				if(current_grade[3] > '4'){ 					current_grade = current_grade.slice(0,2) + '0'; 				} else { 					current_grade = current_grade.slice(0,2) + '7'; 				}
const letter_grade = {         "A+": 4.0,         "A": 3.7,         "A-": 3.3,         "B+": 3.0,         "B": 2.7,         "B-": 2.3,         "C+": 2.0,         "C": 1.7,         "C-": 1.3,         "D+": 1.0,         "D": 0.7,         "D-": 0.0,         "E": 0.0     }     let result = []     grades.forEach(grade => {         for(key in letter_grade){             if(grade >= letter_grade[key]){                 result.push(key)                 break             }         }     })     return result }
var grades_letter = []; 	var grades_letter_format = function(grade){ 		if(grade >= 4.0){ 			return "A+"; 		} 		else if(grade >= 3.7){ 			return "A"; 		} 		else if(grade >= 3.3){ 			return "A-"; 		} 		else if(grade >= 3.0){ 			return "B+"; 		} 		else if(grade >= 2.7){ 			return "B"; 		} 		else if(grade >= 2.3){ 			return "B-"; 		} 		else if(grade >= 2.0){ 			return "C+"; 		} 		else if(grade >= 1.7){ 			return "C"; 		} 		else if(grade >= 1.3){ 			return "C-"; 		} 		else if(grade >= 1.0){ 			return "D+"; 		} 		else if(grade >= 0.7){ 			return "D"; 		} 		else if(grade >= 0.0){ 			return "D-"; 		} 		else if(grade >= -1.0){ 			return "E"; 		} 		else{ 			return "error"; 		} 	} 	grades.forEach(function(grade){ 		grades_letter.push(grades_letter_format(grade)); 	}); 	return grades_letter; }
var result = [];   for(i = 0; i < grades.length; i++){     if(grades[i] >= 4.0){       result.push('A+');     }     else if(grades[i] >= 3.7){       result.push('A');     }     else if(grades[i] >= 3.3){       result.push('A-');     }     else if(grades[i] >= 3.0){       result.push('B+');     }     else if(grades[i] >= 2.7){       result.push('B');     }     else if(grades[i] >= 2.3){       result.push('B-');     }     else if(grades[i] >= 2.0){       result.push('C+');     }     else if(grades[i] >= 1.7){       result.push('C');     }     else if(grades[i] >= 1.3){       result.push('C-');     }     else if(grades[i] >= 1.0){       result.push('D+');     }     else if(grades[i] >= 0.7){       result.push('D');     }     else if(grades[i] >= 0.0){       result.push('D-');     }     else if(grades[i] < 0.0){       result.push('E');     }   }   return result; }
return grades.map(grade => {     if (grade >= 4.0) return 'A+';     if (grade >= 3.7) return 'A';     if (grade >= 3.3) return 'A-';     if (grade >= 3.0) return 'B+';     if (grade >= 2.7) return 'B';     if (grade >= 2.3) return 'B-';     if (grade >= 2.0) return 'C+';     if (grade >= 1.7) return 'C';     if (grade >= 1.3) return 'C-';     if (grade >= 1.0) return 'D+';     if (grade >= 0.7) return 'D';     if (grade >= 0.0) return 'D-';     return 'E';   }); }
return grades.map(grade => {         if (grade > 4.0) return 'Invalid';         if (grade > 3.7) return 'A+';         if (grade > 3.3) return 'A';         if (grade > 3.0) return 'A-';         if (grade > 2.7) return 'B+';         if (grade > 2.3) return 'B';         if (grade > 2.0) return 'B-';         if (grade > 1.7) return 'C+';         if (grade > 1.3) return 'C';         if (grade > 1.0) return 'C-';         if (grade > 0.7) return 'D+';         if (grade > 0.0) return 'D';         if (grade > -1.0) return 'D-';         return 'E';     }); }
var grades = grades.map(function(val){     if(val < 0.7)       return "E";     else if(val < 1.0)       return "D-";     else if(val < 1.3)       return "D";     else if(val < 1.7)       return "D+";     else if(val < 2.0)       return "C-";     else if(val < 2.3)       return "C";     else if(val < 2.7)       return "C+";     else if(val < 3.0)       return "B-";     else if(val < 3.3)       return "B";     else if(val < 3.7)       return "B+";     else if(val < 4.0)       return "A-";     else       return "A+";   });   return grades; }
let result = [];     for(let i = 0; i < grades.length; i++){         if(grades[i] >= 4.0){             result.push('A+');         }else if(grades[i] >= 3.7){             result.push('A');         }else if(grades[i] >= 3.3){             result.push('A-');         }else if(grades[i] >= 3.0){             result.push('B+');         }else if(grades[i] >= 2.7){             result.push('B');         }else if(grades[i] >= 2.3){             result.push('B-');         }else if(grades[i] >= 2.0){             result.push('C+');         }else if(grades[i] >= 1.7){             result.push('C');         }else if(grades[i] >= 1.3){             result.push('C-');         }else if(grades[i] >= 1.0){             result.push('D+');         }else if(grades[i] >= 0.7){             result.push('D');         }else if(grades[i] >= 0.0){             result.push('D-');         }else{             result.push('E');         }     }     return result; }
// your code here     let largest_negative = null;     let smallest_positive = null;     if (lst.length === 0) {         return [largest_negative, smallest_positive];     }     for (let i = 0; i < lst.length; i++) {         let a = lst[i];         if (a < 0) {             if (largest_negative === null) {                 largest_negative = a;             } else if (a > largest_negative) {                 largest_negative = a;             }         } else if (a > 0) {             if (smallest_positive === null) {                 smallest_positive = a;             } else if (a < smallest_positive) {                 smallest_positive = a;             }         }     }     return [largest_negative, smallest_positive]; }
// Your code goes here   let l;   let s;   let neg = lst.filter(x => x < 0).sort((a,b) => b-a);   let pos = lst.filter(x => x > 0).sort((a,b) => a-b);   if (neg.length > 0) {     l = neg[0];   } else {     l = null;   }   if (pos.length > 0) {     s = pos[0];   } else {     s = null;   }   return [l, s]; }
return "("+lst.reduce((a, b) => b < 0 ? b : a,0)+","+lst.reduce((a, b) => b > 0 ? b : a,0)+")"; }
return [lst.reduce((a, c) => a < c && c < 0 ? c : a, lst[0]),             lst.reduce((a, c) => a > c && c > 0 ? c : a, lst[0])] }
var small = null;   var large = null;   if (lst.length === 0) {     return [large, small];   }   else {     small = lst[0];     large = lst[0];     for (i = 0; i < lst.length; i++) {       if (lst[i] > 0 && lst[i] < small) {         small = lst[i];       }       if (lst[i] < 0 && lst[i] > large) {         large = lst[i];       }     }     return [large, small];   } }
var neg = [];     var pos = [];     for(var i = 0; i < lst.length; i++){         if(lst[i] >= 0){             pos.push(lst[i]);         }         else if(lst[i] < 0){             neg.push(lst[i]);         }     }     var maxNeg = neg[0];     var minPos = pos[0];     for(var j = 0; j < neg.length; j++){         if(neg[j] > maxNeg){             maxNeg = neg[j];         }     }     for(var k = 0; k < pos.length; k++){         if(pos[k] < minPos){             minPos = pos[k];         }     }     return [maxNeg, minPos]; }
if (lst.length == 0){     return [null, null];   }   var largestNegative = null;   var smallestPositive = null;   for (var i = 0; i < lst.length; i++){     if (lst[i] < 0){       if (largestNegative == null){         largestNegative = lst[i];       }       else if (lst[i] > largestNegative){         largestNegative = lst[i];       }     }     else if (lst[i] > 0){       if (smallestPositive == null){         smallestPositive = lst[i];       }       else if (lst[i] < smallestPositive){         smallestPositive = lst[i];       }     }   }   return [largestNegative, smallestPositive]; }
let largest = null;     let smallest = null;     for(let i = 0; i < lst.length; i++){         if(lst[i] < 0){             if(largest === null){                 largest = lst[i];             }else if(lst[i] > largest){                 largest = lst[i];             }         }else if(lst[i] > 0){             if(smallest === null){                 smallest = lst[i];             }else if(lst[i] < smallest){                 smallest = lst[i];             }         }     }     return [largest, smallest]; }
let maxNeg = -Infinity;     let minPos = Infinity;     if(lst.length == 0) return [maxNeg, minPos];     for(let i=0; i<lst.length; i++){         if(lst[i] < 0){             if(lst[i] > maxNeg) maxNeg = lst[i];         }else if(lst[i] > 0){             if(lst[i] < minPos) minPos = lst[i];         }     }     if(maxNeg == -Infinity) maxNeg = null;     if(minPos == Infinity) minPos = null;     return [maxNeg, minPos]; }
lst = lst.filter(x => x > 0); 	let b = lst.length > 0 ? Math.min(...lst) : null; 	lst = lst.filter(x => x < 0); 	let a = lst.length > 0 ? Math.max(...lst) : null; 	return [a, b]; }
if (lst.length < 1) {     return [null, null];   }   var lg = null;   var sm = null;   for (var i = 0; i < lst.length; i++) {     if (lst[i] > 0) {       if (sm === null) {         sm = lst[i];       } else if (lst[i] < sm) {         sm = lst[i];       }     } else if (lst[i] < 0) {       if (lg === null) {         lg = lst[i];       } else if (lst[i] > lg) {         lg = lst[i];       }     }   }   return [lg, sm]; }
let min = Infinity;     let max = -Infinity;     for(let i = 0; i < lst.length; i++){         if(lst[i] > 0 && lst[i] < min){             min = lst[i];         }         if(lst[i] < 0 && lst[i] > max){             max = lst[i];         }     }     return [max, min]; }
let a = lst.filter(x => x<0).sort((a,b) => a-b)[0];   let b = lst.filter(x => x>0).sort((a,b) => a-b)[0];   return a === undefined ? (null, b) : b === undefined ? (a, null) : (a, b); }
let positive = [];     let negative = [];     for (let i = 0; i < lst.length; i++){         if (lst[i] >= 0){             positive.push(lst[i]);         }         else{             negative.push(lst[i]);         }     }     let a = negative.length == 0 ? null : Math.max(...negative);     let b = positive.length == 0 ? null : Math.min(...positive);     return [a, b]; }
let num = lst.filter(el => el > 0);     let num1 = lst.filter(el => el < 0);     return num.length > 0 && num1.length > 0 ? [Math.max(...num1), Math.min(...num)] : [undefined, undefined]; }
let a = null;     let b = null;     for(let i = 0; i < lst.length; i++){         if(lst[i] > 0 && (b === null || lst[i] < b)){             b = lst[i];         }         if(lst[i] < 0 && (a === null || lst[i] > a)){             a = lst[i];         }     }     return [a, b]; }
let min;     let max;     let booleans = [];     for(let i=0; i<lst.length; i++){         if(lst[i]<0){             booleans.push(true);         }         else if(lst[i]>0){             booleans.push(false);         }     }     for(let i=0; i<lst.length; i++){         if(i === 0){             if(booleans[i] === true){                 max = lst[i];             }             else if(booleans[i] === false){                 min = lst[i];             }         }         else{             if(booleans[i] === true){                 if(lst[i]>max){                     max = lst[i];                 }             }             else if(booleans[i] === false){                 if(lst[i]<min){                     min = lst[i];                 }             }         }     }     let m = max;     let n = min;     if(m === undefined){         m = null;     }     if(n === undefined){         n = null;     }     return [m, n]; }
var ans = [null, null];   for (var i=0; i<lst.length; i++){     if (lst[i] > 0 && (ans[1] == null || lst[i] < ans[1])){       ans[1] = lst[i];     }     if (lst[i] < 0 && (ans[0] == null || lst[i] > ans[0])){       ans[0] = lst[i];     }   }   return ans; }
if(!lst.length) return [null, null];     if(lst.length === 1) return [null, null];     let largest_negative = Number.MIN_SAFE_INTEGER;     let smallest_positive = Number.MAX_SAFE_INTEGER;     for(let i = 0; i < lst.length; i++){         if(lst[i] < 0){             if(lst[i] > largest_negative){                 largest_negative = lst[i];             }         }         if(lst[i] > 0){             if(lst[i] < smallest_positive){                 smallest_positive = lst[i];             }         }     }     if(largest_negative === Number.MIN_SAFE_INTEGER){         largest_negative = null;     }     if(smallest_positive === Number.MAX_SAFE_INTEGER){         smallest_positive = null;     }     return [largest_negative, smallest_positive]; }
var f = 1;   var f1 = 1;   var f2 = 1;   for (var i = 3; i <= n; i++) {     f = f1 + f2;     f1 = f2;     f2 = f;   }   return f; }
// Base case.     if (n <= 1) {         return n;     } else {         return fib(n-1) + fib(n-2);     } }
if(n==1 || n==2){         return 1;     }     return fib(n-1)+fib(n-2); }
if(n == 0){         return 0;     }     if(n == 1){         return 1;     }     return fib(n-1) + fib(n-2); }
if(n <= 2){         return 1;     }     else{         return fib(n-1) + fib(n-2);     } }
if (n === 0){     return 0;   }   else if (n === 1){     return 1;   }   else {     return fib(n-1) + fib(n-2);   } }
var a = 0, b = 1, f = 1;     for(var i = 2; i <= n; i++) {         f = a + b;         a = b;         b = f;     }     return f; }
if(n<=2){ 		return 1; 	}else{ 		return fib(n-1)+fib(n-2); 	} }
// fib(0) = 0, fib(1) = 1, fib(2) = 1, fib(3) = 2, fib(4) = 3, fib(5) = 5, fib(6) = 8   if (n === 0) {     return 0;   } else if (n === 1) {     return 1;   } else {     return fib(n - 1) + fib(n - 2);   } }
var res = [];   if(n == 1){     return 1;   }else if(n == 2){     return 1;   }else{     for(var i = 1; i < n-1; i++){       res.push(fib(i));     }     return fib(n-1) + fib(n-2);   } }
}
if(n==1 || n==2){ 		return 1; 	} 	return fib(n-1)+fib(n-2); }
if(n == 0)     {         return 0;     }     else if(n == 1)     {         return 1;     }     else     {         return fib(n-1) + fib(n-2);     } }
//YOUR CODE HERE }
if(n==1) return 1; 	if(n==2) return 1; 	if(n==3) return 2; 	if(n==4) return 3; 	if(n==5) return 5; 	return fib(n-1)+fib(n-2); }
var a = 1, b = 0, temp;    while (n >= 0){     temp = a;     a = a + b;     b = temp;     n--;   }    return b; }
//fib(n-1) + fib(n-2) 	if(n === 1){ 		return 1; 	}else if(n === 2){ 		return 1; 	}else{ 		return fib(n-1) + fib(n-2); 	} }
let a = 1;     let b = 1;     for (let i = 3; i <= n; i++) {         let c = a + b;         a = b;         b = c;     }     return b; }  module.exports = fib;
var a = 1, b = 0, tmp; 	while (n >= 0){ 		tmp = a; 		a = a + b; 		b = tmp; 		n--; 	} 	return b; }
}
var sign = '';   if (x < 0){     sign = '-';     x = -x;   }   var xString = x.toString();   if (shift > xString.length){     return xString.split('').reverse().join('');   }   else {     return sign + xString.slice(xString.length - shift) + xString.slice(0, xString.length - shift);   } }
var _x = x.toString();     if (shift > _x.length) {         return _x.split("").reverse().join("");     }     _x = _x.split("");     for (var i = 0; i < shift; i++) {         _x.push(_x.shift());     }     return _x.join(""); }
var z = x.toString().split(""); 	var temp = ""; 	for(var i = 0; i < shift; i++){ 		temp = z.pop(); 		z.unshift(temp); 	} 	z = z.join(""); 	return z; }
var str_x = String(x); 	var str_x_len = str_x.length; 	if(shift >= str_x_len){ 		return str_x.split("").reverse().join(""); 	} 	var right_part = str_x.substring(str_x_len - shift, str_x_len); 	var left_part = str_x.substring(0, str_x_len - shift); 	return right_part + left_part; }
var digits = []; 	 	//Push each digit in number to an array 	while(x > 0){ 		digits.push(x % 10); 		x = Math.floor(x / 10); 	} 	 	var number_of_digits = digits.length; 	 	//If shift > number of digits, reverse the array and return it as a string 	if(shift > number_of_digits){ 		digits.reverse(); 		return digits.join(""); 	} 	 	//Else, shift the digits in the array 	for(var i = 0; i < shift; i++){ 		var digit = digits.pop(); 		digits.unshift(digit); 	} 	 	return digits.join(""); }
var x_string = x.toString();   var x_length = x_string.length;   var reversed_string = reverse_string(x_string);   var reversed_list = string_to_list(reversed_string);   var initial_shift = x_length - shift;   var circular_shifted_list = reversed_list.slice(initial_shift).concat(reversed_list.slice(0, initial_shift));   var circular_shifted_string = list_to_string(circular_shifted_list);   var result = reverse_string(circular_shifted_string);   return result; }
var str = x.toString();     var new_str = "";     var num_digits = str.length;     if (shift > num_digits){         for (var i = str.length-1; i >= 0; i--){             new_str += str[i];         }     }     else{         new_str = str.slice(shift, str.length) + str.slice(0, shift);     }     return new_str; }
let x_str = x.toString();     let shift_num = shift.toString();     if (shift_num > x_str.length){         return x_str.split("").reverse().join("");     }     let post_rotation = x_str.substring(0, x_str.length - shift_num);     let pre_rotation = x_str.substring(x_str.length - shift_num, x_str.length);     return pre_rotation + post_rotation; }
var str = x.toString();     while(shift > str.length){         shift -= str.length;     }     return str.slice(str.length - shift) + str.slice(0, str.length - shift); }
x = x.toString();   let new_x = "";   for(let i = 0; i < shift; i++){     let next_digit = x.substring(x.length - 1, x.length);     new_x = next_digit + new_x;     x = x.substring(0, x.length - 1);   }   return new_x + x; }
var x_array = reverse(string_to_array(x));   var shift_array = x_array.slice(0, shift);   var first_array = x_array.slice(shift);   var sum_array = first_array.concat(shift_array);   return array_to_string(reverse(sum_array)); }
// convert integer to string and split it into an array of chars 	var str = '' + x; 	var a = str.split(''); 	// create new array for our result 	var b = []; 	// iterate over the chars from original array and push them to new array 	for (var i = 0; i < a.length; i++) { 		// if our counter reaches the end of array, wrap around 		if(i + shift >= a.length){ 			b.push(a[i + shift - a.length]); 		} 		// otherwise just push character from current position 		else{ 			b.push(a[i + shift]); 		} 	} 	// join array into a string, return it 	return b.join(''); }
x = "" + x; // Convert x to a string     var result = "";     var digits = "";     if (shift > x.length){         //We need to reverse the digits         for (var i = x.length - 1; i >= 0; i--){             digits += x[i];         }         return digits;     }     else{         //Shift the digits to the right.         for (var i = x.length - 1; i >= 0; i--){             var index = i - shift;             if (index < 0){                 index = x.length + index;             }             result += x[index];         }         return result;     } }
x = String(x)   var len = x.length   var len = (x.length - shift) % len   return x.slice(len) + x.slice(0, len) }
if (shift <= 0){         return to_str(x);     } else {         var last_digit = modulo(x, 10);         var remainder = floor(x / 10);         return circular_shift(10 * last_digit + remainder, shift - 1);     } }
var str = x.toString();   var len = str.length;   // Shift can be more than number of digits   if(len < shift){     str = reverse(str);   }   else{     str = str.substring(len - shift, len) + str.substring(0, len - shift);   }   return str; }
return (x.toString().length < shift) ? reverse(x.toString()) : x.toString().slice(shift) + x.toString().slice(0, shift); }
let res = x.toString();     let len = res.length;     shift = shift % len;     let right = res.slice(len - shift);     let left = res.slice(0, len - shift);     return right + left; }
return reduce(l, function(acc, e){return Math.max(acc, e)}); }
}
return _.max(l); }
var max = l[0];     for(var i = 0; i < l.length; i++){         if(l[i] > max){             max = l[i];         }     }     return max; }
return Math.max.apply(null, l); }
let max = l[0];     for(let e of l){         if(e > max){             max = e;         }     }     return max; }
if(is_null(l)){         return error(max_element, "empty list");     }     else{         return max_element_max(car(l), cdr(l));     } }
let i = l.length;     let max = l[0];     while(i--){         if(l[i] > max){             max = l[i];         }     }     return max; }
if(l.length === 0){         return null;     }     var max = 0;     for(var i = 0; i < l.length; i++){         if(l[i] > max){             max = l[i];         }     }     return max; }
if(length(l) == 0){         return "Cannot calculate max element of empty list.";     } else {         var max = l[0];         for(var i = 1; i < length(l); i++){             if(l[i] > max){                 max = l[i];             }         }         return max;     } }
var max = 0;     for(var i = 0; i < l.length; i++){         if(l[i] > max){             max = l[i];         }     }     return max; }
// If list empty, return undefined    if (l.length == 0) {     return undefined;    }     let max = l[0];    for (let i = 1; i < l.length; i++) {      max = Math.max(max, l[i]);    }    return max; }
if(l.length == 0){     return 0;   }   var h = l[0];   for(var i = 1; i < l.length; i++){     if(l[i] > h){       h = l[i];     }   }   return h; }
return l.reduce(function(a, b) {     return Math.max(a, b);   }); }
if(l.length == 0){ 		return null; 	}else{ 		if(l.length == 1){ 			return l[0]; 		}else{ 			if(l[0] > l[1]){ 				l.splice(1, 1); 				return max_element(l); 			}else{ 				l.splice(0, 1); 				return max_element(l); 			} 		} 	} }
return Math.max.apply(null, l); }
return Math.max.apply(null, l); }
var m = l[0];   for(var i = 1; i < l.length; i++){     if(l[i] > m){       m = l[i];     }   }   return m; }
return lst.filter((element, index) => index % 2 == 0 && element % 2 == 1).reduce((acc, element) => acc + element, 0); }
let lst1 = lst.filter((v,i)=> i%2 === 0);   let lst2 = lst1.filter(x => x%2 === 1);   return lst2.reduce((a,b)=> a+b,0); }
//..   let sum = 0;   for (let i = 0; i < lst.length; i++) {     if (i % 2 == 0 && lst[i] % 2 != 0) {       sum += lst[i];     }   }   return sum; }
// Write your code here   let sum = 0;   for(let i = 0; i < lst.length; i++){     if(i % 2 === 0 && lst[i] % 2 !== 0){       sum += lst[i];     }   }   return sum; }
let result = 0;   let evenPosition = [lst[1], lst[3]];   for (let i = 0; i < evenPosition.length; i++) {     if (evenPosition[i] % 2 != 0) {       result += evenPosition[i];     }   }   return result; }
//return lst.filter((x, i) => i % 2 === 0).filter(x => x % 2 === 1).reduce((a, b) => a + b, 0);     return lst.filter((x, i) => x % 2 === 1 && i % 2 === 0).reduce((a, b) => a + b, 0); }
if(!lst) return 0;     return lst.filter((x,i)=> i%2 === 0 && x%2!==0).reduce((a,b)=>a+b,0);   }
return lst.filter((_, i) => i % 2).reduce((a, b) => a + b, 0); }
let result = 0;     for(let i = 0; i < lst.length; i++){         if(i % 2 !== 0){             if(lst[i] % 2 !== 0){                 result += lst[i];             }         }     }     return result; }
//..   let res = 0;   for (let i = 0; i < lst.length; i++) {     if (i % 2 === 0 && lst[i] % 2 !== 0) {       res += lst[i];     }   }   return res; }
let evenLst = lst.filter((num, i) => i % 2 === 0);   let oddLst = evenLst.filter(num => num % 2 !== 0);   let oddSum = oddLst.reduce((a, b) => a + b, 0);   return oddSum; }
let oddElements = lst.filter((element, index) => (element % 2) !== 0 && (index % 2) == 0);     let total = oddElements.reduce((a, b) => a + b, 0);     return total; }
//coding and coding..     return lst.filter((v,i)=>i%2===0).filter(v=>v%2!==0).reduce((a,v)=>a+v,0)   }
return lst.filter((e,i)=>i%2===1&&e%2===1).reduce((a,b)=>a+b,0) }
var res = 0;   for(var i = 1; i < lst.length; i += 2){     if(lst[i] % 2 == 0){       res += lst[i];     }   }   return res; }
let sum = 0;   for(let i = 1; i < lst.length; i += 2){     if(lst[i] % 2 == 0){       sum += lst[i];     }   }   return sum; }
//TODO: code me }
let sum = 0;     for(let i = 0; i < lst.length; i++){         if(i % 2 === 0 && lst[i] % 2 === 1){             sum += lst[i];         }     }     return sum; }
// a place to store the results     let sum = 0;     // iterate of over the list     for(let i = 0; i < lst.length; i++){       // check if the current index is odd       if(i % 2 === 1){         // check if the current number is odd         if(lst[i] % 2 === 1){           // add it to the results           sum += lst[i];         }       }     }     // return the results     return sum;   }                                                               /////////////////////////////////////////   /////////////////////////////////////////   /////////////////////////////////////////   /////////////////////////////////////////   /////////////////////////////////////////                                                                  //I like to comment these out when I am done with them      // //Return the sum of all of the even elements in a list of numbers.   // // Examples   // // solution([1, 2, 3, 4, 5]) ==> 6   // // solution([22, 21, 15, 11, 9]) ==> 42   // // solution([6, 4, 7, 10, 20]) ==> 30   // function solution(lst){   //   // a place to store the results   //   let sum = 0;   //   // iterate of over the list   //   for(let i = 0; i < lst.length; i++){   //     // check if the current number is even   //     if(lst[i] % 2 === 0){   //       // add it to the results   //       sum += lst[i];   //     }   //   }   //   // return the results   //   return sum;   // }
const planets = ["Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune"];     const first = planets.indexOf(planet1);     const second = planets.indexOf(planet2);     if (first < 0 || second < 0) return [];     if (first <= second) {         return planets.slice(first + 1, second);     } else {         return planets.slice(second + 1, first);     } }
let s =["Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune"];     let f = s.indexOf(planet1);     let l = s.indexOf(planet2);     let ans = [];     if(f>=0 && l>=0){         if(f<l){             for(let i=f+1;i<l;i++){                 ans.push(s[i]);             }         }         else{             for(let i=l+1;i<f;i++){                 ans.push(s[i]);             }         }     }     return ans; }
var planetList = ["Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune"];     var planet1Index = planetList.indexOf(planet1);     var planet2Index = planetList.indexOf(planet2);     var planetsBetween = [];     if(planet1Index === -1 || planet2Index === -1){         return planetsBetween;     }     if(planet1Index < planet2Index){         planetsBetween = planetList.slice(planet1Index + 1, planet2Index);     } else {         planetsBetween = planetList.slice(planet2Index + 1, planet1Index);     }     return planetsBetween; }
var list = ["Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune"];     var index1 = list.indexOf(planet1);     var index2 = list.indexOf(planet2);     if (index1 != -1 && index2 != -1) {         if (index1 < index2) {             return list.slice(index1+1, index2);         } else {             return list.slice(index2+1, index1);         }     } else {         return [];     } }
let d = {"Mercury":1, "Venus":2, "Earth":3, "Mars":4, "Jupiter":5, "Saturn":6, "Uranus":7, "Neptune":8};   if (d[planet1] == undefined || d[planet2] == undefined) return [];   if (d[planet1] > d[planet2]) {     [planet1, planet2] = [planet2, planet1];   }   return Object.keys(d).filter(function(el){     return d[el] > d[planet1] && d[el] < d[planet2];   }); }
let planetsArray = [   "Mercury",   "Venus",   "Earth",   "Mars",   "Jupiter",   "Saturn",   "Uranus",   "Neptune"   ];   if (planetsArray.indexOf(planet1) === -1 || planetsArray.indexOf(planet2) === -1){     return [];   }   if (planetsArray.indexOf(planet1) > planetsArray.indexOf(planet2)){     let b = planetsArray.indexOf(planet1);     let a = planetsArray.indexOf(planet2);     return planetsArray.slice(a+1, b);   }   if (planetsArray.indexOf(planet1) < planetsArray.indexOf(planet2)){     let a = planetsArray.indexOf(planet1);     let b = planetsArray.indexOf(planet2);     return planetsArray.slice(a+1, b);   }   if (planetsArray.indexOf(planet1) === planetsArray.indexOf(planet2)){     return [];   } }
let planets = {     "Mercury": 0,     "Venus": 1,     "Earth": 2,     "Mars": 3,     "Jupiter": 4,     "Saturn": 5,     "Uranus": 6,     "Neptune": 7   }   if (planets[planet1] > planets[planet2]){     let temp = planet1;     planet1 = planet2;     planet2 = temp;   }   let result = [];   for (let i = planets[planet1] + 1; i < planets[planet2]; i++){     result.push(Object.keys(planets).find(key => planets[key] === i));   }   return result; }
let orbit = ["Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune"];     let res = [];     let index1 = orbit.indexOf(planet1);     let index2 = orbit.indexOf(planet2);     let temp = index1;     index1 = Math.min(index1, index2);     index2 = Math.max(temp, index2);     if(index1 > -1 && index2 > -1){         for(let i = index1 + 1; i < index2; i++){             res.push(orbit[i]);         }     }     return res; }
let planets = ["Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune"]; 	let result = []; 	let p1 = planets.indexOf(planet1); 	let p2 = planets.indexOf(planet2); 	if(p1 < 0 || p2 < 0){ 		return result; 	} 	if(p1 > p2){ 		for(let i = p2 + 1; i < p1; i++){ 			result.push(planets[i]); 		} 	} else { 		for(let i = p1 + 1; i < p2; i++){ 			result.push(planets[i]); 		} 	} 	return result; }
let orbits = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];     let index1 = orbits.indexOf(planet1);     let index2 = orbits.indexOf(planet2);     let new_array = [];     if(index1 > -1 && index2 > -1){         if(index1 < index2){             for(let i = index1 + 1; i < index2; i++){                 new_array.push(orbits[i]);             }         }         else{             for(let i = index2 + 1; i < index1; i++){                 new_array.push(orbits[i]);             }         }     }     return new_array; }
var planets = ["Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune"];     var index1 = planets.indexOf(planet1);     var index2 = planets.indexOf(planet2);     var array = [];     if(index1 > index2){         array = planets.slice(index2, index1 + 1);     } else if(index1 < index2){         array = planets.slice(index1, index2 + 1);     } else if(index1 == -1 || index2 == -1){         array = [];     } else {         array = [planet1];     }     return array; }
var planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];   var p1 = planets.indexOf(planet1);   var p2 = planets.indexOf(planet2);   if(p1 == -1 || p2 == -1){     return [];   }   if(p1 > p2){     var tmp = p1;     p1 = p2;     p2 = tmp;   }   return planets.slice(p1+1, p2); }
var solarsystem = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];     if (!solarsystem.includes(planet1) || !solarsystem.includes(planet2)) {         return [];     } else {         var planet1index = solarsystem.indexOf(planet1);         var planet2index = solarsystem.indexOf(planet2);         var planetinbetween = [];         if (planet1index < planet2index) {             for (var i = planet1index; i < planet2index; i++) {                 planetinbetween.push(solarsystem[i + 1]);             }         } else {             for (var i = planet2index; i < planet1index; i++) {                 planetinbetween.push(solarsystem[i + 1]);             }         }         return planetinbetween;     } }
const planets = {     Mercury: 0,     Venus: 1,     Earth: 2,     Mars: 3,     Jupiter: 4,     Saturn: 5,     Uranus: 6,     Neptune: 7   }   if (!planets[planet1] || !planets[planet2]){     return [];   }   const i = planets[planet1];   const j = planets[planet2];   let res = [];   if (i < j){     for (let k = i+1; k < j; k++){       for (let p in planets){         if (planets[p] === k){           res.push(p);         }       }     }   } else {     for (let k = j+1; k < i; k++){       for (let p in planets){         if (planets[p] === k){           res.push(p);         }       }     }   }   return res; }
let planet=["Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune"];     let k=-1;     for(let i=0;i<planet.length;i++){         if(planet[i]==planet1){             k=i;         }     }     let l=-1;     for(let i=0;i<planet.length;i++){         if(planet[i]==planet2){             l=i;         }     }     let arr=[];     if(k>l){         let temp=k;         k=l;         l=temp;     }     if(k==-1||l==-1){         return arr;     }     for(let i=k+1;i<l;i++){         arr.push(planet[i]);     }     return arr; }
let planets = ["Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune"];   let start = planets.indexOf(planet1);   let end = planets.indexOf(planet2);   if (start === -1 || end === -1) {     return [];   }   else if (start > end) {     return planets.slice(end + 1, start).reverse();   }   else {     return planets.slice(start + 1, end);   } }
let planets = ["Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune"];     let planet1Index = planets.indexOf(planet1);     let planet2Index = planets.indexOf(planet2);     let result = [];     if(planet1Index === -1 || planet2Index === -1) {         return result;     }     if(planet1Index < planet2Index) {         for(let i = planet1Index + 1; i < planet2Index; i++) {             result.push(planets[i]);         }     }     else {         for(let i = planet2Index + 1; i < planet1Index; i++) {             result.push(planets[i]);         }     }     return result; }
const data = {         "Mercury": 1,         "Venus": 2,         "Earth": 3,         "Mars": 4,         "Jupiter": 5,         "Saturn": 6,         "Uranus": 7,         "Neptune": 8     }     if(!data[planet1] || !data[planet2]) return [];     let result = [];     for(let i = Math.min(data[planet1], data[planet2]); i <= Math.max(data[planet1], data[planet2]); i++){         if(data[planet1] > data[planet2]) result.unshift(Object.keys(data).find(el => data[el] === i));         else result.push(Object.keys(data).find(el => data[el] === i));     }     return result; }
const planets = ["Mercury", "Venus", "Earth", "Mars", "Jupiter", "Saturn", "Uranus", "Neptune"];     const planet1Index = planets.indexOf(planet1);     const planet2Index = planets.indexOf(planet2);     if(planet1Index === -1 || planet2Index === -1){         return [];     }     if(planet1Index < planet2Index){         return planets.slice(planet1Index + 1, planet2Index)     }     else{         return planets.slice(planet2Index + 1, planet1Index)     } }
var paren_groups = paren_string.split(' '); 	var output = []; 	for(var i = 0; i < paren_groups.length; i++){ 		var parens = paren_groups[i]; 		var current_level = 0; 		var max_level = 0; 		for(var j = 0; j < parens.length; j++){ 			if(parens[j] === '('){ 				current_level++; 				if(current_level > max_level){ 					max_level = current_level; 				} 			} else { 				current_level--; 			} 		} 		output.push(max_level); 	} 	return output; }  module.exports = { 	"parse_nested_parens": parse_nested_parens }
var tokens = paren_string.split(" "); //break the input string into groups   var max_counts = [];   for(var i = 0; i < tokens.length; i++){     var max_count = 0;     var count = 0;     for(var j = 0; j < tokens[i].length; j++){       if(tokens[i][j] == '('){         count++;         if(count > max_count){           max_count = count;         }       }       else if(tokens[i][j] == ')'){         count--;       }     }     max_counts.push(max_count);   }   return max_counts; }
var ret = [];     var max_level = 0;     var level = 0;     var stack = [];     var inside_str = false;     for(var i = 0; i < paren_string.length; i++){         if(paren_string[i] == '('){             level++;             stack.push(paren_string[i]);         }         else if(paren_string[i] == ')'){             if(level == 0){                 inside_str = false;                 ret.push(max_level);                 max_level = 0;                 level = 0;                 stack = [];             }             else{                 stack.pop();                 level--;             }         }         else if(paren_string[i] == ' '){             if(level == 0){                 inside_str = false;                 ret.push(max_level);                 max_level = 0;                 level = 0;                 stack = [];             }             else{                 if(level > max_level){                     max_level = level;                 }             }         }         else{             if(!inside_str){                 inside_str = true;                 if(stack.length > 0){                     stack.push(paren_string[i]);                 }             }             else{                 if(stack.length > 0){                     stack.push(paren_string[i]);                 }             }         }     }     if(stack.length > 0){         console.log("Invalid Parentheses String: " + paren_string);     }     else{         ret.push(max_level);     }     return ret; }
var result = [];     var array = paren_string.split(' ');     for(var i = 0; i < array.length; i++){         var temp = 0;         var str = array[i];         for(var j = 0; j < str.length; j++){             if(str[j] == '('){                 temp += 1;             }             else if(str[j] == ')'){                 result.push(temp);                 temp -= 1;             }         }     }     return result; }
//var paren_levels = [];   var paren_levels = new Array();   var paren_stack = [];   var i = 0;   while(i < paren_string.length){     if(paren_string[i] == '('){       paren_stack.push(paren_string[i]);     }     else if(paren_string[i] == ')'){       if(paren_stack.length > 0){         paren_stack.pop();       }       else{         paren_levels.push(0);       }     }     else if(paren_string[i] == ' '){       paren_levels.push(paren_stack.length);     }     i++;   }   return paren_levels; }
var counter = 0; 	var parens = []; 	for(var i = 0; i < paren_string.length; i++){ 		if(paren_string[i] == '('){ 			counter++; 		} 		else if(paren_string[i] == ')'){ 			counter--; 		} 		else if(paren_string[i] == ' '){ 			parens.push(counter); 			counter = 0; 		} 	} 	return parens; }
let levels = []; 	for(let substring of paren_string.split(' ')){ 		let paren = 0; 		let max_paren = 0; 		for(let i = 0; i < substring.length; i++){ 			if(substring[i] === '('){ 				paren++; 				if(paren > max_paren){ 					max_paren = paren; 				} 			} 			else if(substring[i] === ')'){ 				paren--; 			} 		} 		levels.push(max_paren); 	} 	return levels; }
var groups = paren_string.split(' ');     var count = 0;     var max = 0;     var result = [];     for(var i = 0; i < groups.length; i++){         count = 0;         for(var j = 0; j < groups[i].length; j++){             if(groups[i][j] == '('){                 count++;             }             else if(groups[i][j] == ')'){                 count--;             }             if(count > max){                 max = count;             }         }         result.push(max);     }     return result; }
}
var paren_count = 0;     var max_paren = 0;     var paren_depth = [];     for (var i = 0; i < paren_string.length; i++){         if (paren_string[i] == '('){             paren_count += 1;             if (paren_count > max_paren){                 max_paren = paren_count;             }         } else if (paren_string[i] == ')'){             paren_count -= 1;         } else if (paren_string[i] == ' '){             paren_depth.push(max_paren);             max_paren = 0;             paren_count = 0;         }     }     return paren_depth; }
var parens_regex = /\(+\)/g;     var parens_captured = paren_string.match(parens_regex);     var parens_counts = parens_captured.map(function(elem){         var open_parens = 0;         var close_parens = 0;         var max_parens = 0;         for(var i = 0; i < elem.length; i++){             if(elem[i] === '('){                 open_parens++;                 if(open_parens > max_parens){                     max_parens = open_parens;                 }             }             else if(elem[i] === ')'){                 close_parens++;             }         }         return max_parens;     });     return parens_counts; }
//*** The function should return a list of integers. ***     var items = paren_string.split(' ');     var results = [];     for (var i = 0; i < items.length; i++) {         var count = 0;         var max_count = 0;         for (var j = 0; j < items[i].length; j++) {             if (items[i][j] == '(') {                 count += 1;                 if (count > max_count) {                     max_count = count;                 }             } else if (items[i][j] == ')') {                 count -= 1;             }         }         results.push(max_count);     }     return results; }
// TODO: complete this function     var max = 0;     var final = [];     var myarray = paren_string.split(" ");     for (var i = 0; i < myarray.length; i++) {         if (myarray[i] === '()') {             final.push(1);         } else {             var string = myarray[i];             var counter = 0;             var max = 0;             for (var j = 0; j < string.length; j++) {                 if (string[j] === '(') {                     counter++;                     if (counter > max) {                         max = counter;                     }                 } else if (string[j] === ')') {                     counter--;                 }             }             final.push(max);         }     }     return final; }
let paren_groups = paren_string.split(' ');     let result = [];     for(let i = 0; i < paren_groups.length; i++){         let stack = [];         let level = 0;         let max_level = 0;         for(let char of paren_groups[i]){             if(char === '('){                 stack.push(char);                 level++;                 if(level > max_level){                     max_level = level;                 }             }             else if(char === ')'){                 if(stack.length > 0){                     stack.pop();                     level--;                 }             }         }         result.push(max_level);     }     return result; }
let parens = paren_string.split(' ')     let levels = []     for (let paren of parens){         let level = 0         let max_level = 0         for (let i = 0; i < paren.length; i++){             if (paren[i] === '('){                 level += 1             }             else if (paren[i] === ')'){                 level -= 1             }             if (level > max_level){                 max_level = level             }         }         levels.push(max_level)     }     return levels }
var depth = 0;     var max_depth = 0;     var result = [];     for(var i = 0; i < paren_string.length; i++){         var c = paren_string[i];         if(c == '('){             depth += 1;             max_depth = Math.max(max_depth, depth);         }else if(c == ')'){             depth -= 1;         }else if(c == ' '){             result.push(max_depth);             max_depth = 0;             depth = 0;         }     }     result.push(max_depth);     return result; }
let groups = paren_string.split(' ');     let output = [];     for(let i = 0; i < groups.length; i++){         let current_group = groups[i];         let count = 0;         let maximum = 0;         for(let j = 0; j < current_group.length; j++){             if(current_group[j] === '('){                 count++;                 if(count > maximum){                     maximum = count;                 }             }             else if(current_group[j] === ')'){                 count--;             }         }         output.push(maximum);     }     return output; }
var group = [];     var group_arr = paren_string.split(' ');     for(var i = 0; i < group_arr.length; i++){         var paren = group_arr[i];         var count = 0;         var max = 0;         for(var j = 0; j < paren.length; j++){             if(paren[j] === '('){                 count++;                 if(count > max){                     max = count;                 }             }             else if(paren[j] === ')'){                 count--;             }         }         group.push(max);     }     return group; }
let result = [];   for (let i = 0; i < paren_string.length; i++) {     if (paren_string[i] === '(') {       let count = 0;       while (paren_string[i] === '(') {         count += 1;         i += 1;       }       result.push(count);     }   }   return result; }
var l1 = l.slice();     var l2 = l.slice();     var l3 = l.slice();     l1.sort();     l2.sort();     l3.sort();     var i = 0;     var j = 1;     var k = 2;     var x = 0;     var t = 0;     while (i<l1.length){         j = i+1;         x = -l1[i];         while (j<l2.length){             k = j+1;             t = x-l2[j];             while (k<l3.length){                 if (l3[k]==t){                     return true;                 }                 k = k+1;             }             j = j+1;         }         i = i+1;     }     return false; }
for(let i = 0; i < l.length; i++){         for(let j = 0; j < l.length; j++){             for(let k = 0; k < l.length; k++){                 if(l[i] + l[j] + l[k] == 0 && i !== j && j !== k && i !== k){                     return true;                 }             }         }     }     return false; }
var flag = false; 	var len = l.length; 	for(var i = 0; i < len; i++){ 		for(var j = i + 1; j < len; j++){ 			for(var k = j + 1; k < len; k++){ 				if(l[i] + l[j] + l[k] == 0){ 					flag = true; 					break; 				} 			} 		} 	} 	return flag; }
var a = 0;   var b = 0;   var c = 0;   if (l.length < 3){     return false;   } else {     for (var i = 0; i < l.length; i++) {       a = l[i];       for (var j = i + 1; j < l.length; j++) {         b = l[j];         for (var k = j + 1; k < l.length; k++) {           c = l[k];           if (a + b + c == 0) {             return true;           }         }       }     }   }   return false; }
var flag = false;     for(var i = 0; i < l.length; i++){         for(var j = 0; j < l.length; j++){             for(var k = 0; k < l.length; k++){                 if(i != j && i != k && j != k){                     if(l[i] + l[j] + l[k] == 0){                         flag = true;                     }                 }             }         }     }     return flag; }
if (l.length < 3){         return false;     }     // else if(l.length == 3){     //     if(l[0] + l[1] + l[2] == 0){     //         return true;     //     }     //     else{     //         return false;     //     }     // }     else{         for(var i = 0; i < l.length; i++){             for(var j = i + 1; j < l.length; j++){                 for(var k = j + 1; k < l.length; k++){                     if(l[i] + l[j] + l[k] == 0){                         return true;                     }                 }             }         }         return false;     } }
var i;     for(i=0; i<l.length; i++){         var j;         for(j=0; j<l.length; j++){             var k;             for(k=0; k<l.length; k++){                 if(l[i] + l[j] + l[k] == 0 && i != j && j != k && i != k){                     return true;                 }             }         }     }     return false; }
}
let s = new Set();     let r = new Set();     for(let x of l){         if(r.has(x)){             return true;         }         for(let y of s){             r.add(-x-y);         }         s.add(x);     }     return false; }
// YOUR CODE HERE }
if (l.length < 3){         return false;     }     else{         for (var i = 0; i < l.length - 2; i++) {             for (var j = i + 1; j < l.length - 1; j++) {                 for (var k = j + 1; k < l.length; k++) {                     if (l[i] + l[j] + l[k] == 0){                         return true;                     }                 }             }         }         return false;     } }
var result = false;     for(var i = 0; i < l.length; i++){         for(var j = i + 1; j < l.length; j++){             for(var k = j + 1; k < l.length; k++){                 if(l[i] + l[j] + l[k] == 0){                     result = true;                 }             }         }     }     return result; }
function helper(index, first, second){     if (index === l.length){       return false;     }     if (first === undefined){       return helper(index + 1, l[index], second);     } else if (second === undefined){       return helper(index + 1, first, l[index]);     } else {       if (first + second + l[index] === 0){         return true;       } else {         return helper(index + 1, first, second);       }     }   }   return helper(0); }
if (l.length <= 2){ 		return false; 	} 	for (var i = 0; i < l.length; i++){ 		for (var j = i + 1; j < l.length; j++){ 			for (var k = j + 1; k < l.length; k++){ 				if (l[i] + l[j] + l[k] == 0){ 					return true; 				} 			} 		} 	} 	return false; }
// body... 	for (var i = 0; i < l.length; i++) { 		var a = l[i]; 		for (var j = i+1; j < l.length; j++) { 			var b = l[j]; 			for (var k = j+1; k < l.length; k++) { 				var c = l[k]; 				if (a+b+c==0) { 					return true; 				} 			} 		} 	} 	return false; }
if (l.length < 3){         return false;     }     else{         var j = 0;         while (j < l.length - 2){             var k = j + 1;             while (k < l.length - 1){                 var m = k + 1;                 while (m < l.length){                     if (l[j] + l[k] + l[m] == 0){                         return true;                     }                     m++;                 }                 k++;             }             j++;         }         return false;     } }
if (l.length < 3){         return false;     }     for (var i = 0; i < l.length; i++){         for (var j = i + 1; j < l.length; j++){             for (var k = j + 1; k < l.length; k++){                 if (l[i] + l[j] + l[k] == 0){                     return true;                 }             }         }     }     return false; }
for(let i = 0; i < l.length; i++){         for(let j = 0; j < l.length; j++){             for(let k = 0; k < l.length; k++){                 if(l[i] + l[j] + l[k] == 0 && i != j && j != k && i != k){                     return true;                 }             }         }     }     return false; }
for(var i = 0; i < l.length; i++){         for(var j = 0; j < l.length; j++){             for(var k = 0; k < l.length; k++){                 if(l[i] + l[j] + l[k] == 0){                     return true;                 }             }         }     }     return false; }
let result = operand[0];   for (let i = 0; i < operator.length; i++) {     switch (operator[i]) {       case '+':         result += operand[i + 1];         break;       case '-':         result -= operand[i + 1];         break;       case '*':         result *= operand[i + 1];         break;       case '//':         result = Math.floor(result / operand[i + 1]);         break;       case '**':         result = Math.pow(result, operand[i + 1]);         break;     }   }   return result; }
let x = operand[0];     for(let i = 0; i < operator.length; i++){         if(operator[i] == '+'){             x += operand[i+1];         }else if(operator[i] == '-'){             x -= operand[i+1];         }else if(operator[i] == '*'){             x *= operand[i+1];         }else if(operator[i] == '//'){             x = Math.floor(x / operand[i+1]);         }else if(operator[i] == '**'){             x = Math.pow(x, operand[i+1]);         }     }     return x; }
let result = '';     operand.forEach((e, i) => {         result += `${e}${operator[i] ? operator[i] : ''}`;     });     return eval(result); }
let result = operand[0];     for(let i = 0; i < operator.length; i++){         switch(operator[i]){             case '+':                 result += operand[i+1];                 break;             case '-':                 result -= operand[i+1];                 break;             case '*':                 result *= operand[i+1];                 break;             case '//':                 result = Math.floor(result / operand[i+1]);                 break;             case '**':                 result = Math.pow(result, operand[i+1]);                 break;         }     }     return result; }
var arr = []     for(var i = 0; i < operator.length; i++){         if(operator[i] == '//'){             arr.push(Math.floor(operand[i+1] / operand[i]))         }         else if(operator[i] == '**'){             arr.push(Math.pow(operand[i], operand[i+1]))         }         else{             arr.push(operator[i], operand[i+1])         }     }     return eval(arr.join('')) }
let result = 0;     for(let i = 0; i < operator.length; i++){         if(i === 0){             if(operator[i] === '+'){                 result = operand[i] + operand[i+1];             }else if(operator[i] === '-'){                 result = operand[i] - operand[i+1];             }else if(operator[i] === '*'){                 result = operand[i] * operand[i+1];             }else if(operator[i] === '//'){                 result = operand[i] / operand[i+1];             }else if(operator[i] === '**'){                 result = operand[i] ** operand[i+1];             }         }else{             if(operator[i] === '+'){                 result += operand[i+1];             }else if(operator[i] === '-'){                 result -= operand[i+1];             }else if(operator[i] === '*'){                 result *= operand[i+1];             }else if(operator[i] === '//'){                 result /= operand[i+1];             }else if(operator[i] === '**'){                 result **= operand[i+1];             }         }     }     return result; }
// Your code here   var result = operand[0];   for(var i = 0; i < operator.length; i++){     if(operator[i] == '+'){       result += operand[i+1];     }     else if(operator[i] == '-'){       result -= operand[i+1];     }     else if(operator[i] == '*'){       result *= operand[i+1];     }     else if(operator[i] == '//'){       result = Math.floor(result / operand[i+1]);     }     else if(operator[i] == '**'){       result = Math.pow(result, operand[i+1]);     }   }   return result; }
let operandArray = [];     let operatorArray = [];     let result;     let tempOperand = 0;     let tempOperator = 0;     for(let i = 0; i < operand.length; i++){         operandArray.push(operand[i]);     }     for(let i = 0; i < operator.length; i++){         operatorArray.push(operator[i]);     }     for(let i = 0; i < operatorArray.length; i++){         if(operatorArray[i] === '*' || operatorArray[i] === '/'){             if(operatorArray[i] === '*'){                 result = operandArray[i] * operandArray[i + 1];                 operandArray.splice(i, 2, result);                 operatorArray.splice(i, 1);                 i--;             }             else if(operatorArray[i] === '/'){                 result = operandArray[i] / operandArray[i + 1];                 operandArray.splice(i, 2, result);                 operatorArray.splice(i, 1);                 i--;             }         }     }     for(let i = 0; i < operatorArray.length; i++){         if(operatorArray[i] === '+' || operatorArray[i] === '-'){             if(operatorArray[i] === '+'){                 result = operandArray[i] + operandArray[i + 1];                 operandArray.splice(i, 2, result);                 operatorArray.splice(i, 1);                 i--;             }             else if(operatorArray[i] === '-'){                 result = operandArray[i] - operandArray[i + 1];                 operandArray.splice(i, 2, result);                 operatorArray.splice(i, 1);                 i--;             }         }     }     return result; }
if (operand.length < 2) return undefined;   let result = operand[0];   operand.shift();   operator.forEach((item, index) => {     switch (item) {       case '+':         result += operand[index];         break;       case '-':         result -= operand[index];         break;       case '*':         result *= operand[index];         break;       case '//':         result = Math.floor(result / operand[index]);         break;       case '**':         result = Math.pow(result, operand[index]);         break;     }   });   return result; }
var res = operand[0];     for(var i = 0; i < operator.length; i++){         switch(operator[i]){             case '+':                 res += operand[i+1];                 break;             case '-':                 res -= operand[i+1];                 break;             case '*':                 res *= operand[i+1];                 break;             case '//':                 res = Math.floor(res / operand[i+1]);                 break;             case '**':                 res = Math.pow(res, operand[i+1]);                 break;         }     }     return res; }
if (operator.length === 0 || operand.length < 2) {     return 0;   }   let result = operand[0];   for (let i = 0; i < operator.length; i++) {     if (operator[i] === '+') {       result += operand[i + 1];     } else if (operator[i] === '-') {       result -= operand[i + 1];     } else if (operator[i] === '*') {       result *= operand[i + 1];     } else if (operator[i] === '//') {       result = Math.floor(result / operand[i + 1]);     } else if (operator[i] === '**') {       result = Math.pow(result, operand[i + 1]);     }   }   return result; }
// Your code is here... }
for(var i = 0; i < operator.length; i++){     if(operator[i] === '+'){       operand[i+1] = operand[i] + operand[i+1];     }     if(operator[i] === '-'){       operand[i+1] = operand[i] - operand[i+1];     }     if(operator[i] === '*'){       operand[i+1] = operand[i] * operand[i+1];     }     if(operator[i] === '//'){       operand[i+1] = Math.floor(operand[i] / operand[i+1]);     }     if(operator[i] === '**'){       operand[i+1] = Math.pow(operand[i], operand[i+1]);     }   }   return operand[operand.length-1]; }
let result = operand[0];     for(let i = 0; i < operator.length; i++){         let operatorFunc = operator[i];         let operand1 = operand[i];         let operand2 = operand[i+1];         switch(operatorFunc){             case '+':                 result = operand1 + operand2;                 break;             case '-':                 result = operand1 - operand2;                 break;             case '*':                 result = operand1 * operand2;                 break;             case '//':                 result = operand1 / operand2;                 break;             case '**':                 result = operand1 ** operand2;                 break;         }     }     return result; }
let str = '';     for(let i = 0; i < operand.length; i++){         str += `${operand[i]} ${operator[i]} `;     }     str += operand[operand.length - 1];     return eval(str); }
let opr = operator;     let opd = operand;     let sum = opd[0];     for(let i = 0; i < opr.length; i++){         if(opr[i] == '+'){             sum += opd[i+1];         }         if(opr[i] == '-'){             sum -= opd[i+1];         }         if(opr[i] == '*'){             sum *= opd[i+1];         }         if(opr[i] == '//'){             sum /= opd[i+1];         }         if(opr[i] == '**'){             sum = Math.pow(sum, opd[i+1]);         }     }     return sum; }
let res = operand[0];     for(let i = 0; i < operator.length; i++){         let opr = operator[i];         let num = operand[i+1];         if(opr === '+'){             res += num;         }         else if(opr === '-'){             res -= num;         }         else if(opr === '*'){             res *= num;         }         else if(opr === '//'){             res = Math.floor(res / num);         }         else if(opr === '**'){             res = Math.pow(res, num);         }     }     return res; }
if(operator.length == 0){         return operand[0];     }     let output = operand[0];     for(let i = 0; i < operator.length; i++){         if(operator[i] == '+'){             output += operand[i+1];         }         if(operator[i] == '-'){             output -= operand[i+1];         }         if(operator[i] == '*'){             output *= operand[i+1];         }         if(operator[i] == '//'){             output = Math.floor(output / operand[i+1]);         }         if(operator[i] == '**'){             output = Math.pow(output, operand[i+1]);         }     }     return output; }
}
// Your code here }
if(n === 0) return 0;   if(n === 1) return 0;   if(n === 2) return 1;   var n1 = 0;   var n2 = 0;   var n3 = 1;   var fib = 0;   for(var i = 3; i <= n; i++){     fib = n1 + n2 + n3;     n1 = n2;     n2 = n3;     n3 = fib;   }   return fib; }
// Write code here }
var firstNum = 0;     var secondNum = 0;     var thirdNum = 1;     var sum;     if(n == 0) {         return 0;     } else if(n == 1) {         return 0;     } else if(n == 2) {         return 1;     } else {         for(var i = 2; i < n; i++) {             sum = firstNum + secondNum + thirdNum;             firstNum = secondNum;             secondNum = thirdNum;             thirdNum = sum;         }         return sum;     } }
// base case 	if(n === 0) return 0; 	if(n === 1) return 0; 	if(n === 2) return 1; 	// recursive case 	return fibfib(n-1) + fibfib(n-2) + fibfib(n-3); }
if(n === 0) return 0;   if(n === 1) return 0;   if(n === 2) return 1;   return fibfib(n-1) + fibfib(n-2) + fibfib(n-3); }
var ret = 0;   if(n == 0){     ret = 0;   }else if(n == 1){     ret = 0;   }else if(n == 2){     ret = 1;   }else{     var one = 0;     var two = 0;     var three = 1;     for(var i = 3; i <= n; i++){       ret = one + two + three;       one = two;       two = three;       three = ret;     }   }   return ret; }
let fib = [0,0,1]; 	for(let i = 3; i <= n; i++){ 		fib[i] = fib[i-1] + fib[i-2] + fib[i-3]; 	} 	return fib[n]; }
if(n == 0)         return 0;     if(n == 1)         return 0;     if(n == 2)         return 1;     var first = 0;     var second = 0;     var third = 1;     var sum = 0;     for(var i = 3; i <= n; i++){         sum = first + second + third;         first = second;         second = third;         third = sum;     }     return sum; }
var pre2 = 0;     var pre1 = 0;     var cur = 1;     if(n < 0){         return undefined;     }     if(n === 0){         return 0;     }     if(n === 1){         return 0;     }     if(n === 2){         return 1;     }     for(var i = 2; i < n; i++){         pre2 = pre1;         pre1 = cur;         cur = pre1 + pre2 + pre2;     }     return cur; }
let a = 0;     let b = 0;     let c = 1;     for(let i = 2; i <= n; i++){         d = a + b + c;         a = b;         b = c;         c = d;     }     return c; }
// TODO: Implement me!     if(n == 0){         return 0;     }     if(n == 1){         return 0;     }     if(n == 2){         return 1;     }     if(n >= 3){         return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);     } }
if(n<=0){         return 0;     }     if(n==1){         return 0;     }     if(n==2){         return 1;     }     return fibfib(n-1)+fibfib(n-2)+fibfib(n-3); }
var a = 0, b = 0, c = 1, d = 0;   for(var i = 2; i <= n; i++){     d = a + b + c;     a = b;     b = c;     c = d;   }   return d; }
var a = 0, b = 0, c = 1, d;   if (n == 0) return a;   if (n == 1) return b;   if (n == 2) return c;   for (var i = 3; i <= n; i++) {     d = c + b + a;     a = b;     b = c;     c = d;   }   return d; }
}
//base cases 	if(n === 0){ 		return 0; 	} 	if(n === 1){ 		return 0; 	} 	if(n === 2){ 		return 1; 	} 	//recursive cases 	else{ 		return fibfib(n-1) + fibfib(n-2) + fibfib(n-3); 	} }
let memo = [0,0,1]; 	for(let i = 3; i <= n; i++){ 		let num = memo[i-1] + memo[i-2] + memo[i-3]; 		memo.push(num); 	} 	return memo[n]; }
// YOUR CODE HERE }
// your code here }
if(strings.length===0){ 		return ''; 	} 	else{ 		return strings[0]+concatenate(strings.slice(1)); 	} }
return strings.reduce(function(a, b){         return a + b;     }, ''); }
var str = '';     for(var i = 0; i < strings.length; i++){         str += strings[i];     }     return str; }
var finalstring = "";   for (var i = 0; i < strings.length; i++) {     finalstring += strings[i];   }   return finalstring; }
var str = "";   for(var i = 0; i < strings.length; i++){     str += strings[i];   }   return str; }
return strings.reduce(         function(accumulator, value){             return accumulator + value;         }     ) }
let result = strings.reduce((acc, val) => {     return acc + val;   });   return result; }
var result = ""; 	for(var i = 0; i < strings.length; i++){ 		result += strings[i]; 	} 	return result; }
if(strings.length === 0){         return '';     } else if(strings.length === 1){         return strings[0];     } else {         return strings[0] + concatenate(strings.slice(1));     } }
//base case   if(strings.length === 0){     return '';   }   //recursive case   return strings[0] + concatenate(strings.slice(1)); }
return strings.join(''); }
var newstring = ""; 	for (var i = 0; i < strings.length; i++){ 		newstring += strings[i]; 	} 	return newstring; }
var result = "";     strings.forEach(function(str){         result += str;     });     return result; }
let newString = '';   for (let i = 0; i < strings.length; i++){     newString += strings[i];   }   return newString; }
return strings.reduce(function(string, newStr){         return string + newStr;     }, ''); }
var result = '';     for(var i = 0; i < strings.length; i++) {         result += strings[i];     }     return result; }
while (a !== b){ 		if (a > b){ 			a = a - b; 		} 		else{ 			b = b - a; 		} 	} 	return a; }
if (a % b === 0) {         return b;     }     else {         return greatest_common_divisor(b, a % b);     } }
if(b == 0){ 		return a; 	} 	else{ 		return greatest_common_divisor(b, a % b); 	} }
//... }
if(b==0){     return a;   }   else{     return greatest_common_divisor(b,a%b);   } }
var divisor = 2,         greatestDivisor = 1;      //if u pass a -ve number this will not work. fix it dude!!     if (a < 2 || b < 2)         return 1;      while(a >= divisor && b >= divisor){         if(a %divisor == 0 && b% divisor ==0){             greatestDivisor = divisor;         }         divisor++;     }     return greatestDivisor; }
// make sure a is greater than b     if (a < b){         let t = a;         a = b;         b = t;     }     // compute remainder by modulus, subtract when b > 0     let r = a % b;     while (r > 0){         a = b;         b = r;         r = a % b;     }     return b; }
var result; 	var arr = []; 	for(var i = 1; i <= a; i++){ 		if(a % i === 0){ 			arr.push(i); 		} 	} 	for(var j = 0; j < arr.length; j++){ 		if(b % arr[j] === 0){ 			result = arr[j]; 		} 	} 	return result; }
var gcd = 1;   for (var i = 2; i <= Math.min(a, b); i++) {     if (a % i == 0 && b % i == 0) {       gcd = i;     }   }   return gcd; }
var divisor = 2,          greatestDivisor = 1;      //if u pass a -ve number this will not work. fix it dude!!     if (a < 2 || b < 2)        return 1;          while(a >= divisor && b >= divisor){      if(a %divisor == 0 && b% divisor ==0){             greatestDivisor = divisor;               }      divisor++;     }     return greatestDivisor; }
let r;     while (b != 0){         r = a % b;         a = b;         b = r;     }     return a; }
if(!b){ 		return a; 	} 	return greatest_common_divisor(b, a % b); }
}
while (a !== b) {       if (a > b) {           a = a - b;       } else {           b = b - a;       }   }   return a; }
if(b===0){         return a;     }else{         return greatest_common_divisor(b, a%b);     } }
if (a<b){ 		var tmp = a; 		a = b; 		b = tmp; 	} 	var r = a % b; 	if (r==0){ 		return b; 	} 	return greatest_common_divisor(b, r); }
var divisor = 2,        greatestDivisor = 1;    //if u pass a -ve number this will not work. fix it dude!!   if (a < 2 || b < 2)      return 1;      while(a >= divisor && b >= divisor){    if(a %divisor == 0 && b% divisor ==0){       greatestDivisor = divisor;           }    divisor++;   }   return greatestDivisor; }
var arr = [a, b];   var num = 1;   var divisor = 1;   while(divisor <= Math.min(...arr)){     if(a % divisor === 0 && b % divisor === 0){       num = divisor;     }     divisor++;   }   return num; }
if(a < 0 || b < 0){     return -1;   }   else if(a < b){     if(a === 0){       return b;     }     return greatest_common_divisor(b%a, a);   }   else if(a > b){     if(b === 0){       return a;     }     return greatest_common_divisor(a%b, b);   }   else{     return a;   } }
var new_string = ""; 	for (var i = 0; i < string.length; i++){ 		if (string[i] == string[i].toUpperCase()){ 			new_string += string[i].toLowerCase(); 		} else { 			new_string += string[i].toUpperCase(); 		} 	} 	return new_string; }
var result="";   for(var i=0;i<string.length;i++){     if(string[i]===string[i].toUpperCase()){       result+=string[i].toLowerCase();     }     else{       result+=string[i].toUpperCase();     }   }   return result; }
var string = "Hello"     var newString = "";     for (var i = 0; i < string.length; i++){         if (string[i] === string[i].toUpperCase()){             newString += string[i].toLowerCase();         }         else {             newString += string[i].toUpperCase();         }     }     return newString; }
//return array of characters as strings     let str_array = string.split('');     //create empty array to push flipped characters to     let result = [];     //iterate over string array, for each element     for (let i = 0; i < str_array.length; i++){         //compare each element with it's uppercase version, if the are equal push the element to the result array with .toLowerCase() called on it.         if (str_array[i] === str_array[i].toUpperCase()){             result.push(str_array[i].toLowerCase());         } else {             result.push(str_array[i].toUpperCase());         }     }     //print and return the result array joined together to a string     console.log(result.join(''));     return result.join(''); }  flip_case('Hello');
var new_string = "";     for(var i = 0; i < string.length; i++){         if(string[i] === string[i].toUpperCase()){             new_string += string[i].toLowerCase();         }         else{             new_string += string[i].toUpperCase();         }     }     return new_string; }
return string.split('').map(function(char){ 		return (char === char.toUpperCase()) ? char.toLowerCase() : char.toUpperCase(); 	}).join(''); }
var flipped = '';     for (var i = 0; i < string.length; i++){         if (string[i] === string[i].toUpperCase()){             flipped += string[i].toLowerCase();         }         else{             flipped += string[i].toUpperCase();         }     }     return flipped; }
var newstr = '';     for (var i = 0; i < string.length; i++){         if (string[i] == string[i].toUpperCase()){             newstr += string[i].toLowerCase();         } else {             newstr += string[i].toUpperCase();         }     }     return newstr; }
var convertedString = "";     for(var i = 0; i < string.length; i++){         if(string[i] === string[i].toUpperCase()){             convertedString += string[i].toLowerCase();         }         else{             convertedString += string[i].toUpperCase();         }     }     return convertedString; }
var str = string.split('');   for(i = 0; i < str.length; i++){     if(str[i] == str[i].toUpperCase()){       str[i] = str[i].toLowerCase();     } else {       str[i] = str[i].toUpperCase();     }   }   return str.join(''); }
var newString = '';     for (i=0; i<string.length; i++){         if (string[i] === string[i].toUpperCase()){             newString += string[i].toLowerCase();         } else {             newString += string[i].toUpperCase();         }     }     return newString; }
var splitString = string.split("");     var newString = "";     for (var i = 0; i < splitString.length; i++){         if (splitString[i] === splitString[i].toUpperCase()){             newString += splitString[i].toLowerCase();         } else {             newString += splitString[i].toUpperCase();         }     }     return newString; }
var flipped_string = '';     for (var i = 0; i < string.length; i++){         if (string[i] == string[i].toUpperCase()){             flipped_string += string[i].toLowerCase();         } else if (string[i] == string[i].toLowerCase()){             flipped_string += string[i].toUpperCase();         }     }     return flipped_string; }
let newString = '';     for(let i = 0; i < string.length; i++){         if(string[i] === string[i].toUpperCase()){             newString += string[i].toLowerCase();         } else {             newString += string[i].toUpperCase();         }     }     return newString; }
var newString = '';     for (var i = 0; i < string.length; i++){         if (string[i] === string[i].toUpperCase()){             newString += string[i].toLowerCase();         } else if (string[i] === string[i].toLowerCase()){             newString += string[i].toUpperCase();         }     }     return newString; }
var str = '';     for(var i = 0; i < string.length; i++){         if(string[i] === string[i].toUpperCase()){             str += string[i].toLowerCase();         }         else{             str += string[i].toUpperCase();         }     }     return str; }
return string.split('').map(function(char){         if(char === char.toUpperCase()){             return char.toLowerCase();         }         return char.toUpperCase();     }).join(''); }
var result = "";   for (var i = 0; i < string.length; i++){     var letter = string[i];     if (letter === letter.toUpperCase()){       result += letter.toLowerCase();     } else {       result += letter.toUpperCase();     }   }   return result; }
var res = "";     for(var i = 0; i < string.length; i++){         if(string[i] === string[i].toUpperCase()){             res += string[i].toLowerCase();         }         else{             res += string[i].toUpperCase();         }     }     return res; }
for(var i = 1; i <= x; i++){         if(n**i === x){             return true;         }     }     return false; }
return Math.round(Math.log(x)/Math.log(n)) == Math.log(x)/Math.log(n); }
let powerNum = n;   let simplePower = true;   while(powerNum <= x){     if(powerNum === x){       simplePower = true;       break;     }     powerNum *= n;     simplePower = false;   }   return simplePower; }
//your code here     return Number.isInteger(Math.log2(x)/Math.log2(n)); }
return (Math.log(x) / Math.log(n)) % 1 === 0; }
return x == Math.pow(n, x.toString().split('').reverse().join('')); }
for(let i = 0; i < x; i++){         if(Math.pow(n, i) === x){             return true;         }     }     return false; }
}
if(n**Math.floor(Math.log(x)/Math.log(n)) == x) return true;   return false; }
var x_root = Math.sqrt(x);   var x_root_int = parseInt(x_root);   return Math.pow(n, x_root_int) === x; }
let test = Math.log(x) / Math.log(n);     return test % 1 === 0; }
return Number.isInteger(Math.log(x)/Math.log(n)); }
let k = Math.log(x) / Math.log(n);     return k.toString().indexOf(".") == -1 ? true : false; }
let count = 0;     while(x > 1){         x = x / n;         count++;     }     return x === 1 && count === 1 ? true : false; }
return Number.isInteger(Math.log2(x) / Math.log2(n)); }
return Math.log(x) / Math.log(n) % 1 === 0; }
if(x==n){         return true;     }     let product = 0;     let i = 2;     while(product < x){         product = n**i;         if(product == x){             return true;         }         i++;     }     return false; }
let power = Math.log(x) / Math.log(n);     return Number.isInteger(power); }
return x === Math.pow(n, Math.log(x) / Math.log(n)) }
let result = []; 	let curr = null; 	let min = Number.MAX_SAFE_INTEGER; 	let r = grid.length; 	let c = grid[0].length; 	for(let i = 0; i < r; i++){ 		for(let j = 0; j < c; j++){ 			let queue = []; 			let path = new Set(); 			path.add(`${i},${j}`); 			queue.push([[i,j], path]); 			while(queue.length){ 				let [ [x,y], path ] = queue.shift(); 				if(path.size === k){ 					let lst = []; 					path.forEach( el => { 						lst.push(grid[el.split(',')[0]][el.split(',')[1]]); 					}); 					if(lst < min){ 						min = lst; 						curr = lst; 					} 				} 				if(path.size < k){ 					if(x > 0 && !path.has(`${x-1},${y}`)){ 						let newPath = new Set(path); 						newPath.add(`${x-1},${y}`); 						queue.push([[x-1,y], newPath]); 					} 					if(x < r-1 && !path.has(`${x+1},${y}`)){ 						let newPath = new Set(path); 						newPath.add(`${x+1},${y}`); 						queue.push([[x+1,y], newPath]); 					} 					if(y > 0 && !
if(k === 0) return [];   var smallestPath = undefined;   for(var i = 0; i < grid.length; i++){     for(var j = 0; j < grid[i].length; j++){       var newPath = dfs(grid, i, j, k, [grid[i][j]]);       if(!smallestPath){         smallestPath = newPath;       }else{         if(lessThan(newPath, smallestPath)){           smallestPath = newPath;         }       }     }   }   return smallestPath; }
let n = grid.length; 	let width = grid[0].length; 	function createQueue(path, start){ 		return new PriorityQueue((a,b)=>{ 			let sumA = (path[a.r] || 0) + a.val; 			let sumB = (path[b.r] || 0) + b.val; 			if(sumA < sumB){ 				return true; 			} 			if(sumA > sumB){ 				return false; 			} 			return a.c < b.c; 		}); 	} 	function createResult(path, start){ 		let result = []; 		let current = start; 		while(current){ 			result.push(current.val); 			current = path[current.r]; 		} 		return result; 	} 	let queue = createQueue([],{r:0,c:0,val:grid[0][0]}); 	for(let i = 0; i < n; i++){ 		for(let j = 0; j < width; j++){ 			let current = {r:i,c:j,val:grid[i][j]}; 			queue.push(current); 		} 	} 	for(let i = 0; i < k; i++){ 		let current = queue.pop(); 		console.log(current); 		if(i === k - 1){ 			return createResult([],current); 		} 		if(current.r - 1 >= 0){ 			queue.push({r:current.r - 1,c:current.c,val:grid[current.r - 1][current.c]}); 		} 		if(current.r + 1 < n){ 			queue.push({r:current.r + 1,c:current.c,val:grid[current.r + 1][current.c]}); 		} 		if(current.c - 1 >= 0
let path = [grid[0][0]];     let visited = new Set();     visited.add(grid[0][0]);     let col = 0;     let row = 0;     let num = grid[0][0];     let minPath = [];     let maxNum = Math.max(...grid.flat());     for(let i = 1; i < k; i++){         visited.add(num);         let nums = [             num+1,             num-1,             num-maxNum,             num+maxNum         ];         let min = Infinity;         let minIndex = -1;         nums.forEach((n, index) => {             if(n >= 1 && n <= maxNum){                 if(!visited.has(n)){                     if(n < min){                         min = n;                         minIndex = index;                     }                 }             }         });         if(minIndex === 0){             col++;         }         if(minIndex === 1){             col--;         }         if(minIndex === 2){             row--;         }         if(minIndex === 3){             row++;         }         path.push(min);         num = min;     }     return path; } let grid = [     [1,2,3],     [4,5,6],     [7,8,9] ]; let k = 3;
var memo = {}; 	var w = grid[0].length; 	var h = grid.length; 	var s = [0,0,1]; 	var vis = new Array(h); 	for(var i = 0; i < h; i++){ 		vis[i] = new Array(w); 		for(var j = 0; j < w; j++){ 			vis[i][j] = 0; 		} 	} 	vis[0][0] = 1; 	var result = new Array(k); 	result[0] = grid[0][0]; 	var curr; 	while(s.length > 0){ 		curr = s.pop(); 		// console.log(curr); 		var x = curr[0]; 		var y = curr[1]; 		var count = curr[2]; 		if(count >= k){ 			return result; 		} 		if(x < h-1 && vis[x+1][y] == 0){ 			vis[x+1][y] = 1; 			s.push([x+1,y,count+1]); 			if(count == k-1){ 				result[count] = grid[x+1][y]; 			} 		} 		if(x > 0 && vis[x-1][y] == 0){ 			vis[x-1][y] = 1; 			s.push([x-1,y,count+1]); 			if(count == k-1){ 				result[count] = grid[x-1][y]; 			} 		} 		if(y < w-1 && vis[x][y+1] == 0){ 			vis[x][y+1] = 1; 			s.push([x,y+1,count+1]); 			if(count == k-1){ 				result[count] = grid[x][y+1];
//if k is 1 return the cell with the lowest value in the grid     if(k === 1){         let min = Infinity;         let minVal = 0;         for(let i = 0; i < grid.length; i++){             for(let j = 0; j < grid[i].length; j++){                 if(grid[i][j] < min){                     min = grid[i][j];                     minVal = min;                 }             }         }         return [minVal];     }      //loop through the grid and find the first smallest value     let min = Infinity;     let minCell;     for(let i = 0; i < grid.length; i++){         for(let j = 0; j < grid[i].length; j++){             if(grid[i][j] < min){                 min = grid[i][j];                 minCell = [i, j];             }         }     }      //create a set to keep track of visited cells     let visited = new Set();     visited.add(minCell.toString());      //get all the neighbors of the minimum cell     let neighbors = getNeighbors(grid, minCell[0], minCell[1]);      //create a result array to store the path     let result = [min];      //while k > 1 traverse the grid     while(k > 1){         //create a min variable to keep track of the smallest value         let min = Infinity;         let minCell;         let minVal;         //loop through the neighbors         for(let cell of neighbors){             //if the value of the cell is less than the minimum value and             //the cell has not been visited then change the minimum value and cell             if(grid[cell[0]][cell[1]] < min && !visited.has(cell.toString())){                 min = grid[cell[0]][cell[1]];                 minCell = cell;                 minVal = min;             }         }         //add the min cell to the set         visited.add(minCell.toString());         //decrement k
if(grid.length < 1 || grid[0].length < 1 || k < 1) return [];     let n = grid.length;     let m = grid[0].length;     let queue = [];     let visited = new Array(n);     for(let i = 0; i < n; i++){         visited[i] = new Array(m).fill(false);     }     queue.push([0, 0, grid[0][0], [grid[0][0]]]);     visited[0][0] = true;     while(queue.length > 0){         let [i, j, sum, path] = queue.shift();         if(sum > k) continue;         if(sum === k) return path;         for(let [dx, dy] of [[0, 1], [0, -1], [1, 0], [-1, 0]]){             let x = i + dx;             let y = j + dy;             if(x < 0 || x >= n || y < 0 || y >= m || visited[x][y]) continue;             visited[x][y] = true;             queue.push([x, y, sum + grid[x][y], [...path, grid[x][y]]]);         }     }     return []; }
//check if k is less than the length of grid squared.     //if it is, return an empty array     if(k < grid.length * grid.length){         return [];     }      //function to create a 2D array     function create2DArray(rows, cols){         let array = new Array(rows);         for(let i = 0; i < rows; i++){             array[i] = new Array(cols);         }         return array;     }      //create a 2D array to store the number of steps required to reach     //each cell     let steps = create2DArray(grid.length, grid.length);      //fill the steps array with -1     for(let i = 0; i < grid.length; i++){         for(let j = 0; j < grid.length; j++){             steps[i][j] = -1;         }     }      //function to find the next cell     function findNextCell(i, j, steps, grid){         //create an array to store the next cell         let next = [-1, -1];         //create a 2D array to store the neighbors of a cell         let neighbors = [             [-1, 0],             [0, 1],             [1, 0],             [0, -1]         ];         //set the minimum steps to grid length         let min = grid.length;         //loop through all the neighbors         for(let k = 0; k < neighbors.length; k++){             //check if the neighbor is within the grid bounds             if(i + neighbors[k][0] >= 0 && i + neighbors[k][0] < grid.length && j + neighbors[k][1] >= 0 && j + neighbors[k][1] < grid.length){                 //check if the neighbor has not been visited                 if(steps[i + neighbors[k][0]][j + neighbors[k][1]] == -1){                     //if the neighbor has not been visited, check if the current                     //cell has a smaller value                     if(grid[i][j] < grid[i + neighbors[k][
let v_hash = {};   let h_hash = {};   let min_path = [];   let min_sum = Infinity;   let N = grid.length;   let cells = new Set();   let results = [];   // check length of grid, if it is not square, return error   if (grid.length !== grid[0].length) return 'grid is not square';   for (let i = 0; i < N; i++){     for (let j = 0; j < N; j++){       if (v_hash[i]) v_hash[i].push(grid[i][j]);       else v_hash[i] = [grid[i][j]];       if (h_hash[j]) h_hash[j].push(grid[i][j]);       else h_hash[j] = [grid[i][j]];       cells.add(grid[i][j]);     }   }   // helper function to find minimum sum path   const dfs = (path, sum, row, col, step) => {     if (step === k){       if (sum < min_sum){         min_sum = sum;         min_path = path;       }       return;     }     let right = grid[row][col + 1];     let down = grid[row + 1][col];     if (right && col < N - 1){       let nums = v_hash[row].slice(col, col + 2);       let new_sum = sum + Math.min(...nums);       dfs(path.concat(nums), new_sum, row, col + 1, step + 1);     }     if (down && row < N - 1){       let nums = h_hash[col].slice(row, row + 2);       let new_sum = sum + Math.min(...nums);       dfs(path.concat(nums), new_sum, row + 1, col, step + 1);     }   }   // iterate through each cell in the grid   for (let i = 0; i <
}
let n = grid.length;   let result = [];   let visited = [];   let minPath = [];   let minPathSum = Number.MAX_SAFE_INTEGER;   for(let i = 0; i < n; i++){     visited.push([]);     for(let j = 0; j < n; j++){       visited[i].push(false);     }   }   for(let i = 0; i < n; i++){     for(let j = 0; j < n; j++){       let path = [];       path.push(grid[i][j]);       visited[i][j] = true;       dfs(grid, k, 1, i, j, visited, path, 0);       visited[i][j] = false;     }   }   return minPath;   function dfs(grid, k, depth, i, j, visited, path, sum){     if(depth === k){       if(sum < minPathSum){         minPathSum = sum;         minPath = path.slice();       }       return;     }     let dirs = [[0, 1], [0, -1], [1, 0], [-1, 0]];     for(let d = 0; d < dirs.length; d++){       let newI = i + dirs[d][0];       let newJ = j + dirs[d][1];       if(newI >= 0 && newI < n && newJ >= 0 && newJ < n && !visited[newI][newJ]){         path.push(grid[newI][newJ]);         visited[newI][newJ] = true;         dfs(grid, k, depth + 1, newI, newJ, visited, path, sum + grid[newI][newJ]);         visited[newI][newJ] = false;         path.pop();       }     }   } }
// let seen = new Set()     let paths = []     let recurse = (row, col, path) => {         // console.log(row, col, path, k, grid[row][col])         if(k === 0) {             // console.log('paths before push', paths)             // console.log('paths after push', paths)             paths.push(path)             return         }         if(row < 0 || row >= grid.length || col < 0 || col >= grid[0].length) return         // if(seen.has(`${row}-${col}`)) return         // seen.add(`${row}-${col}`)         let temp = grid[row][col]         grid[row][col] = -1         recurse(row - 1, col, path.concat(temp))         recurse(row + 1, col, path.concat(temp))         recurse(row, col - 1, path.concat(temp))         recurse(row, col + 1, path.concat(temp))         grid[row][col] = temp     }     for(let i = 0; i < grid.length; i++){         for(let j = 0; j < grid[0].length; j++){             recurse(i, j, [])         }     }     paths.sort((a, b) => {         for(let i = 0; i < Math.min(a.length, b.length); i++){             if(a[i] < b[i]) return -1             if(a[i] > b[i]) return 1         }         return a.length - b.length     })     // return paths     return paths[0] }  grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3
var solution = [[]];   var current = 0;   var last = 0;   while(k > 0){     k--;     last = current;     current = 1 - current;     solution[current] = [];     for(var i = 0; i < grid.length; i++){       for(var j = 0; j < grid[0].length; j++){         var minValue = grid[i][j];         var minPath = [grid[i][j]];         if(i > 0){           if(solution[last][(i - 1) * grid[0].length + j][0] < minValue){             minValue = solution[last][(i - 1) * grid[0].length + j][0];             minPath = solution[last][(i - 1) * grid[0].length + j].slice();           }else if(solution[last][(i - 1) * grid[0].length + j][0] === minValue){             var newPath = solution[last][(i - 1) * grid[0].length + j].slice();             if(lexicographicalCompare(newPath, minPath)){               minPath = newPath;             }           }         }         if(i < grid.length - 1){           if(solution[last][(i + 1) * grid[0].length + j][0] < minValue){             minValue = solution[last][(i + 1) * grid[0].length + j][0];             minPath = solution[last][(i + 1) * grid[0].length + j].slice();           }else if(solution[last][(i + 1) * grid[0].length + j][0] === minValue){             var newPath = solution[last][(i + 1) * grid[0].length + j].slice();             if(lexicographicalCompare(newPath, minPath)){               minPath = newPath;             }           }         }         if(j > 0){           if(solution[last][i * grid[0].length + j - 1][0] < min
let result = []     let gridHash = {}     for(let r = 0; r < grid.length; r++){         for(let c = 0; c < grid[0].length; c++){             gridHash[grid[r][c]] = [r, c]         }     }     if(k === 1){         return [grid[0][0]]     }     else if(k === 2){         let validNeighbors = checkNeighbors(grid, gridHash[1][0], gridHash[1][1])         return findMin(grid, gridHash, validNeighbors, [1], k)     }     else{         let validNeighbors = checkNeighbors(grid, gridHash[1][0], gridHash[1][1])         return findMin(grid, gridHash, validNeighbors, [1], k)     } }
var n = grid.length; 	var m = grid[0].length; 	var visited = new Array(n); 	for(var i = 0; i < n; i++){ 		visited[i] = new Array(m); 		for(var j = 0; j < m; j++){ 			visited[i][j] = false; 		} 	} 	var res = []; 	var step = k; 	var dx = [0, 0, 1, -1]; 	var dy = [1, -1, 0, 0]; 	for(var i = 0; i < n; i++){ 		for(var j = 0; j < m; j++){ 			helper(grid, i, j, step, visited, res, dx, dy); 		} 	} 	console.log(res); 	return res; }
//get all valid paths   //valid paths have length k   //sort the paths with lexicographic   //return the first path } module.exports = {minPath}
function gridHelper(grid, i, j, N, k, res){         if(k === 0){             res.push([]);             return;         }         for(let key in grid){             gridHelper(grid, key[0], key[1], N, k-1, res);         }     }     var N = grid.length;     var res = [];     gridHelper(grid, 0, 0, N, k, res);     for(let i = 0; i < res.length; i++){         for(let j = 0; j < res[i].length; j++){             res[i][j] = grid[res[i][j][0]][res[i][j][1]];         }     }     res.sort();     return res[0]; }
const values = [];   const DFS = (row, col, count) => {     if(grid[row][col] === null) return;     values.push(grid[row][col]);     if(count === k) return;     const temp = grid[row][col];     grid[row][col] = null;     if(row > 0) DFS(row - 1, col, count + 1);     if(row < grid.length - 1) DFS(row + 1, col, count + 1);     if(col > 0) DFS(row, col - 1, count + 1);     if(col < grid[0].length - 1) DFS(row, col + 1, count + 1);     grid[row][col] = temp;   }   for(let i = 0; i < grid.length; i++){     for(let j = 0; j < grid[0].length; j++){       DFS(i, j, 0);       if(values.length === k) return values;       values.length = 0;     }   }   return null; }
for(i=0; i<=numbers.length; i++){         for(j=0; j<=numbers.length; j++){             if(numbers[i] === numbers[j] && i !== j){                 numbers.splice(j, 1);             }         }     }     return numbers; }
var number_string = numbers.join('');     var dict = {};     var result = [];     for (var i = 0; i < number_string.length; i++){         var n = number_string[i];         if (!dict[n]){             dict[n] = 1;         }         else {             dict[n] += 1;         }     }     for (var key in dict){         if (dict[key] === 1){             result.push(key);         }     }     return result; }
let arr = []     for(let i = 0; i < numbers.length; i++){         if(arr.indexOf(numbers[i]) == -1){             arr.push(numbers[i])         }     }     return arr }
let obj = {};     let temp = [];     numbers.forEach(function(number){         if(obj[number] === undefined){             obj[number] = number;             temp.push(number);         }     });     return temp; }
return numbers.filter((element, index) => numbers.indexOf(element) === index); }
if(!Array.isArray(numbers)){         throw "Input is not an array";     }     let found = [];     return numbers.filter(function(number){         if(found.indexOf(number) === -1){             found.push(number);             return true;         }         return false;     }); }
var output = [];     for (var i = 0; i < numbers.length; i++){         for (var j = 0; j < numbers.length; j++){             if (numbers[i] == numbers[j] && i != j){                 if (output.indexOf(numbers[i]) == -1){                     output.push(numbers[i]);                 }             }         }     }     return output; }
var result = [];     var hash = {};     for(var i=0; i<numbers.length; i++){         if(hash[numbers[i]] == undefined){             hash[numbers[i]] = 1;             result.push(numbers[i]);         }     }     return result; }
var new_array = [];   for (var i = 0; i < numbers.length; i++) {     if (new_array.indexOf(numbers[i]) === -1) {       new_array.push(numbers[i]);     }   }   return new_array; }
var exists = {},         outArr = [],         elm;      for(var i =0; i<numbers.length; i++)     {         elm = numbers[i];         if(!exists[elm])         {             outArr.push(elm);             exists[elm] = true;         }     }     return outArr; }
let newNumbers = [];     for(let i = 0; i < numbers.length; i++){         if(numbers.indexOf(numbers[i]) === i){             newNumbers.push(numbers[i]);         }     }     return newNumbers; }
for(var i = 0; i < numbers.length; i++){         for(var j = 0; j < numbers.length; j++){             if(numbers[i] === numbers[j] && i !== j){                 numbers.splice(j, 1);             }         }     }     return numbers; }
let unique_numbers = [];     let unique_count = 0;     let unique_set = new Set();     for(let num of numbers){         if(!unique_set.has(num)){             unique_numbers[unique_count] = num;             unique_count++;             unique_set.add(num);         }     }     return unique_numbers; }
var new_numbers = [];     for (var i = 0; i < numbers.length; i++){         if (new_numbers.indexOf(numbers[i]) < 0){             new_numbers.push(numbers[i]);         }     }     return new_numbers; }  var numbers = [1, 2, 3, 2, 4];
let output = [];     for(let i = 0; i < numbers.length; i++){         let found = false;         for(let j = 0; j < output.length; j++){             if(numbers[i] === output[j]){                 found = true;             }         }         if(!found){             output.push(numbers[i]);         }     }     return output; }
var result = [];     for (var i = 0; i < numbers.length; i++){         var num = numbers[i];         if (result.indexOf(num) === -1){             result.push(num);         }     }     return result; }
const uniques = new Set();     return numbers.filter(number => {         if(uniques.has(number)){             return false;         }         uniques.add(number);         return true;     }); }
const set = new Set(numbers);     return [...set]; }
var unique = [];     for (var i = 0; i < numbers.length; i++) {         var n = numbers[i];         if (unique.indexOf(n) == -1) {             unique.push(n);         }     }     return unique; }
var out = [];     for (var i = 0; i < lst.length; i++){         var current = lst[i];         var count = 0;         for (var j = 0; j < current.length; j++){             if (current[j] % 2 === 1){                 count++;             }         }         out.push("the number of odd elements " + count + "n the str" + i + "ng " + i + " of the " + i + "nput.");     }     return out; }
return lst.map(function(num_str){         var count = 0;         for(var i = 0; i < num_str.length; i++){             if(parseInt(num_str[i]) % 2 === 1){                 count++;             }         }         var num_str_array = num_str.split("");         for(var i = 0; i < num_str_array.length; i++){             if(parseInt(num_str_array[i]) % 2 === 0){                 num_str_array[i] = "n";             }         }         num_str_array[num_str_array.length - 1] = "t";         num_str_array.unshift("e");         num_str_array.splice(2, 0, "umber");         num_str_array.splice(8, 0, " ");         num_str_array.splice(num_str_array.length - 4, 0, "the n");         return num_str_array.join("");     }); }
return lst.map(function(v){         var c = 0;         for(var i=0; i<v.length; i++){             if(v[i]%2 != 0){                 c++;             }         }         return "the number of odd elements " + c + "n the str" + c + "ng " + c + " of the " + c + "nput.";     }); }
return lst.map(function(n){     var num = n.split('').reduce(function(a,b){       if(+b % 2){         a += +b;       }       return a;     },0);     return 'the number of odd elements ' + num + 'n the str' + num + 'ng ' + num + ' of the ' + num + 'nput.';   }); }
var odds = 0;   var new_lst = [];   for (var i = 0; i < lst.length; i++){     for (var j = 0; j < lst[i].length; j++){       if (lst[i][j] % 2 === 1){         odds++;       }     }     new_lst.push("the number of odd elements " + odds + "n the str" + i + "ng " + i + " of the " + i + "nput.");     odds = 0;   }   return new_lst; }
let newLst = []     for(let i = 0; i < lst.length; i++){         let oddCt = 0         for(let j = 0; j < lst[i].length; j++){             if(parseInt(lst[i][j]) % 2 == 1){                 oddCt++             }         }         newLst.push(`the number of odd elements ${oddCt}n the str${oddCt}ng ${oddCt} of the ${oddCt}nput.`)     }     return newLst }
return lst.map(function(x) {     return "the number of odd elements " + x.replace(/[^13579]/g, "").length + "n the str" + x.replace(/[^13579]/g, "").length + "ng " + x.replace(/[^13579]/g, "").length + " of the " + x.replace(/[^13579]/g, "").length + "nput.";   }); }
// your code here     let odd_digits = [];     for (let str of lst){         let str_odd = 0;         for (let ch of str){             if (parseInt(ch) % 2 !== 0){                 str_odd++;             }         }         odd_digits.push(str_odd);     }     let str_arr = [];     for (let i = 0; i < lst.length; i++){         let str = "the number of odd elements " + odd_digits[i] + "n the str" + lst[i] + "ng " + i + " of the " + i + "nput.";         str_arr.push(str);     }     return str_arr; }
var result = [];   for (var i = 0; i < lst.length; i++){     var sub = lst[i].split("");     var count = 0;     for (var j = 0; j < sub.length; j++){       if (sub[j] % 2 == 1){         count += 1;       }     }     result.push("the number of odd elements " + count + "n the str" + count + "ng " + count + " of the " + count + "nput.");   }   return result; }
var new_lst = []; 	for (var i = 0; i < lst.length; i++){ 		var word = lst[i]; 		var count = 0; 		for (var j = 0; j < word.length; j++){ 			if (word[j]%2 != 0){ 				count++; 			} 		} 		var string = "the number of odd elements " + count + "n the str" + count + "ng " + count + " of the " + count + "nput."; 		new_lst.push(string); 	} 	return new_lst; }
return lst.map(function(string){     var odd = 0;     string.split('').forEach(function(n){       if(n % 2 != 0){         odd++;       }     });     return "the number of odd elements " + odd + "n the str" + odd + "ng " + odd + " of the " + odd + "nput.";   }); }
let count = 0;     let output = '';     for(let i = 0; i < lst.length; i++){         for(let k = 0; k < lst[i].length; k++){             if(lst[i][k] % 2 === 1){                 count++;             }         }         let str = "the number of odd elements "+count+"n the str"+i+"ng "+i+" of the "+i+"nput.";         output += str;         count = 0;     }     return output; }
let res = [];     for (let i = 0; i < lst.length; i++){         let counter = 0;         for (let j = 0; j < lst[i].length; j++){             if (lst[i][j] % 2 === 1){                 counter += 1;             }         }         res.push(`the number of odd elements ${counter}n the str${counter}ng ${counter} of the ${counter}nput.`);     }     return res; }
return lst.map(function(x){         var odd = 0;         for(var i = 0; i < x.length; i++){             if(x[i] % 2 != 0){                 odd ++;             }         }         return "the number of odd elements " + odd + "n the str" + odd + "ng " + odd + " of the " + odd + "nput.";     }); }
let counter = "";     let result = [];     for(let string of lst){         for(let digit of string){             if(parseInt(digit) % 2 == 1){                 counter++;             }         }         result.push(`the number of odd elements ${counter}n the str${counter}ng ${counter} of the ${counter}nput.`);         counter = "";     }     return result; }
var result = [];   var count = 0;   var count_odd = 0;   for(var i = 0; i < lst.length; i++){     var num = lst[i];     while(count < num.length){       if(Number(num[count]) % 2 !== 0){         count_odd += 1;       }       count += 1;     }     result.push("the number of odd elements " + count_odd + "n the str" + count_odd + "ng " + count_odd + " of the " + count_odd + "nput.");     count = 0;     count_odd = 0;   }   return result; }
}
var num = 1;   var ans = [];   for(var i = 0; i < lst.length; i++){     for(var j = 0; j < lst[i].length; j++){       var count = 0;       var x = parseInt(lst[i][j]);       if(x % 2 !== 0){         count += 1;       }     }     var str = "the number of odd elements " + count + "n the str" + num + "ng " + num + " of the " + num + "nput.";     ans.push(str);     num += 1;   }   return ans; }
var arr = [];     for(var i = 0; i < lst.length; i++){         var num = 0;         for(var j = 0; j < lst[i].length; j++){             if(parseInt(lst[i][j]) % 2 == 1){                 num++;             }         }         arr.push(num);     }     for(var i = 0; i < arr.length; i++){         var str = lst[i];         var spl = str.split('');         for(var j = 0; j < spl.length; j++){             if(parseInt(spl[j]) % 2 == 1){                 spl[j] = arr[i];             }         }         lst[i] = spl.join('');     }     return lst; }
}
return x + y; }
//return parseInt(x) + parseInt(y);     return parseInt(x) + parseInt(y); }
return x + y; }
return x + y; }
return x + y; }
if(typeof x === 'number' && typeof y === 'number'){ 		return x + y; 	} else { 		return 'Please enter valid numbers.'; 	} }
// make the string palindromic - a string that's the same forwards and backwards   if(!string.length) return string;    // Find the longest palindromic postfix.   var palindrome_reversed = '';   for(var i = string.length - 1; i >= 0; i--){     // as we decrease i, test if the string ends in a palindrome     if(is_palindrome(string.substring(i))){       // we found a palindrome       palindrome_reversed = string.substring(i).split('').reverse().join('');       break;     }   }    // return the string with a reversed prefix appended to the end   return string + palindrome_reversed; }
var longest_palindrome = longest_palindrome_postfix(string);     var palindrome_prefix = string.substring(0, string.length - longest_palindrome.length);     return string + reverse(palindrome_prefix); }
var reverse = string.split('').reverse().join(''),         palindrome_postfix_length = 0;     while(palindrome_postfix_length < string.length){         if(string.substr(0, string.length - palindrome_postfix_length) === reverse.substr(palindrome_postfix_length)){             break;         }         palindrome_postfix_length++;     }     return string + reverse.substr(palindrome_postfix_length); }
var length = string.length;     if(length < 2){         return string;     }     if(string === string.split('').reverse().join('')){         return string;     }     var i;     var palindrome = [];     for(i = 0; i < length; i++){         palindrome.push(string[i]);         var reversed = palindrome.slice(0).reverse();         var joined = palindrome.concat(reversed);         var joined_string = joined.join('');         if(joined_string === joined_string.split('').reverse().join('')){             return joined_string;         }     } }
string = string.toLowerCase();     if(!is_palindrome(string)){         return string + reverse(string.substring(0, longest_postfix_palindrome(string)+1));     }     return string; }
var new_string = "";     var i = string.length;     var pal_length = 0;     for(i; i>0; i--){         for(j=0; j<i; j++){             if(string[j] === string[i-1]){                 pal_length += 1;             }             else {                 break;             }         }         if(pal_length === i){             break;         }         else {             pal_length = 0;         }     }     new_string = string + string.slice(pal_length).split("").reverse().join("");     return new_string; }
//Find the first half of the palindrome.     if(string == ""){         return "";     }     var palindrome = string;     var index_at_palindrome = 0;     var found_palindrome = false;     while(!found_palindrome){         var one_half_of_palindrome = palindrome.substring(0,index_at_palindrome);         var reverse_of_one_half_of_palindrome = reverse(one_half_of_palindrome);         if(palindrome.endsWith(reverse_of_one_half_of_palindrome)){             found_palindrome = true;         }         else{             index_at_palindrome++;         }     }     var string_before_palindrome = string.substring(0,index_at_palindrome);     var reverse_of_string_before_palindrome = reverse(string_before_palindrome);     return string + reverse_of_string_before_palindrome; }
if (string.length < 2) return string   const last_index = string.length - 1   for (let i = string.length - 1; i >= 0; i--){     let reverse_index = last_index - i     if (string[i] === string[reverse_index]) {       if (is_palindrome(string.slice(0, i))) {         let prefix = string.slice(0, reverse_index)         return string + prefix.split('').reverse().join('')       }     }   }   return string }
// sanity checks     if (string.length == 0){         return '';     }      // search for the palindromic suffix     var suffix = string.length;     while (suffix > 0 && string.substring(0, suffix) != string.substring(string.length - suffix, string.length).split('').reverse().join('')){         suffix -= 1;     }      // compute the string prefix that comes before the palindromic suffix     var prefix = string.substring(0, string.length - suffix);      // reverse the string prefix     prefix = prefix.split('').reverse().join('');      // concatenate the string prefix and the original string     return prefix + string; }
var palindrome_end = 0;     var index = 0;     var copy = string;     var palindrome = "";     for(var i = 1; i < string.length; i++){         //If string[i] is equal to string[0]         if(string[i] == string[0]){             //Concatenate both characters to a new string             var new_string = string[0] + string[i];             //Check if new_string is a palindrome             if(check_palindrome(new_string)){                 //If it is a palindrome, replace old palindrome_end with new one.                 palindrome_end = i;             }         }     }     //Keep adding characters to palindrome to prepare it for final return.     while(index < string.length){         if(index < palindrome_end){             palindrome += string[index];         }else{             palindrome += string[string.length - 1 - index];         }         index += 1;     }     return palindrome; }
var palindrome_postfix = get_palindrome_postfix(string);     var prefix = string.substring(0,string.length-palindrome_postfix.length);     return string + reverse(prefix); }
if(string === ''){         return '';     }     var palindrome = string;     while(true){         if(is_palindrome(palindrome)){             break;         }         palindrome = palindrome.slice(0, palindrome.length - 1);     }     var prefix = string.slice(palindrome.length, string.length);     var reverse_prefix = prefix.split('').reverse().join('');     return string + reverse_prefix; }
// Check if the supplied string is a palindrome.   if (is_palindrome(string)){     return string;   }   // Find the longest suffix that is a palindrome.   var palindrome_length = 0;   var last_index = string.length - 1;   for (var i = 0; i < last_index; i++){     var string_length = last_index - i + 1;     var prefix = string.substring(0, string_length);     if (is_palindrome(prefix)){       palindrome_length = string_length;       break;     }   }   // Append to the end of the string reverse of the prefix that comes before the palindromic suffix.   var prefix = string.substring(0, last_index - palindrome_length + 1);   var reverse_prefix = reverse(prefix);   var result = string + reverse_prefix;   return result; }
function is_palindrome(string){ 		var is_palindrome = true; 		for(var i = 0; i < string.length/2; i++){ 			if(string[i] != string[string.length - 1 - i]){ 				is_palindrome = false; 				break; 			} 		} 		return is_palindrome; 	} 	var suffix = ""; 	for(var i = string.length; i >= 0; i--){ 		if(is_palindrome(string.substring(i))){ 			suffix = string.substring(i); 			break; 		} 	} 	var prefix = string.substring(0, string.length - suffix.length); 	var result = ""; 	for(var i = prefix.length - 1; i >= 0; i--){ 		result += prefix[i]; 	} 	return string + result; }
if(string == "")     return "";   string += '^';   var first_half = string;   var second_half = string.split("").reverse().join("");   var z = compute_z(first_half+second_half);   var end = find_max(z);   var prefix = first_half.slice(0,first_half.length-end-1);   return first_half + prefix.split("").reverse().join(""); }
var reversed_string = string.split('').reverse().join('');     var min_length = string.length;     var prefix = '';     var suffix = '';     var longest_match = 0;     for (var i = 0; i < min_length; i++) {         var substring = string.substring(0, min_length - i);         if (reversed_string.indexOf(substring) === 0) {             longest_match = substring.length;             suffix = substring;             prefix = string.substring(longest_match);             break;         }     }     return prefix + suffix + reversed_string.substring(longest_match); }
var tstring = string.substring(0, string.length/2);     var rtstring = tstring.split("").reverse().join("");     var suffix = string.substring(tstring.length, string.length);     var palindrome = string + rtstring;     if (suffix == rtstring) {         return palindrome;     }     for (var i = 0; i < tstring.length; i++) {         var tword = tstring.substring(0, tstring.length - i);         if (tword == rtstring.substring(i, rtstring.length)) {             return string + rtstring.substring(0, i) + rtstring;         }     }     return palindrome; }
var longest_palindrome_postfix = longest_palindrome_postfix(string);     return string + reverse(string.substring(0, string.length - longest_palindrome_postfix.length)); }
var longest = find_largest_palindrome(string)   var prefix = string.substring(0, longest.start)   return prefix + string + reverse_string(prefix) }
var total = 0;   for(var i = 0; i < lst.length; i++){     if(lst[i] % 2 == 1){       total += lst[i] * lst[i];     }   }   return total; }
var sum = 0;   for(var i = 0; i < lst.length; i++){     if(lst[i] % 2 == 1){       sum += lst[i] * lst[i];     }   }   return sum; }
if (lst.length === 0) return 0;     var sum_of_squares = 0;     for (var i = 0; i < lst.length; i++){         if (lst[i] % 2 === 1 && lst[i] >= 0 && lst[i] % 1 === 0){             sum_of_squares += Math.pow(lst[i], 2);         }     }     return sum_of_squares; }
var sum = 0;     for(var i = 0; i < lst.length; i++){         if(lst[i] % 2 == 1){             sum += lst[i] * lst[i];         }     }     return sum; }
return lst.reduce((acc,v)=>(v%2==1&&Number.isInteger(v)&&v>0?acc+v*v:acc),0); }
var sum = 0;   for(var i = 0; i < lst.length; i++){     if(lst[i] % 2 == 1 && lst[i] > 0){       sum += lst[i] * lst[i];     }   }   return sum; }
var sum = 0;   for(var i = 0; i < lst.length; i++){     if(lst[i] % 2 != 0 && lst[i] > 0 && lst[i] === parseInt(lst[i])){       sum += lst[i] * lst[i];     }   }   return sum; }
var sum = 0;     for(var i = 0; i < lst.length; i++){         if(lst[i] % 2 == 1){             sum += Math.pow(lst[i], 2);         }     }     return sum; }
var lst = []     if(lst.length == 0){         return 0     }     var oddList = lst.filter(function(num){         return (num % 2 != 0) && (num > 0) && (Number.isInteger(num))     })     var doubleDifference = oddList.map(function(x){         return x * x     })     var total = doubleDifference.reduce(function(x,y){         return x + y     })     return total }
// Write your code here     if(lst.length < 1){         return 0;     }     else{         return lst.map(x => is_odd(x) ? Math.pow(x, 2) : 0).reduce((x, y) => x + y, 0);     } }
var sum = 0;     for(var i = 0; i < lst.length; i++){         if(lst[i] % 2 != 0 && lst[i] > 0 && Number.isInteger(lst[i])){             sum += lst[i] * lst[i];         }     }     return sum; }
let sum_squares = 0;     for (let i = 0; i < lst.length; i++) {         if (typeof lst[i] === 'number' && lst[i] % 2 != 0 && lst[i] >= 0) {             sum_squares += lst[i] ** 2;         }     }     return sum_squares; }
var new_lst = [];   for(var i = 0; i < lst.length; i++){     if(lst[i] % 2 == 1){       new_lst.push(lst[i] * lst[i]);     }   }   return new_lst.reduce(function(a, b){return a + b;}); }
if (lst.length == 0) {         return 0;     }     sum = 0;     for (var i = 0; i < lst.length; i++) {         if (typeof lst[i] == "number" && lst[i] >= 0 && lst[i] % 2 != 0) {             sum += lst[i] * lst[i];         }     }     return sum; }
}
var squareSum = 0;     if(lst.length === 0){         return 0;     }     for(var i = 0; i < lst.length; i++){         if(lst[i] % 2 !== 0 && lst[i] >= 0 && lst[i] % 1 === 0){             squareSum += lst[i] * lst[i];         }     }     return squareSum; }
var sum = 0;     for(var i = 0; i < lst.length; i++){         if(lst[i] % 2 != 0){             if(lst[i] >= 0){                 sum += lst[i] ** 2;             }         }     }     return sum; }
// Fill this in.   var odd_list = [];   for (var i = 0; i < lst.length; i++) {       if (typeof lst[i] === 'number' && lst[i] > 0 && lst[i] % 2 === 1) {           odd_list.push(lst[i]);       }   }   console.log(odd_list);   if (odd_list.length === 0) {       return 0;   }   var sum = 0;   for (var j = 0; j < odd_list.length; j++) {       sum += odd_list[j] * odd_list[j];   }   return sum; }
return (lst.length == 0) ? 0 : lst.map(n => (typeof n === 'number' && (n >= 0) && (n % 1 === 0)) ? Math.pow(n, 2) : 0).reduce((prev, curr) => prev + curr); }
let reverseCase = s.split('').map(i => {     if(i.toLowerCase() === i) return i.toUpperCase();     else if(i.toUpperCase() === i) return i.toLowerCase();     else return i;   }).join('');   if(!isNaN(reverseCase)) reverseCase = reverseCase.split('').reverse().join('');   return reverseCase; }
let tempStr = '';   for (let index = 0; index < s.length; index++) {     if(s[index] == s[index].toUpperCase()){       tempStr += s[index].toLowerCase();     }else{       tempStr += s[index].toUpperCase();     }   }   return tempStr.split('').reverse().join(''); }
let str = "";     for(let i = 0; i < s.length; i++){       if(s[i] == s[i].toUpperCase()){         str += s[i].toLowerCase();       } else if(s[i] == s[i].toLowerCase()){         str += s[i].toUpperCase();       } else {         str += s[i];       }     }     return str;   }   console.log(solve("1234"));   console.log(solve("ab"));   console.log(solve("#a@C"));   console.log(solve("#a@C.dE"));
let sArr = s.split('');   let ans = "";   for(let char of sArr){     if(char !== char.toLowerCase()){       ans+=char.toLowerCase();     } else if(char !== char.toUpperCase()){       ans+=char.toUpperCase();     } else {       ans+=char;     }   }   if(ans == s){     return s.split('').reverse().join('');   }   return ans; }
if(s.match(/[a-z]/ig))         return s.split('').map(e => {             if(e === e.toUpperCase())                 return e.toLowerCase();             else                 return e.toUpperCase();         }).join('');     else         return s.split('').reverse().join(''); }
let res = [];   for (let i=0; i<s.length; i++) {     let letter = s[i];     if (/[a-z]/.test(letter)) {       res.push(letter.toUpperCase());     } else if (/[A-Z]/.test(letter)) {       res.push(letter.toLowerCase());     } else {       res.push(letter);     }   }   return res.join(''); }
if(s.match(/[a-z]/i))     {         return s.split('').map(x => /[a-z]/i.test(x) ? (x.toUpperCase() === x ? x.toLowerCase() : x.toUpperCase()) : x).join('');     }     else{         return s.split('').reverse().join('');     } }
return s.split('').map(e => e.charCodeAt() >=97 && e.charCodeAt() <= 122 ? String.fromCharCode(e.charCodeAt() - 32) : e.charCodeAt() >= 65 && e.charCodeAt() <= 90 ? String.fromCharCode(e.charCodeAt() + 32) : e).join(''); }
if(s.length == 0) return '';   let result = '';   for(let i = 0; i < s.length; i++){     if(s[i] == s[i].toUpperCase()){       result += s[i].toLowerCase();     }else if(s[i] == s[i].toLowerCase()){       result += s[i].toUpperCase();     }else{       result += s[i];     }   }   return result; }
let isLowerCase = s.toLowerCase() == s; return isLowerCase ? s.toUpperCase() : s.toLowerCase(); }
if(s.match(/[a-z]/ig)){         return s.split('').map(v => v.match(/[a-z]/i) ? v === v.toUpperCase() ? v.toLowerCase() : v.toUpperCase() : v).join('');     }else{         return s.split('').reverse().join('');     } }
return s.replace(/([a-z])|([A-Z])/g, function(match,p1,p2) {     return p1 ? match.toUpperCase() : match.toLowerCase();   }).split('').reverse().join(''); }
//..   return !/[a-z]/i.test(s) ? s.split('').reverse().join('') : s.split('').map(v => /[a-z]/i.test(v) ? v.toUpperCase() == v ? v.toLowerCase() : v.toUpperCase() : v).join(''); }
var result = s.split('').map(function(x){     if (x.toLowerCase() === x.toUpperCase()) {       return x;     }     if (x === x.toLowerCase()) {       return x.toUpperCase();     }     if (x === x.toUpperCase()) {       return x.toLowerCase();     }   }).join('');   return result; } solve("ab");
return s.split('').reverse().map(x => x.toLowerCase() != x ? x.toUpperCase() : x.toLowerCase()).join(''); }
return s.split('').map(el => el.charCodeAt(0) >= 97 && el.charCodeAt(0) <= 122 ? el.toUpperCase() : el.toLowerCase()).join(''); }
return s.split('').map(x => x.match(/[a-z]/i) ? x == x.toUpperCase() ? x.toLowerCase() : x.toUpperCase() : x).join(''); }
let nums = /\d/;   let arr = s.split('');   let newArr = [];   let answer = '';   for(let i = 0; i < arr.length; i++){     if(nums.test(arr[i])){       newArr.push(arr[i]);     }   }   if(newArr.length === arr.length){     for(let i = arr.length - 1; i >= 0; i--){       answer += arr[i];     }     return answer;   }   for(let i = 0; i < arr.length; i++){     if(arr[i] === arr[i].toUpperCase()){       arr[i] = arr[i].toLowerCase();     } else {       arr[i] = arr[i].toUpperCase();     }   }   return arr.join(''); }
//code     if(s.length === 0){         return "";     }     else{         let firstHalf = "";         let secondHalf = "";         let midOfString = s.length / 2;         for(let i = 0; i < s.length; i++){             if(i < midOfString){                 firstHalf += s[i];             }             else{                 secondHalf += s[i];             }         }         let result = "";         for(let i = secondHalf.length - 1; i >= 0; i--){             result += secondHalf[i];         }         return result + firstHalf;     } }
var i = 0;     var is_in = false;     var new_x = [];     var count = 0;     while(i < x.length){         count = 0;         while(count < x[i].toString().length){             if(x[i].toString()[count] % 2 === 0){                 is_in = true;             }             count += 1;         }         if(is_in === false){             new_x.push(x[i]);         }         is_in = false;         i += 1;     }     new_x.sort(function(a, b){return a-b});     return new_x; }
var ret = []; 	var i = 0; 	var j = 0; 	var k = 0; 	var count = 0; 	var even = false; 	var len = x.length; 	var len2 = 0; 	var len3 = 0; 	var temp = 0; 	for(i = 0; i < len; i++){ 		count = 0; 		even = false; 		len2 = 0; 		temp = x[i]; 		while(temp > 0){ 			temp = temp/10; 			len2++; 		} 		for(j = 0; j < len2; j++){ 			temp = x[i]%10; 			if(temp%2 === 0){ 				even = true; 				break; 			} 			x[i] = x[i]/10; 		} 		if(even === false){ 			ret.push(x[i]); 		} 	} 	len3 = ret.length; 	for(i = 0; i < len3; i++){ 		for(j = 0; j < len3; j++){ 			if(ret[i] < ret[j]){ 				temp = ret[i]; 				ret[i] = ret[j]; 				ret[j] = temp; 			} 		} 	} 	return ret; }
var counter = 0;   var result = [];   for(var i = 0; i < x.length; i++){     for(var j = 0; j < x[i].toString().length; j++){       if(x[i].toString()[j] % 2 === 0){         counter++;       }     }     if(counter === 0){       result.push(x[i]);     }     counter = 0;   }   return result.sort(); }
var unique = [];     for(i = 0; i < x.length; i++){         var num = x[i].toString();         for(j = 0; j < num.length; j++){             if(num[j] % 2 == 0){                 break;             }             if(j == num.length - 1){                 unique.push(num);             }         }     }     if(unique.length == 0){         return unique;     }     else{         return unique.sort();     } }
let y = [];   let i = 0;   while (i < x.length){     if (x[i].toString().split('').filter(num => num % 2 === 0).length === 0){       y.push(x[i]);     }     i++;   }   return y.sort(function(a, b){return a-b}); }
var y = []; 	for (var i = 0; i < x.length; i++) { 		var n = x[i].toString(); 		if (n.length > 1){ 			if (n.includes("2") || n.includes("4") || n.includes("6") || n.includes("8") || n.includes("0")){ 				continue; 			} 			else { 				y.push(n); 			} 		} 		else { 			if (n == "2" || n == "4" || n == "6" || n == "8" || n == "0"){ 				continue; 			} 			else { 				y.push(n); 			} 		} 	} 	return y; }
let res = [];     for(let i = 0; i < x.length; i++){         let num = x[i];         let isEven = false;         while(num > 0){             if(num % 2 == 0){                 isEven = true;                 break;             }             num = Math.floor(num / 10);         }         if(!isEven){             res.push(x[i]);         }     }     return res.sort((a, b) => a - b); }
for(i=0; i<10; i++){         if(x[i]%2 != 0){             return x;         }     } }
function digits(n){ 		return n.toString().split(''); 	} 	function unique(n){ 		var unique = true; 		var d = digits(n); 		for(var i = 0; i < d.length; i++){ 			if(d[i] % 2 === 0){ 				unique = false; 			} 		} 		return unique; 	} 	function onlyUnique(value, index, self) {      	return self.indexOf(value) === index; 	} 	var u = x.filter(unique); 	return u.filter(onlyUnique).sort(function(a, b){return a-b}); }
var odds = [];     for(i = 0; i < x.length; i++){         var digits = x[i].toString().split('');         for(j = 0; j < digits.length; j++){             if(digits[j] % 2 === 0){                 break;             }             if(j === digits.length - 1){                 odds.push(x[i]);             }         }     }     return odds.sort(function(a, b){return a - b}); }
var result = [];   var resultEven = [];   for(var i = 0; i < x.length; i++){     if(x[i] % 2 === 0){       resultEven.push(x[i]);     }     else{       result.push(x[i]);     }   }   return result; }
let a = [];      x.forEach(function(v){           if(a.indexOf(v)===-1 && v.toString().split('').every(function(m){                return m%2!==0;           })){                a.push(v);           }      });      return a.sort(function(x,y){           return x-y;      }); }
return x.filter(function(x){     return !x.toString().split('').some(function(x){       return x % 2 === 0;     });   }); }
// write your code here }
var output = [];   for (var i = 0; i < x.length; i++) {     var numString = x[i].toString();     var even_count = 0;     for (var j = 0; j < numString.length; j++) {       if (numString[j] % 2 === 0) {         even_count++;       }     }     if (even_count === 0) {       output.push(x[i]);     }   }   return output.sort(function(a, b){return a-b}); }
// Write your code here }
var unique =[];     for(var i=0; i<x.length; i++){         var str = x[i].toString();         var flag = true;         for(var j=0; j<str.length; j++){             if(str[j]%2 == 0){                 flag = false;                 break;             }         }         if(flag){             unique.push(x[i]);         }     }     return unique.sort(); }
var y = [];     for (var i = 0; i < x.length; i++){         var found = false;         var num = x[i].toString();         for (var j = 0; j < num.length; j++){             if (num[j] == "2" || num[j] == "4" || num[j] == "6" || num[j] == "8" || num[j] == "0"){                 found = true;             }         }         if (found == false){             y.push(x[i]);         }     }     return y; }
return x.filter(function(a){         return a.toString().split('').every(function(b){             return b % 2 === 1;         });     }); }
let words = test.split(' ');     let word_count = {};     for(let i = 0; i < words.length; i++){         if(word_count[words[i]]){             word_count[words[i]] += 1;         }else{             word_count[words[i]] = 1;         }     }     let result = {};     let max = 0;     for(let j in word_count){         if(word_count[j] > max){             max = word_count[j];         }     }     for(let k in word_count){         if(word_count[k] === max){             result[k] = max;         }     }     return result; }
let testArr = test.split(' ');     let map = new Map();     for(let i = 0; i < testArr.length; i++){         if(map.has(testArr[i])){             map.set(testArr[i], map.get(testArr[i]) + 1);         } else {             map.set(testArr[i], 1);         }     }     let keys = map.keys();     let vals = map.values();     let maxKey = '';     let maxVal = 0;     let maxKeys = [];     for(let i = 0; i < map.size; i++){         if(vals.next().value > maxVal){             maxKey = keys.next().value;             maxVal = vals.next().value;             maxKeys = [maxKey];         } else if(vals.next().value === maxVal){             maxKeys.push(keys.next().value);         }     }     return {[maxKey]: maxVal}; }
var output = {};     var testArr = test.split(" ");     for(var i = 0; i < testArr.length; i++){         if(output[testArr[i]] == undefined){             output[testArr[i]] = 1;         }         else{             output[testArr[i]]++;         }     }     return output; }
if(test == ''){         return {}     }     else{         let testArray = test.split(' ');         let testDict = {}         let maxValue = 0;         let highestValueArray = [];         for(let i = 0; i < testArray.length; i++){             let indexElement = testArray[i];             if(testDict[indexElement] == undefined){                 testDict[indexElement] = 1;             }             else{                 testDict[indexElement] += 1;             }         }         let testDictKeys = Object.keys(testDict);         for(let i = 0; i < testDictKeys.length; i++){             let indexKey = testDictKeys[i];             if(testDict[indexKey] > maxValue){                 maxValue = testDict[indexKey];                 highestValueArray = [indexKey];             }             else if(testDict[indexKey] == maxValue){                 highestValueArray.push(indexKey);             }         }         let keyToReturn = {};         for(let i = 0; i < highestValueArray.length; i++){             let indexKey = highestValueArray[i];             keyToReturn[indexKey] = maxValue;         }         return keyToReturn;     } }
var letters={};     var letterArr=test.split(' ');     var max=0;     var maxLetters= {};     for(i=0;i<letterArr.length;i++){         var letter=letterArr[i];         if(!letters[letter]){             letters[letter]=1;         }         else{             letters[letter]++;         }         if(letters[letter]>max){             max=letters[letter];             maxLetters={};             maxLetters[letter]=max;         }         else if(letters[letter]==max){             maxLetters[letter]=max;         }     }     return maxLetters; }
var histogram = {};     var max = 0;     test.split(" ").forEach(function(letter){         if(histogram[letter]){             histogram[letter] = histogram[letter] + 1;         }else{             histogram[letter] = 1;         }         if(histogram[letter] > max){             max = histogram[letter];         }     });     var result = {};     for(var letter in histogram){         if(histogram[letter] === max){             result[letter] = histogram[letter];         }     }     return result; }
let count = 0;     let key = '';     let object = {};     let array = test.split(' ');     for(let i = 0; i < array.length; i++){         for(let j = 0; j < array.length; j++){             if(array[i] === array[j]){                 count++;             }         }         if(count > 1){             object[array[i]] = count;         }         count = 0;     }     return object; }
//Split the string into array of chars     let arr = test.split(' ');     let ocurrence = {};      //Go through each char and add it to ocurrence object if it doesn't exist, or increment the count if it does     for(let i = 0; i < arr.length; i++){         if(!ocurrence[arr[i]]){             ocurrence[arr[i]] = 1;         }else{             ocurrence[arr[i]] += 1;         }     }      let maxValue = Math.max(...Object.values(ocurrence));     let maxKeys = [];      //Add to maxKeys all keys whose values are the same as maxValue     for(let key in ocurrence){         if(ocurrence[key] === maxValue){             maxKeys.push(key);         }     }      //Go through maxKeys and delete every key that is not a maxKey     for(let key in ocurrence){         if(!maxKeys.includes(key)){             delete ocurrence[key];         }     }      return ocurrence; }
let obj={}   let str=test.split(' ')   for(let i=0;i<str.length;i++){     if(obj[str[i]]===undefined){       obj[str[i]]=1     }else{       obj[str[i]]+=1     }   }   return obj }
let char_dict = {};     let max_cnt = 0;     let max_cnt_chars = [];     let test_array = test.split(' ');     for (let i = 0; i < test_array.length; i++){         if (char_dict[test_array[i]] === undefined){             char_dict[test_array[i]] = 1;         } else {             char_dict[test_array[i]]++;         }         if (char_dict[test_array[i]] > max_cnt){             max_cnt = char_dict[test_array[i]];             max_cnt_chars = [test_array[i]];         } else if (char_dict[test_array[i]] === max_cnt){             max_cnt_chars.push(test_array[i]);         }     }     let result = {};     for (let i = 0; i < max_cnt_chars.length; i++){         result[max_cnt_chars[i]] = max_cnt;     }     return result; }
let stor = {};   let max = 0;   let final = {};   test.split(' ').forEach(char => {     if (stor[char]){       stor[char] += 1;     }     else {       stor[char] = 1;     }   });   for (let key in stor){     if (stor[key] > max){       max = stor[key];     }   }   for (let key in stor){     if (stor[key] === max){       final[key] = max;     }   }   return final; }
let dict = {};   let splitted = test.split(' ');   for (let i = 0; i < splitted.length; i++){     if (splitted[i] in dict){       dict[splitted[i]] += 1;     } else {       dict[splitted[i]] = 1;     }   }   return dict; }
var alphabet = {};     var counter = 0;     var target = '';     var multi = [];     var howMany = 0;     var winner = '';     var letters = test.split(' ');     for(var i = 0; i < letters.length; i++){         alphabet[letters[i]] = alphabet[letters[i]] ? alphabet[letters[i]]+1 : 1;     }     for(var letter in alphabet){         counter = alphabet[letter];         if(counter >= howMany){             target = letter;             howMany = counter;         }     }     for(var letter in alphabet){         if(alphabet[letter] == howMany){             multi.push(letter);         }     }     if(multi.length > 1){         for(var i = 0; i < multi.length; i++){             winner += multi[i];             if(i != multi.length-1){                 winner += ' ';             }         }         return {winner: howMany};     }else{         return {target: howMany};     } }
var kamus = {}     var tes = ''     var hasil = []     var tampung = []     for(var i = 0; i < test.length; i++){         if(test[i] !== ' '){             tes += test[i]         }else{             hasil.push(tes)             tes = ''         }     }     hasil.push(tes)     for(var j = 0; j < hasil.length; j++){         kamus[hasil[j]] = 0     }     for(var k = 0; k < hasil.length; k++){         for(var l = 0; l < hasil.length; l++){             if(hasil[k] === hasil[l]){                 kamus[hasil[k]] += 1             }         }     }     for(var m = 0; m < hasil.length; m++){         if(kamus[hasil[m]] === max(kamus)){             tampung.push(hasil[m])         }     }     var o = 0     var output = {}     while(o < tampung.length){         output[tampung[o]] = max(kamus)         o++     }     return output }
//Split string into array   test = test.split(' ');   //create an object   var obj = {};   //loop through array   for(var i = 0; i < test.length; i++){     //check to see if the letter exists     if(obj[test[i]]){       //if the letter does exist add to the count       obj[test[i]]++;     } else {       //if the letter does not exist add it to the object       obj[test[i]] = 1;     }   }   //create a variable to hold the most occurrences   var mostOccurrences = 0;   //loop through object   for(var key in obj){     //check to see if the value is greater than the most occurrences     if(obj[key] > mostOccurrences){       //if it is replace the most occurrences       mostOccurrences = obj[key];     }   }   //create a new object   var newObj = {};   //loop through object   for(var keys in obj){     //check to see if the value is equal to the most occurrences     if(obj[keys] === mostOccurrences){       //if it is add the key and value to the new object       newObj[keys] = obj[keys];     }   }   //return new object   return newObj; }
var main = test.split(" ");     var result = [];     var recc = {};     main.forEach(         function(i){             if(i in recc){                 recc[i] = recc[i] + 1;             }             else{                 recc[i] = 1;             }         }     );     var max = 0;     for(var key in recc){         if(recc[key] > max){             max = recc[key];         }     }     for(var key in recc){         if(recc[key] == max){             result.push(key);         }     }     var result1 = {};     result.forEach(         function(i){             result1[i] = max;         }     );     return result1; }
let testArr = test.split(' ');   let myObj = {};   let myArr = [];   let myCount = 0;   for(let i = 0; i < testArr.length; i++){     if(!myObj[testArr[i]]){       myObj[testArr[i]] = 1;     } else {       myObj[testArr[i]] += 1;     }   }   for(let key in myObj){     if(myObj[key] > myCount){       myCount = myObj[key];     }   }   for(let key in myObj){     if(myObj[key] === myCount){       myArr.push(key);     }   }   for(let i = 0; i < myArr.length; i++){     myObj[myArr[i]] = myCount;   }   for(let key in myObj){     if(myObj[key] !== myCount){       delete myObj[key];     }   }   return myObj; }
var h = {};   var max = 1;   var letter, count;   var t = test.split(' ');   for (var i = 0; i < t.length; i++){     count = 1;     letter = t[i];     if (letter in h){       h[letter] += 1;       if (h[letter] > max){         max = h[letter];       }     }     else {       h[letter] = 1;     }   }   var d = {};   for (var k in h){     if (h[k] == max){       d[k] = h[k];     }   }   return d; }
if(test == ''){         return {};     }     let maxCount = 1;     let result = {};     let arr = test.split(' ');     let testMap = new Map();     for(let i = 0; i < arr.length; i++){         if(testMap.has(arr[i])){             testMap.set(arr[i], testMap.get(arr[i]) + 1);         }         else{             testMap.set(arr[i], 1);         }     }     for(let item of testMap){         if(item[1] >= maxCount){             maxCount = item[1];         }     }     for(let item of testMap){         if(item[1] == maxCount){             result[item[0]] = item[1];         }     }     return result; }
return strings.filter(function(x){return x.indexOf(substring) != -1;}); }
var results = []; 	for(var i=0; i<strings.length; i++){ 		if(strings[i].indexOf(substring) != -1){ 			results.push(strings[i]); 		} 	} 	return results; }
return strings.filter(function(string){         return string.includes(substring);     }); }
return strings.filter(function(element){ 		return element.indexOf(substring) != -1; 	}); }
return strings.filter(string => string.includes(substring)); }
var my_strings = []; 	var i = 0; 	for (i = 0; i < strings.length; i++) { 		if (strings[i].indexOf(substring) >= 0) { 			my_strings.push(strings[i]); 		} 	} 	return my_strings; }
var filteredStrings = [];     for(var i = 0; i < strings.length; i++){         if(strings[i].includes(substring)){             filteredStrings.push(strings[i]);         }     }     return filteredStrings; }
return strings.filter(string => string.includes(substring)); }
return _.filter(strings, function(string){ 		return string.indexOf(substring) > -1; 	}); }
return strings.filter(str => str.includes(substring)); }
return strings.filter(function(string){         return string.indexOf(substring) > -1;     }); }
return strings.filter(str => str.includes(substring)); }
var filtered_strings = [];   strings.forEach(function(element){     if (element.indexOf(substring) !== -1){       filtered_strings.push(element);     }   });   return filtered_strings; }
var new_strings = []; 	for(var i=0; i<strings.length; i++){ 		if(strings[i].includes(substring)){ 			new_strings.push(strings[i]); 		} 	} 	return new_strings; }
var filtered = []; 	for(var i = 0; i < strings.length; i++){ 		if(strings[i].indexOf(substring) != -1){ 			filtered.push(strings[i]); 		} 	} 	return filtered; }
var res=[];     for(var i=0;i<strings.length;i++){         if(strings[i].indexOf(substring)!=-1){             res.push(strings[i]);         }     }     return res; }
//Answer:     return strings.filter(x => x.includes(substring)); }
for(var i = 0; i < strings.length; i++){         if(strings[i].indexOf(substring) == -1){             strings.splice(i, 1);             i--;         }     }     return strings; }
var filtered = []     for (i = 0; i < strings.length; i++){         if (strings[i].indexOf(substring) != -1){             filtered.push(strings[i])         }     }     return filtered }
