    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    double w;     w=atof(value.c_str());     return round(w); } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    string out="";     int spacelen=0;     for (int i=0;i<text.length();i++)     if (text[i]==' ') spacelen+=1;     else     {         if (spacelen==1) out=out+'_';         if (spacelen==2) out=out+"__";         if (spacelen>2) out=out+'-';         spacelen=0;         out=out+text[i];     }     if (spacelen==1) out=out+'_';     if (spacelen==2) out=out+"__";     if (spacelen>2) out=out+'-';     return out; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    int num=0;     for (int i=0;i<nums.size();i++)     if (nums[i]>10)     {         string w=to_string(nums[i]);         if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;     }     return num; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    string strongest="";     int max=-1000;     for (int i=0;i<extensions.size();i++)     {         int strength=0;         for (int j=0;j<extensions[i].length();j++)         {             char chr=extensions[i][j];             if (chr>=65 and chr<=90) strength+=1;             if (chr>=97 and chr<=122) strength-=1;         }         if (strength>max)          {             max=strength;             strongest=extensions[i];         }     }     return class_name+'.'+strongest; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    vector<vector<int>> out={};     for (int i=0;i<lst.size();i++)     for (int j=lst[i].size()-1;j>=0;j-=1)     if (lst[i][j]==x) out.push_back({i,j});     return out; } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    sort(l.begin(),l.end());     if (l.size()%2==1) return l[l.size()/2];     return 0.5*(l[l.size()/2]+l[l.size()/2-1]); } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    map<string,int> tonum={{"zero",0},{"one",1},{"two",2},{"three",3},{"four",4},{"five",5},{"six",6},{"seven",7},{"eight",8},{"nine",9}};     map<int,string> numto={{0,"zero"},{1,"one"},{2,"two"},{3,"three"},{4,"four"},{5,"five"},{6,"six"},{7,"seven"},{8,"eight"},{9,"nine"}};     int count[10];     for (int i=0;i<10;i++)         count[i]=0;     string out="",current="";     if (numbers.length()>0) numbers=numbers+' ';     for (int i=0;i<numbers.length();i++)         if (numbers[i]==' ')         {             count[tonum[current]]+=1;             current="";         }         else current+=numbers[i];     for (int i=0;i<10;i++)         for (int j=0;j<count[i];j++)             out=out+numto[i]+' ';     if (out.length()>0) out.pop_back();     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<grid.size();i++)     {         int sum=0;         for (int j=0;j<grid[i].size();j++)             sum+=grid[i][j];         if (sum>0)  out+=(sum-1)/capacity+1;     }     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    int out=0;     for (int i=0;i<arr.size()-1-i;i++)         if (arr[i]!=arr[arr.size()-1-i])             out+=1;     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    vector<string> out={};     for (int i=0;i<strings.size();i++)         if (strings[i].substr(0,prefix.length())==prefix) out.push_back(strings[i]);     return out; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    if (n<2) return false;     for (long long i=2;i*i<=n;i++)         if (n%i==0) return false;     return true; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int num=0;     for (int i=0;i<lst1.size();i++)     if (lst1[i]%2==0) num+=1;     for (int i=0;i<lst2.size();i++)     if (lst2[i]%2==0) num+=1;     if (num>=lst1.size()) return "YES";     return "NO"; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='(') level+=1;         if (brackets[i]==')') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    vector<int> out={1,3};     if (n==0) return {1};     for (int i=2;i<=n;i++)     {         if (i%2==0) out.push_back(1+i/2);         else out.push_back(out[i-1]+out[i-2]+1+(i+1)/2);     }     return out; } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    return str.length(); } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string out;     int i;     for (i=0;i<s.length();i++)     {         int w=((int)s[i]+4-(int)'a')%26+(int)'a';            out=out+(char)w;     }     return out; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    string vowels="aeiouAEIOU";     int count=0;     for (int i=0;i<s.length();i++)     if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())         count+=1;     if (s[s.length()-1]=='y' or s[s.length()-1]=='Y') count+=1;     return count; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int sum=0,product=1;     for (int i=0;i<numbers.size();i++)     {         sum+=numbers[i];         product*=numbers[i];     }     return {sum,product}; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    int count=0;     for (int i=0;i<n;i++)     if (i%11==0 or i%13==0)     {         int q=i;         while (q>0)         {             if (q%10==7) count+=1;             q=q/10;         }     }      return count; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    string output="";     for (int i=0;(i<a.length() and i<b.length());i++)     {         if (i<a.length() and i<b.length())         {             if (a[i]== b[i])              {                 output+='0';             }               else output+='1';         }         else         {             if (i>=a.length())              {             output+=b[i];             }             else output+=a[i];         }     }     return output; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    vector<int> out={};     for (int i=2;i*i<=n;i++)         if (n%i==0)         {             n=n/i;             out.push_back(i);             i-=1;         }     out.push_back(n);     return out; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int num=0;     for (int i=0;i<operations.size();i++)     {         num+=operations[i];         if (num<0) return true;     }     return false; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<q.size();i++)     {         if (q[i]!=q[q.size()-1-i]) return false;         sum+=q[i];     }     if (sum>w) return false;     return true; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    int sum=0;     for (int i=0;i<s.length();i++)         if (s[i]>=65 and s[i]<=90)             sum+=s[i];     return sum; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    if (arr.size()==0) return -32768;     int i,sum=0,prods=1;     for (i=0;i<arr.size();i++)     {         sum+=abs(arr[i]);         if (arr[i]==0) prods=0;         if (arr[i]<0) prods=-prods;    }    return sum*prods; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    vector<int> out={n};     for (int i=1;i<n;i++)         out.push_back(out[out.size()-1]+2);     return out; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    string str,bi="";     str=to_string(N);     int i,sum=0;     for (int i=0;i<str.length();i++)         sum+=str[i]-48;     while (sum>0)     {         bi=to_string(sum%2)+bi;         sum=sum/2;     }     return bi; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    int prod=1,has=0;     string s=to_string(n);     for (int i=0;i<s.length();i++)         if (s[i]%2==1)          {             has=1;             prod=prod*(s[i]-48);         }     if (has==0) return 0;     return prod; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    if (need>remaining) return {number+remaining, 0};     return {number+need,remaining-need}; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    for (int i=0;i*i*i<=abs(a);i++)         if (i*i*i==abs(a)) return true;     return false; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    double  numa,numb;     boost::any out;         if (a.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(a);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numa=atof(s.c_str());              }     else      {         if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);         if (a.type()==typeid(double)) numa=boost::any_cast<double>(a);     }     if (b.type()==typeid(string))     {         string s;         s=boost::any_cast<string>(b);         if (find(s.begin(),s.end(),',')!=s.end())             for (int i=0;i<s.length();i++)                 if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);         numb=atof(s.c_str());     }     else      {         if (b.type()==typeid(int)) numb=boost::any_cast<int>(b);         if (b.type()==typeid(double)) numb=boost::any_cast<double>(b);     }      if (numa==numb) return string("None");     if (numa<numb) return b;     if (numa>numb) return a; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    if (a+b<=c or a+c<=b or b+c<=a) return -1;     float h=(a+b+c)/2;     float area;     area=pow(h*(h-a)*(h-b)*(h-c),0.5);     return area; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    sort(arr.begin(),arr.end());     vector<int> out(arr.end()-k,arr.end());     return out; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    int level=0;     for (int i=0;i<brackets.length();i++)     {         if (brackets[i]=='<') level+=1;         if (brackets[i]=='>') level-=1;         if (level<0) return false;     }     if (level!=0) return false;     return true; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string vowels="aeiouAEIOU";     string current="";     vector<string> out={};     int numc=0;     s=s+' ';     for (int i=0;i<s.length();i++)         if (s[i]==' ')         {             if (numc==n) out.push_back(current);             current="";             numc=0;         }         else         {             current=current+s[i];             if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))             if (find(vowels.begin(),vowels.end(),s[i])==vowels.end())                 numc+=1;         }     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    string key="2357BD";     int out=0;     for (int i=0;i<num.length();i++)     if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;     return out; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    if (s.length()<3) return false;     for (int i=2;i<s.length();i++)     if (s[i]==s[i-1] or s[i]==s[i-2]) return false;     return true; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    bool isp=true;     if (n<2) isp=false;     for (int i=2;i*i<=n;i++)     if (n%i==0) isp=false;     if (isp) return x;     return y; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)     if (lst[i].length()%2==0) out.push_back(lst[i]);     string mid;     sort(out.begin(),out.end());     for (int i=0;i<out.size();i++)     for (int j=1;j<out.size();j++)     if (out[j].length()<out[j-1].length())     {         mid=out[j];out[j]=out[j-1];out[j-1]=mid;     }     return out; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    string w=to_string(abs(num));     int n1=0,n2=0;     for (int i=0;i<w.length();i++)     if (w[i]%2==1) n1+=1;     else n2+=1;     return {n2,n1}; } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    vector<int> third={};     int i;     for (i=0;i*3<l.size();i++)         third.push_back(l[i*3]);          sort(third.begin(),third.end());      vector<int> out={};     for (i=0;i<l.size();i++)     {         if (i%3==0) {out.push_back(third[i/3]);}         else out.push_back(l[i]);     }     return out;  } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    if (txt.length()==0) return false;     char chr=txt[txt.length()-1];     if (chr<65 or (chr>90 and chr<97) or chr>122) return false;     if (txt.length()==1) return true;     chr=txt[txt.length()-2];     if ((chr>=65 and chr<=90) or (chr>=97 and chr<=122)) return false;     return true; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int out=0;     if (str.length()==0) return 0;     for (int i=0;i<=str.length()-substring.length();i++)     if (str.substr(i,substring.length())==substring)         out+=1;     return out; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    int num=0;     if (arr.size()==0) return true;     for (int i=1;i<arr.size();i++)         if (arr[i]<arr[i-1]) num+=1;     if (arr[arr.size()-1]>arr[0]) num+=1;     if (num<2) return true;     return false; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    map<string,string>::iterator it;     int islower=0,isupper=0;     if (dict.size()==0) return false;     for (it=dict.begin();it!=dict.end();it++)     {         string key=it->first;              for (int i=0;i<key.length();i++)         {             if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;             if (key[i]>=65 and key[i]<=90) isupper=1;             if (key[i]>=97 and key[i]<=122) islower=1;             if (isupper+islower==2) return false;         }      }     return true; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    vector<string> out;     string current="";     for (int i=0;i<str.length();i++)     {         current=current+str[i];         out.push_back(current);     }     return out; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float min=100000,max=-100000;     for (int i=0;i<numbers.size();i++)         {             if (numbers[i]<min) min=numbers[i];             if (numbers[i]>max) max=numbers[i];         }     for (int i=0;i<numbers.size();i++)         numbers[i]=(numbers[i]-min)/(max-min);     return numbers; } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    float sum=0;     float avg,msum,mavg;     int i=0;     for (i=0;i<numbers.size();i++)         sum+=numbers[i];     avg=sum/numbers.size();     msum=0;     for (i=0;i<numbers.size();i++)         msum+=abs(numbers[i]-avg);     return msum/numbers.size(); } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    long long fact=1,bfact=1;     for (int i=1;i<=n;i++)     {         fact=fact*i;         bfact=bfact*fact;     }     return bfact; } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    int mm,dd,yy,i;     if (date.length()!=10) return false;     for (int i=0;i<10;i++)         if (i==2 or i==5)         {             if (date[i]!='-') return false;         }         else             if (date[i]<48 or date[i]>57) return false;      mm=atoi(date.substr(0,2).c_str());     dd=atoi(date.substr(3,2).c_str());     yy=atoi(date.substr(6,4).c_str());     if (mm<1 or mm>12) return false;     if (dd<1 or dd>31) return false;     if (dd==31 and (mm==4 or mm==6 or mm==9 or mm==11 or mm==2)) return false;     if (dd==30 and mm==2) return false;     return true;  } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<vector<int>> freq={};     int max=-1;     for (int i=0;i<lst.size();i++)     {         bool has=false;         for (int j=0;j<freq.size();j++)             if (lst[i]==freq[j][0])              {             freq[j][1]+=1;             has=true;             if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];             }         if (not(has))          {         freq.push_back({lst[i],1});         if (max==-1 and lst[i]==1) max=1;         }     }     return max; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<float> out={};     for (int i=0;i<numbers.size();i++)     for (int j=i+1;j<numbers.size();j++)         if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))             out={numbers[i],numbers[j]};     if (out[0]>out[1])         out={out[1],out[0]};     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l1.size();i++)         if (find(out.begin(),out.end(),l1[i])==out.end())             if (find(l2.begin(),l2.end(),l1[i])!=l2.end())                 out.push_back(l1[i]);     sort(out.begin(),out.end());     return out; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    unsigned char md[16];     if (text.length()==0) return "None";     MD5_CTX c;     int i;    MD5_Init(&c);    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());     MD5_Final(md, &c);     string out_str="";     for (int i=0;i<16;i++)         {             char w;             if (md[i]<160) w=48+md[i]/16;             else w=87+md[i]/16;             out_str=out_str+w;             if (md[i]%16<10) w=48+md[i]%16;             else w=87+md[i]%16;             out_str=out_str+w;         }     return out_str; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    if (n<1) return 0;     if (n==1) return 1;     int out=18;     for (int i=2;i<n;i++)         out=out*10;     return out; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    int incr,decr;     incr=0;decr=0;     for (int i=1;i<l.size();i++)     {         if (l[i]>l[i-1]) incr=1;         if (l[i]<l[i-1]) decr=1;     }     if (incr+decr==2) return false;     return true; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    string current="";     vector<string> rep={"m","cm","d","cd","c","xc","l","xl","x","ix","v","iv","i"};     vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};     int pos=0;     while(number>0)     {         while (number>=num[pos])         {             current=current+rep[pos];             number-=num[pos];         }         if (number>0) pos+=1;     }     return current; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    if (n>m) return "-1";     int num=(m+n)/2;     string out="";     while (num>0)     {         out=to_string(num%2)+out;         num=num/2;     }     return out; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    for (int i=0;i<l.size();i++)         if (l[i]>=t) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int l,i;     l=str.length();     if (l<2) return false;     for (i=2;i*i<=l;i++)     if (l%i==0) return false;     return true; } 
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    int i,j;          for (i=0;i<numbers.size();i++)     for (j=i+1;j<numbers.size();j++)     if (abs(numbers[i]-numbers[j])<threshold)     return true;      return false; }  
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    string n="";     for (int i=0;i<s.length();i++)     if (find(c.begin(),c.end(),s[i])==c.end())         n=n+s[i];      if (n.length()==0) return {n,"True"};     string w(n.rbegin(),n.rend());     if (w==n) return {n,"True"};     return {n,"False"}; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    int count=0,maxcount=0;     for (int i=0;i<str.length();i++)     {         if (str[i]=='[') count+=1;         if (str[i]==']') count-=1;         if (count<0) count=0;         if (count>maxcount) maxcount=count;         if (count<=maxcount-2) return  true;     }     return false; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    vector<float> out={};     vector<float> even={};     for (int i=0;i*2<l.size();i++)         even.push_back(l[i*2]);     sort(even.begin(),even.end());     for (int i=0;i<l.size();i++)     {         if (i%2==0) out.push_back(even[i/2]);         if (i%2==1) out.push_back(l[i]);     }     return out; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    if (round(a)!=a) return false;     if (round(b)!=b) return false;     if (round(c)!=c) return false;     if (a+b==c or a+c==b or b+c==a) return true;     return false; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<int> bin={};     int m;      for (int i=0;i<arr.size();i++)     {         int b=0,n=abs(arr[i]);         while (n>0)         {             b+=n%2;n=n/2;         }         bin.push_back(b);     }     for (int i=0;i<arr.size();i++)     for (int j=1;j<arr.size();j++)     if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))     {         m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;         m=bin[j];bin[j]=bin[j-1];bin[j-1]=m;     }     return arr; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    vector<float> out={};     for (int i=0;i<l.size();i++)         if (l[i]>0) out.push_back(l[i]);     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    string out="";     string current="";     s=s+' ';     for (int i=0;i<s.length();i++)     if (s[i]==' ')     {         sort(current.begin(),current.end());         if (out.length()>0) out=out+' ';         out=out+current;         current="";     }     else current=current+s[i];     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    vector<int> out;     for (int i=0;i<game.size();i++)     out.push_back(abs(game[i]-guess[i]));     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    string out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].length()>out.length()) out=strings[i];     }     return out; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    int i;     string current="";     vector<string> out={};     if (find(txt.begin(),txt.end(),' ')!=txt.end())     {         txt=txt+' ';         for (i=0;i<txt.length();i++)             if (txt[i]==' ')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     if (find(txt.begin(),txt.end(),',')!=txt.end())     {         txt=txt+',';         for (i=0;i<txt.length();i++)             if (txt[i]==',')              {                 if (current.length()>0)out.push_back(current);                  current="";             }             else current=current+txt[i];         return out;     }     int num=0;     for (i=0;i<txt.length();i++)         if (txt[i]>=97 and txt[i]<=122 and txt[i]%2==0)             num+=1;     return {to_string(num)}; } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    if (array.size()==0) return {};     if ((array[0]+array[array.size()-1]) %2==1)     {         sort(array.begin(),array.end());         return array;     }     else     {         sort(array.begin(),array.end());         vector<int> out={};         for (int i=array.size()-1;i>=0;i-=1)             out.push_back(array[i]);         return out;     }  } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    string out="";     string current="";     sentence=sentence+' ';      for (int i=0;i<sentence.size();i++)     if (sentence[i]!=' ') current=current+sentence[i];     else     {         bool isp=true;         int l=current.length();         if (l<2) isp=false;         for (int j=2;j*j<=l;j++)             if (l%j==0) isp=false;         if (isp) out=out+current+' ';         current="";             }     if (out.length()>0)         out.pop_back();     return out; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         sum+=ceil(lst[i])*ceil(lst[i]);     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    int sum=0;     for (int i=0;i*2+1<lst.size();i++)         if (lst[i*2+1]%2==0) sum+=lst[i*2+1];     return sum; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    return n*(n+1)/2; } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
    for (int i=2;i*i<=n;i++)         if (n%i==0) return  n/i;     return 1;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
return (a*h)*0.5;  } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={1};     while (n!=1)     {         if (n%2==1) {out.push_back(n); n=n*3+1;}         else n=n/2;     }     sort(out.begin(),out.end());     return out; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    string l1=lst[0]+lst[1];     int i,count=0;     bool can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (count!=0) return "No";     if (can==true) return "Yes";     l1=lst[1]+lst[0];     can=true;     for (i=0;i<l1.length();i++)         {             if (l1[i]=='(') count+=1;             if (l1[i]==')') count-=1;             if (count<0) can=false;         }     if (can==true) return "Yes";     return "No"; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     if (l[i]+l[j]==0) return true;     return false; } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string num1="",num2="";     int is12;     is12=0;     for (int i=0;i<s.size();i++)                  if (s[i]>=48 and s[i]<=57)         {             if (is12==0) num1=num1+s[i];             if (is12==1) num2=num2+s[i];         }         else           if (is12==0 and num1.length()>0) is12=1;     return n-atoi(num1.c_str())-atoi(num2.c_str());  } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    string out="0";     for (int i=1;i<=n;i++)     out=out+" "+to_string(i);     return out; } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    int num=0;     for (int i=2;i*i<=a;i++)     while (a%i==0 and a>i)     {         a=a/i;         num+=1;     }     if (num==2) return true;     return false;  } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    return number-int(number); } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=word.length()-2;i>=1;i-=1)         if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())             if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())                 if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())                     return out+word[i];     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    string out="";     if (decimal==0) return "db0db";     while (decimal>0)     {         out=to_string(decimal%2)+out;         decimal=decimal/2;     }     out="db"+out+"db";     return out; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    for (int i=1;i<lst.size();i++)     {         if (lst[i]<lst[i-1]) return false;         if (i>=2 and lst[i]==lst[i-1] and lst[i]==lst[i-2]) return false;     }     return true; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    map<int,string> numto={{0,"Zero"},{1,"One"},{2,"Two"},{3,"Three"},{4,"Four"},{5,"Five"},{6,"Six"},{7,"Seven"},{8,"Eight"},{9,"Nine"}};     sort(arr.begin(),arr.end());     vector<string> out={};     for (int i=arr.size()-1;i>=0;i-=1)         if (arr[i]>=1 and arr[i]<=9)         out.push_back(numto[arr[i]]);     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    vector<int> out={};     for (int i=0;i<arr.size();i++)     if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))         out={arr[i],i};     return out; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int max=-1;     for (int i=0;i<arr.size();i++)     if (arr[i]<=i) max=i;     return max; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    int sum=0,prod=1;     vector<int> out={};     for (int i=1;i<=n;i++)     {         sum+=i;         prod*=i;         if (i%2==0) out.push_back(prod);         else out.push_back(sum);     }      return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<l.size();i++)         if (find(out.begin(),out.end(),l[i])==out.end())             out.push_back(l[i]);     sort(out.begin(),out.end());     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    int out=1;     for (int i=0;i<n;i++)         out=(out*2)%p;     return out; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    long long current,min;     current=nums[0];     min=nums[0];     for (int i=1;i<nums.size();i++)     {        if (current<0) current=current+nums[i];        else current=nums[i];        if (current<min) min=current;     }     return min; } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> out={};     sort(lst.begin(),lst.end());     int l=0,r=lst.size()-1;     while (l<r)     {         out.push_back(lst[l]);         l+=1;         out.push_back(lst[r]);         r-=1;     }     if (l==r) out.push_back(lst[l]);     return out;  } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    vector<int> a;     vector<vector<int>> sum={{0,0,0}};     vector<vector<int>> sum2={{0,0,0}};     for (int i=1;i<=n;i++)     {         a.push_back((i*i-i+1)%3);         sum.push_back(sum[sum.size()-1]);         sum[i][a[i-1]]+=1;     }     for (int times=1;times<3;times++)     {     for (int i=1;i<=n;i++)     {         sum2.push_back(sum2[sum2.size()-1]);         if (i>=1)         for (int j=0;j<=2;j++)             sum2[i][(a[i-1]+j)%3]+=sum[i-1][j];     }     sum=sum2;     sum2={{0,0,0}};     }      return sum[n][0]; } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    return (abs(a)%10)*(abs(b)%10); } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int sum=0;     for (int i=0;i<k;i++)         if( arr[i]>=-99 and arr[i]<=99)             sum+=arr[i];     return sum; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    int a,b,c,d,i;     for (i=0;i<x.size();i++)         if (x[i]=='/')          {             a=atoi(x.substr(0,i).c_str());             b=atoi(x.substr(i+1).c_str());         }     for (i=0;i<n.size();i++)         if (n[i]=='/')          {             c=atoi(n.substr(0,i).c_str());             d=atoi(n.substr(i+1).c_str());         }     if ((a*c)%(b*d)==0) return true;     return false; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    vector<float> out={};     for (int i=1;i<xs.size();i++)         out.push_back(i*xs[i]);     return out; } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string out="";     string vowels="AEIOUaeiou";     for (int i=0;i<text.length();i++)         if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())             out=out+text[i];     return out;  } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    string current="";     vector<string> out={};     s=s+' ';     for (int i=0;i<s.length();i++)      if (s[i]==' ' or s[i]==',')      {         if (current.length()>0)         {             out.push_back(current);             current="";         }      }      else current=current+s[i];      return out; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    if (y<x) return -1;     if (y==x and y%2==1) return -1;     if (y%2==1) return y-1;     return y; } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    int f1,f2,m;     f1=1;f2=2;     int count=0;     while (count<n)     {         f1=f1+f2;         m=f1;f1=f2;f2=m;         bool isprime=true;         for (int w=2;w*w<=f1;w++)             if (f1%w==0)             {              isprime=false; break;             }         if (isprime) count+=1;         if (count==n) return f1;     }  } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    if (n%2==0 and n>=8) return true;     return false; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    string current="";     vector<int> out={};     if (music_string.length()>0)         music_string=music_string+' ';     for (int i=0;i<music_string.length();i++)     {         if (music_string[i]==' ')         {             if (current=="o") out.push_back(4);             if (current=="o|") out.push_back(2);             if (current==".|") out.push_back(1);             current="";         }         else current+=music_string[i];     }     return out; } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    for (int i=0;i<s0.length();i++)     if (find(s1.begin(),s1.end(),s0[i])==s1.end())         return false;     for (int i=0;i<s1.length();i++)     if (find(s0.begin(),s0.end(),s1[i])==s0.end())         return false;     return true;    } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    string max="";     int maxu=0;     for (int i=0;i<words.size();i++)     {         string unique="";         for (int j=0;j<words[i].length();j++)             if (find(unique.begin(),unique.end(),words[i][j])==unique.end())                 unique=unique+words[i][j];         if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))         {             max=words[i];             maxu=unique.length();         }     }     return max; } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    int numdigit=0,numdot=0;     if (file_name.length()<5) return "No";     char w=file_name[0];     if (w<65 or (w>90 and w<97) or w>122) return "No";     string last=file_name.substr(file_name.length()-4,4);     if (last!=".txt" and last!=".exe" and last!=".dll") return "No";     for (int i=0;i<file_name.length();i++)     {         if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;         if (file_name[i]=='.') numdot+=1;     }     if (numdigit>3 or numdot!=1) return "No";     return "Yes";  } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    if (abs(a*a+b*b-c*c)<1e-4 or abs(a*a+c*c-b*b)<1e-4 or abs(b*b+c*c-a*a)<1e-4) return true;     return false; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    list_any::iterator it;     boost::any anyone;     vector<int> out;     for (it=values.begin();it!=values.end();it++)     {          anyone=*it;         if( anyone.type() == typeid(int) )            out.push_back(boost::any_cast<int>(*it));     }     return out; } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    for (int i=0;i<b.size();i++)     {         string rotate=b.substr(i)+b.substr(0,i);         if (a.find(rotate)!=string::npos) return true;     }     return false;  } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    vector<char> distinct={};     transform(str.begin(),str.end(),str.begin(),::tolower);     for (int i=0;i<str.size();i++)     {         bool isin=false;         for (int j=0;j<distinct.size();j++)             if (distinct[j]==str[i])                 isin=true;         if (isin==false) distinct.push_back(str[i]);      }     return distinct.size(); } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int num1,num2,i;     num1=0;num2=0;     for (i=0;i<lst1.size();i++)         num1+=lst1[i].length();     for (i=0;i<lst2.size();i++)         num2+=lst2[i].length();     if (num1>num2) return lst2;     return lst1; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int inter1,inter2,l,i;     inter1=max(interval1[0],interval2[0]);     inter2=min(interval1[1],interval2[1]);     l=inter2-inter1;     if (l<2) return "NO";     for (i=2;i*i<=l;i++)         if (l%i==0) return "NO";     return "YES"; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    int f[100];     f[0]=0;     f[1]=0;     f[2]=2;     f[3]=0;     for (int i=4;i<=n;i++)     {         f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];     }     return f[n]; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    string uvowel="AEIOU";     int count=0;     for (int i=0;i*2<s.length();i++)     if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())         count+=1;     return count; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    vector<string> all_parens;     string current_paren;     int level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_parens.push_back(current_paren);                 current_paren="";             }         }     }     return all_parens; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int num1=0,num2=0;     for (int i=1;i<=n;i++)     {         string w=to_string(i);         string p(w.rbegin(),w.rend());         if (w==p and i%2==1) num1+=1;         if (w==p and i%2==0) num2+=1;                  }     return {num2,num1}; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    int m;     if (b<a)     {         m=a;a=b;b=m;     }      vector<int> out={};     for (int i=a;i<=b;i++)     if (i<10 and i%2==0) out.push_back(i);     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out={};     if (numbers.size()>0) out.push_back(numbers[0]);     for (int i=1;i<numbers.size();i++)     {         out.push_back(delimeter);         out.push_back(numbers[i]);      }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    vector<int> out;     int max=0;     for (int i=0;i<numbers.size();i++)     {         if (numbers[i]>max) max=numbers[i];         out.push_back(max);     }     return out; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    for (int i=2;i*i<=n;i++)     while (n%i==0 and n>i)  n=n/i;     return n; } 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    int largest=0;     for (int i=0;i<lst.size();i++)         if (lst[i]>largest)         {             bool prime=true;             for (int j=2;j*j<=lst[i];j++)                 if (lst[i]%j==0) prime=false;             if (prime) largest=lst[i];         }     int sum=0;     string s;     s=to_string(largest);     for (int i=0;i<s.length();i++)         sum+=s[i]-48;     return sum; } #undef NDEBUG #include<assert.h> 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    sort(lst.begin(),lst.end());     for (int i=1;i<lst.size();i++)         if (lst[i]!=lst[i-1]) return lst[i];     return -1; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    string out="";     while (x>0)     {         out=to_string(x%base)+out;         x=x/base;     }     return out; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    bool isstart=true;     bool isi=false;     int sum=0;     for (int i=0;i<S.length();i++)     {         if (S[i]==' ' and isi) {isi=false; sum+=1;}         if (S[i]=='I' and isstart) {isi=true;  }         else isi=false;            if (S[i]!=' ') { isstart=false;}         if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;     }     return sum; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    vector<int> out={};     int i,j;     for (i=2;i<n;i++)         if (out.size()==0) {out.push_back(i);}         else         {             bool isp=true;             for (j=0;out[j]*out[j]<=i;j++)                 if (i%out[j]==0) isp=false;             if (isp) out.push_back(i);         }     return out; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    for (int i=0;i<l.size();i++)         l[i]+=1;     return l; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    int num=0;     for (int i=0;i<n.size();i++)         if (n[i]>0) num+=1;         else         {             int sum=0;             int w;             w=abs(n[i]);             while (w>=10)             {                 sum+=w%10;                 w=w/10;             }             sum-=w;             if (sum>0) num+=1;         }     return num; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    vector<int> sumdigit={};     for (int i=0;i<nums.size();i++)     {         string w=to_string(abs(nums[i]));         int sum=0;         for (int j=1;j<w.length();j++)             sum+=w[j]-48;         if (nums[i]>0) sum+=w[0]-48;         else sum-=w[0]-48;         sumdigit.push_back(sum);     }     int m;     for (int i=0;i<nums.size();i++)     for (int j=1;j<nums.size();j++)     if (sumdigit[j-1]>sumdigit[j])     {         m=sumdigit[j];sumdigit[j]=sumdigit[j-1];sumdigit[j-1]=m;         m=nums[j];nums[j]=nums[j-1];nums[j-1]=m;     }           return nums; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    int sum=0;     for (int i=0;i<lst.size();i++)         if (i%3==0) sum+=lst[i]*lst[i];         else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];         else sum+=lst[i];     return sum; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    string vowels="aeiouAEIOU";     string out="";     for (int i=0;i<message.length();i++)     {         char w=message[i];         if (w>=97 and w<=122){w=w-32;}         else if (w>=65 and w<=90) w=w+32;         if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;         out=out+w;     }     return out; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    return n*n; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    string pr(text.rbegin(),text.rend());     return pr==text; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    vector<string> out={};     for (int i=0;i<grades.size();i++)     {         if (grades[i]>=3.9999) out.push_back("A+");         if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back("A");         if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back("A-");         if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back("B+");         if (grades[i]>2.7001 and grades[i]<=3.0001) out.push_back("B");         if (grades[i]>2.3001 and grades[i]<=2.7001) out.push_back("B-");         if (grades[i]>2.0001 and grades[i]<=2.3001) out.push_back("C+");         if (grades[i]>1.7001 and grades[i]<=2.0001) out.push_back("C");         if (grades[i]>1.3001 and grades[i]<=1.7001) out.push_back("C-");         if (grades[i]>1.0001 and grades[i]<=1.3001) out.push_back("D+");         if (grades[i]>0.7001 and grades[i]<=1.0001) out.push_back("D");         if (grades[i]>0.0001 and grades[i]<=0.7001) out.push_back("D-");         if (grades[i]<=0.0001) out.push_back("E");     }     return out; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int maxneg=0,minpos=0;     for (int i=0;i<lst.size();i++)     {         if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];         if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];     }     return {maxneg,minpos}; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    int f[1000];     f[0]=0;f[1]=1;     for (int i=2;i<=n; i++)     f[i]=f[i-1]+f[i-2];     return f[n]; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
    string xs;     xs=to_string(x);     if (xs.length()<shift)     {         string s(xs.rbegin(),xs.rend());         return s;     }     xs=xs.substr(xs.length()-shift)+xs.substr(0,xs.length()-shift);     return xs; } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
  float max=-10000;   for (int i=0;i<l.size();i++)   if (max<l[i]) max=l[i];   return max;  } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    int sum=0;     for (int i=0;i*2<lst.size();i++)         if (lst[i*2]%2==1) sum+=lst[i*2];     return sum; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<string> planets={"Mercury","Venus","Earth","Mars","Jupiter","Saturn","Uranus","Neptune"};     int pos1=-1,pos2=-1,m;     for (m=0;m<planets.size();m++)     {     if (planets[m]==planet1) pos1=m;     if (planets[m]==planet2) pos2=m;     }     if (pos1==-1 or pos2==-1) return {};     if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}     vector<string> out={};     for (m=pos1+1;m<pos2;m++)     out.push_back(planets[m]);     return out; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    vector<int> all_levels;     string current_paren;     int level=0,max_level=0;     char chr;     int i;     for (i=0;i<paren_string.length();i++)     {         chr=paren_string[i];         if (chr=='(')         {         level+=1;         if (level>max_level) max_level=level;         current_paren+=chr;         }         if (chr==')')         {             level-=1;             current_paren+=chr;             if (level==0){                 all_levels.push_back(max_level);                 current_paren="";                 max_level=0;             }         }     }     return all_levels; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    for (int i=0;i<l.size();i++)     for (int j=i+1;j<l.size();j++)     for (int k=j+1;k<l.size();k++)         if (l[i]+l[j]+l[k]==0) return true;     return false; } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    vector<int> num={};     vector<int> posto={};     for (int i=0;i<operand.size();i++)         posto.push_back(i);     for (int i=0;i<operato.size();i++)         if (operato[i]=="**")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="*" or operato[i]=="//")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="*")             operand[posto[i]]=operand[posto[i]]*operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]/operand[posto[i+1]];         posto[i+1]=posto[i];         }     for (int i=0;i<operato.size();i++)         if (operato[i]=="+" or operato[i]=="-")          {         while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];         while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];         if (operato[i]=="+")             operand[posto[i]]=operand[posto[i]]+operand[posto[i+1]];         else             operand[posto[i]]=operand[posto[i]]-operand[posto[i+1]];         posto[i+1]=posto[i];         }     return operand[0];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    int ff[100];     ff[0]=0;     ff[1]=0;     ff[2]=1;     for (int i=3;i<=n;i++)         ff[i]=ff[i-1]+ff[i-2]+ff[i-3];     return ff[n];  } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    string out="";     for (int i=0;i<strings.size();i++)         out=out+strings[i];     return out; } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    int out,m;     while (true){         if (a<b)          {             m=a;a=b;b=m;         }         a=a%b;         if (a==0) return b;     } } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    string out="";     for (int i=0;i<str.length();i++)     {         char w=str[i];         if (w>=97 and w<=122) {w-=32;}         else             if (w>=65 and w<=90){ w+=32;}         out=out+w;     }     return out; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int p=1,count=0;     while (p<=x and count<100)     {         if (p==x) return true;         p=p*n;count+=1;     }     return false; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    int i,j,x,y,min;     for (i=0;i<grid.size();i++)         for (j=0;j<grid[i].size();j++)             if (grid[i][j]==1) {                 x=i;y=j;             }     min=grid.size()*grid.size();     if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];     if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x+1][y];     if (y>0 and grid[x][y-1]<min) min=grid[x][y-1];     if (y<grid.size()-1 and grid[x][y+1]<min) min=grid[x][y+1];     vector<int> out={};     for (i=0;i<k;i++)     if (i%2==0) out.push_back(1);     else out.push_back(min);     return out; } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<int> out={};     vector<int> has1={};     vector<int> has2={};     for (int i=0;i<numbers.size();i++)     {         if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;         if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())         {              has2.push_back(numbers[i]);         }         else has1.push_back(numbers[i]);     }     for (int i=0;i<numbers.size();i++)     if (find(has2.begin(),has2.end(),numbers[i])==has2.end())         out.push_back(numbers[i]);     return out;   } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    vector<string> out={};     for (int i=0;i<lst.size();i++)         {             int sum=0;             for (int j=0;j<lst[i].length();j++)                 if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)                 sum+=1;             string s="the number of odd elements in the string i of the input.";             string s2="";             for (int j=0;j<s.length();j++)                 if (s[j]=='i') s2=s2+to_string(sum);                 else s2=s2+s[j];             out.push_back(s2);         }     return out; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
    return x+y; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
   int i;    for (i=0;i<str.length();i++)    {         string rstr=str.substr(i);         if (is_palindrome(rstr))         {             string nstr;             nstr=str.substr(0,i);             string n2str(nstr.rbegin(),nstr.rend());             return str+n2str;         }    }    string n2str(str.rbegin(),str.rend());    return str+n2str; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    long long sum=0;     for (int i=0;i<lst.size();i++)     if (lst[i]-round(lst[i])<1e-4)     if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));     return sum; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    int nletter=0;     string out="";     for (int i=0;i<s.length();i++)     {         char w=s[i];         if (w>=65 and w<=90) w=w+32;         else if (w>=97 and w<=122) w=w-32;         else nletter+=1;         out=out+w;     }     if (nletter==s.length())     {         string p(s.rbegin(),s.rend());         return p;     }     else return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    vector<int> out={};     for (int i=0;i<x.size();i++)         {             int num=x[i];             bool u=true;             if (num==0) u=false;             while (num>0 and u)             {                 if (num%2==0) u=false;                 num=num/10;             }             if (u) out.push_back(x[i]);         }     sort(out.begin(),out.end());     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    map<char,int> count={},out={};     map <char,int>::iterator it;     int max=0;     for (int i=0;i<test.length();i++)         if (test[i]!=' ')         {             count[test[i]]+=1;             if (count[test[i]]>max) max=count[test[i]];         }     for (it=count.begin();it!=count.end();it++)     {         char w1=it->first;         int w2=it->second;         if (w2==max) out[w1]=w2;     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
    vector<string> out;     for (int i=0;i<strings.size();i++)     {         if (strings[i].find(substring)!=strings[i].npos)         out.push_back(strings[i]);     }     return out; } 
